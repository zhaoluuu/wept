"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const fs=require("fs"),path=require("path");let hackRequirePath="./hackrequire/index.js";process.env.UNPACK_DIR_PATH&&(hackRequirePath=path.join(process.env.UNPACK_DIR_PATH,hackRequirePath)),fs.existsSync(hackRequirePath)&&require(hackRequirePath);const inspector=require("inspector"),_v8=require("v8"),_vm=require("vm");"function"!=typeof process.send&&(console.error("Child Process send() is not defined"),process.exit(1));const{FILE_WATCHER_CONFIG:FILE_WATCHER_CONFIG,CHOKIDAR_EXT_CONFIG:CHOKIDAR_EXT_CONFIG,CHOKIDAR_LIB_NAME:CHOKIDAR_LIB_NAME}=process.env;function suicide(){try{process.exit(0),setTimeout((()=>{process.kill(process.pid,"SIGTERM")}),5e3)}catch(e){process.kill(process.pid,"SIGTERM")}}CHOKIDAR_EXT_CONFIG&&CHOKIDAR_EXT_CONFIG||(console.error("process env CHOKIDAR_EXT_CONFIG || CHOKIDAR_EXT_CONFIG is not defined"),process.exit(1)),process.on("disconnect",suicide);const chokidarExtConfig=JSON.parse(CHOKIDAR_EXT_CONFIG),fileWatcherConfig=JSON.parse(FILE_WATCHER_CONFIG);function verbose(...e){fileWatcherConfig.verbose&&console.log(...e)}const chokidar=CHOKIDAR_LIB_NAME?(verbose("using specific chokidar lib: "+CHOKIDAR_LIB_NAME),require(CHOKIDAR_LIB_NAME)):require("vscode-chokidar");if(fileWatcherConfig.inspectPort&&(inspector.open(Number(fileWatcherConfig.inspectPort)),console.log("chokidar cp open inspector at",inspector.url())),"function"!=typeof global.gc)try{_v8.setFlagsFromString("--expose_gc");var gc=_vm.runInNewContext("gc");global.gc=gc}catch(e){console.error(e)}verbose(CHOKIDAR_EXT_CONFIG,FILE_WATCHER_CONFIG);const isWin="win32"===process.platform,rootDir=fileWatcherConfig.root,realRoot=isWin?fileWatcherConfig.root:realcaseSync(fileWatcherConfig.root)||fileWatcherConfig.root;verbose("chokidar will watch",realRoot);const realRootLength=realRoot.length,realRootDiffers=rootDir!==realRoot;realRootDiffers&&console.warn(`Watcher rootDir does not match version on disk and was corrected (original: ${rootDir}, real: ${realRoot})`);const watcher=global.watcher=chokidar.watch(realRoot,chokidarExtConfig);function reportError(e){setTimeout((()=>{process.send({type:"error",data:toStr(e)})}),80)}let pushTimer;isWin||watcher.options.useFsEvents?watcher.options.useFsEvents&&verbose("chokidar watcher using fsevents"):console.warn("chokidar is not using native fsevents library and is falling back to unefficient polling."),watcher.on("ready",(()=>{process.send({type:"initsuccess"})})),watcher.on("all",((e,o)=>{o.indexOf(realRoot)<0?console.warn("Unexpected chokidar file change event",e,o):(realRootDiffers&&(o=rootDir+o.substr(realRootLength)),verbose("[verbose] chokidar file change event",e,o),pushFileChange([e,normalizeNFC(o),Date.now()]))})),watcher.on("error",reportError),process.on("uncaughtException",reportError),process.on("unhandledRejection",reportError);let changes=[];function pushFileChange(e){changes.push(e),pushTimer?changes.length>100&&sendFileChange():pushTimer=setTimeout((()=>{sendFileChange()}),80)}let count=0;function sendFileChange(){clearTimeout(pushTimer);let e=Array.from(changes);changes=[],pushTimer=void 0,count++,process.send({type:"filechange",data:e}),count%100==0&&global.gc&&(verbose("chokidar cp trigger gc"),global.gc())}function realcaseSync(e){const o=path.dirname(e);if(e===o)return e;const r=(path.basename(e)||e).toLowerCase();try{const e=fs.readdirSync(o).filter((e=>e.toLowerCase()===r));if(1===e.length){const r=realcaseSync(o);if(r)return path.join(r,e[0])}else if(e.length>1){const t=e.indexOf(r);if(t>=0){const r=realcaseSync(o);if(r)return path.join(r,e[t])}}}catch(e){}return null}const nonAscii=/[^\u0000-\u0080]/;function normalizeNFC(e){if(isWin||!e)return e;let o;return o=nonAscii.test(e)?e.normalize("NFC"):e,o}function toStr(e){return e?e.hasOwnProperty("toString")&&"function"==typeof e.toString?e.toString():"function"==typeof e[Symbol.toPrimitive]?e[Symbol.toPrimitive]():Object.prototype.toString.call(e)===Object.prototype.toString.call({})?JSON.stringify(e):""+e:isNaN(e)?"NaN":null===e?"null":typeof e}