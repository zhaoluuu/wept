"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const watcher_1=require("../watcher"),cp=require("child_process"),fse=require("fs-extra");class AAPLWatcherService extends watcher_1.WatcherService{constructor(e,i,t){super(e,i,t),this.root=e,this.config=i,this.extConfig=t,this._disposed=!1,this._retryTimes=0}get cp(){return this.ch}dispose(){this._disposed||(this._disposed=!0,this.ch&&(this.ch.kill(watcher_1.SIGTERM),this.ch=null),this.onClose())}startWatch(){if(this._disposed)return void this.config.logger.e("Already disposed");if(this.ch)return void this.config.logger.w("Already start watch @ pid",this.ch.pid);const{config:e}=this,i=cp.fork(e.chokidarJsPath,["--expose-gc"],{execPath:e.nodePath,stdio:["pipe","pipe","pipe","ipc"],env:{...process.env,FILE_WATCHER_CONFIG:JSON.stringify({root:this.root,verbose:e.verbose}),CHOKIDAR_EXT_CONFIG:JSON.stringify(this.extConfig),CHOKIDAR_LIB_NAME:this.extConfig.chokidarLibName||""}});this.ch=i,i.stdout.setEncoding("utf8"),i.stdout.on("data",(e=>{this.verbose(`chokidar cp stdout: ${e}`)})),i.stderr.on("data",(i=>{e.logger.e(`chokidar cp stderr: ${i}`)}));const t=()=>{i===this.ch&&this.onCpKilled()};i.on("disconnect",t),i.on("close",t),i.on("exit",t),i.on("error",((...i)=>{t(),e.logger.e("chokidar cp encountered errors",...i)})),i.on("message",(t=>{"object"==typeof t?this.onCpMessage(i,t):e.logger.w("unrecognized raw msg from chokidar cp",t)}))}onCpKilled(){if(this._disposed)return void this.verbose("chokidar cp killed because disposed");if(this._retryTimes>watcher_1.MAX_RESTARTS)return void this.config.logger.w("chokidar cp reached max retry count. give up.");const e=watcher_1.timeoutForRetry(this._retryTimes);this._retryTimes=this._retryTimes+1,this.config.logger.w("chokidar cp exit unexpected. restart within",e),this.ch=null,setTimeout(this.startWatch.bind(this),e)}async onCpMessage(e,i){if(this._disposed)return void this.config.logger.w("chokidar cp message ignored",i);if(e!==this.ch)return void this.config.logger.w("unrecognized chokidar cp");const{type:t,data:s}=i,{logger:r}=this.config;if("initsuccess"===t)this.verbose("chokidar cp initsuccess @ pid",e.pid),this._retryTimes=0,this.onInitSuccess();else if("filechange"===t){this.verbose("chokidar cp file change",s);const e=s;for(const i of e){if(!i||!i[0]||!i[1]){r.w("invalid chokidar change",i);continue}let e;if("unlink"!==i[0]&&"unlinkDir"!==i[0])try{e=await fse.stat(i[1])}catch(i){r.e("stat file fail",i),e=void 0}this.onChange({type:i[0],path:i[1],stat:e,initialTs:i[2]||-1})}}else"error"===t?this.onError(s):r.w("unrecognized message from chokidar cp",i)}}exports.AAPLWatcherService=AAPLWatcherService;