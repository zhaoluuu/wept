"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const watcher_1=require("../watcher"),path=require("path"),fse=require("fs-extra");class BuiltInAAPLWatcherService extends watcher_1.WatcherService{constructor(e,i,t){super(e,i,t),this.root=e,this.config=i,this.extConfig=t,this._disposed=!1}dispose(){this._disposed||(this._disposed=!0,this._chokidar&&(this._chokidar.close(),this._chokidar=null),this.onClose())}startWatch(){if(this._disposed)return void this.config.logger.e("Already disposed");if(this._chokidar)return void this.config.logger.w("VSChoikdar Already start");const{config:e}=this,i=this.root,t=realcaseSync(i)||i;this.verbose("vschokidar will watch",t);const s=t.length,r=i!==t;r&&e.logger.w(`vschokidar rootDir does not match version on disk and was corrected (original: ${i}, real: ${t})`);const o=this.extConfig,n=this.verbose.bind(this),c=(o.chokidarLibName?(n("using specific chokidar lib: "+o.chokidarLibName),require(o.chokidarLibName)):require("vscode-chokidar")).watch(this.root,this.extConfig);this._chokidar=c,c.options.useFsEvents?e.logger.w("vschokidar watcher using fsevents"):e.logger.w("vschokidar watcher not using fsevents!"),c.on("ready",this.onInitSuccess),c.on("close",this.dispose),c.on("error",this.onError),c.on("all",(async(o,n,a)=>{if(c!==this._chokidar)return void e.logger.w("unrecognized vschokidar instance");if(n.indexOf(t)<0)return void console.warn("Unexpected vschokidar file change event",o,n);let h=n;r&&(h=i+n.substr(s));const d=normalizeNFC(h);let l=a;if(!l&&"unlink"!==o&&"unlinkDir"!==o)try{l=await fse.stat(d)}catch(i){e.logger.e("stat file fail",i),l=void 0}this.onChange({type:o,path:d,stat:l,initialTs:Date.now()})}))}}function realcaseSync(e){const i=path.dirname(e);if(e===i)return e;const t=(path.basename(e)||e).toLowerCase();try{const e=fse.readdirSync(i).filter((e=>e.toLowerCase()===t));if(1===e.length){const t=realcaseSync(i);if(t)return path.join(t,e[0])}else if(e.length>1){const s=e.indexOf(t);if(s>=0){const t=realcaseSync(i);if(t)return path.join(t,e[s])}}}catch(e){}return null}exports.BuiltInAAPLWatcherService=BuiltInAAPLWatcherService;const nonAscii=/[^\u0000-\u0080]/;function normalizeNFC(e){if(!e)return e;let i;return i=nonAscii.test(e)?e.normalize("NFC"):e,i}