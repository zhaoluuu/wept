!function(require, directRequire){
"use strict";const minimatch=require("minimatch");function trailing(e,t,i=!1){return i?e.endsWith(t)?e.slice(0,e.length-1):e:e.endsWith(t)?e:e+t}function leading(e,t,i=!1){return i?e.startsWith(t)?e.slice(1):e:e.startsWith(t)?e:t+e}function doRule(e,t){const i=e.slice(e.lastIndexOf("/")+1);let n=!1;if(!t)return!1;const l=t.value.toLowerCase();if("prefix"===t.type)n=i.startsWith(l);else if("suffix"===t.type)n=i.endsWith(l);else if("folder"===t.type)n=leading(e,"/").startsWith(trailing(leading(l,"/"),"/"));else if("file"===t.type)n=leading(e,"/")===leading(l,"/");else if("glob"===t.type)try{n=minimatch(e,l)||minimatch(leading(e,"/"),l)}catch(e){console.error(`project.config.json packOptions rule ${l} invalid; ${e}`),n=!1}else if("regexp"===t.type)try{n=new RegExp(l,"igm").test(e)||new RegExp(l,"igm").test(leading(e,"/"))}catch(e){console.error(`project.config.json packOptions rule ${l} invalid; ${e}`),n=!1}return n}const FFSPRGRulesFactory=function(e){let t=null,i=null,n=Object.create(null);return function(e,l,r=null){if(l.length<1)return!1;if(t===l&&i===r){if(void 0!==n[e])return n[e]}else t=l,i=r,n=Object.create(null);const s=e.replace(/\\/g,"/").toLowerCase();if(!s)return!1;let o=!1;for(const e of l)if(o=doRule(s,e),o)break;if(r){let e=!1;for(const t of r)if(e=doRule(s,t),e){o=!1;break}}return n[e]=o,o}};module.exports={isFileIgnored:FFSPRGRulesFactory(),isFileIncluded:FFSPRGRulesFactory()};
}(require("licia/lazyImport")(require), require)