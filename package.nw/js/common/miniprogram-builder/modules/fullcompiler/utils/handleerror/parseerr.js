!function(require, directRequire){
"use strict";const tslib_1=require("tslib"),locales_1=tslib_1.__importDefault(require("../../../../utils/locales/locales")),errorconfig_1=require("./errorconfig"),path=require("path"),babelCodeFrame=require("babel-code-frame"),jsonlint=require("../../../../utils/jsonlint"),jsonParse=jsonlint.parser;function getErrLine(r,e,s,n){return`${n}\n${babelCodeFrame(r,e,s=s>0?s:1)}`}const parseWXMLRuntimeErr=async(r,e,s)=>{let n=s.message,i=[],t="",a="";n=n.replace(errorconfig_1.errorPrefix.WXML_RUNTIME_ERROR_REG,""),n=n.replace("WXMLRT:",""),i=n.split(":"),t=i[0];try{a=e.getFileString(r.miniprogramRoot,t)}catch(r){return{file:t,msg:n}}const l=parseInt(i[2],10),o=parseInt(i[3],10);if(-1!==l)try{const r=n.replace(`${i[0]}:${i[1]}:${i[2]}:${i[3]}:`,"");n=getErrLine(a,l,o,r)}catch(r){}return{file:t,msg:n}},parseJsonFileErr=r=>({file:r.file,msg:locales_1.default.config.PARSEERR_ENTRANCE_FILE_ERROR.format(r.file)}),parseJsonParseErr=(r,e)=>{const s=e.data||"";try{jsonParse.parse(s)}catch(n){try{const i=`Expecting ${n.expected}, got ${n.token}`;let t=getErrLine(s,n.line,n.loc.first_column,i);if(e.fileName){const a=getErrorFileInfo(r,{fileName:e.fileName,line:n.line,isPlugin:e.isPlugin});t=`${getErrLine(s,n.line,n.loc.first_column,i)}\n${a}`}return`${e.fileName}\n${t}`}catch(r){}}return`${e.fileName}\n${e.error}`},_parseWxmlErr=async(r,e,s,n)=>{const i=(s||"").trim().split(":");try{if(i.length){const s=parseInt(i[1].trim(),10),t=parseInt(i[2].trim(),10)-1,a=getErrorFileInfo(r,{fileName:i[0],line:s,isPlugin:n}),l=e.getFileString(r.miniprogramRoot,i[0]),o=`${getErrLine(l,s,t,i[3])}\n${a}`;return{file:i[0],msg:o}}}catch(r){}return{file:"",msg:s}},parsePluginWxmlErr=async(r,e,s)=>await _parseWxmlErr(r,e,s,!0),parseWxmlErr=async(r,e,s)=>await _parseWxmlErr(r,e,s,!1),getErrorFileInfo=(r,e)=>{const{fileName:s,line:n,isPlugin:i=!1}=e;if(!s)return"";const t=i?r.pluginRoot:r.miniprogramRoot;return`at files://${t?path.join(t,s):s.replace(/^\.\//,"")}#${n}`},_parseWxssErr=async(r,e,s,n)=>{let i="string"==typeof s?s:s.msgForConsole||"";i=i.split("\n")[0];try{if(/not found from/.test(i)){const r=i.match(/ERR:.+?`(.+)`.+?`(.+)`/);if(!r)return{file:"",msg:i};const e=r[1],s=r[2];return{file:s,msg:"File not found: "+e}}const s=i.match(/ERR:\s(.+)\((\d*):(\d*)\):\s*?(.+)/);if(!s)return{file:"",msg:i};const t=parseInt(s[2],10),a=parseInt(s[3],10)-1,l=s[4].replace(/`/g,'"'),o=s[1],c=e.getFileString(r.miniprogramRoot,o),p=getErrorFileInfo(r,{fileName:o,line:t,isPlugin:n}),m=`${getErrLine(c,t,a,l)}\n${p}`;return{file:o,reason:l,msg:m}}catch(r){return{file:"",msg:i}}},parsePluginWxssErr=async(r,e,s)=>await _parseWxssErr(r,e,s,!0),parseWxssErr=async(r,e,s)=>await _parseWxssErr(r,e,s,!1);module.exports={parseWXMLRuntimeErr:parseWXMLRuntimeErr,parseJsonFileErr:parseJsonFileErr,parseJsonParseErr:parseJsonParseErr,parsePluginWxmlErr:parsePluginWxmlErr,parsePluginWxssErr:parsePluginWxssErr,parseWxmlErr:parseWxmlErr,parseWxssErr:parseWxssErr};
}(require("licia/lazyImport")(require), require)