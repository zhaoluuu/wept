!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.IOSUtils=void 0;const tslib_1=require("tslib"),child_process=tslib_1.__importStar(require("child_process")),path_1=tslib_1.__importDefault(require("path")),fs_extra_1=tslib_1.__importDefault(require("fs-extra")),glob_1=tslib_1.__importDefault(require("glob")),env_1=require("../../../utils/env"),deviceUtils=tslib_1.__importStar(require("./device")),projectConfigUtils=tslib_1.__importStar(require("./projectconfig")),cp_1=require("../../../utils/cp"),miniapp_builder_1=require("../../../utils/miniapp-builder"),miniappJson_1=require("../../../utils/miniappJson"),singletontask_1=require("../../../utils/singletontask"),uuidv4=require("uuid/v4"),sizeOf=require("image-size"),plist=require("simple-plist"),isWin="win32"===process.platform,errorIOSSdkVersions=["1.0.19"],privateDescriptions=["NSPhotoLibraryUsageDescription","NSPhotoLibraryAddUsageDescription","NSCameraUsageDescription","NSMicrophoneUsageDescription","NSLocationWhenInUseUsageDescription","NSLocationAlwaysUsageDescription","NSLocationAlwaysAndWhenInUseUsageDescription","NSCalendarsUsageDescription","NSContactsUsageDescription","NSBluetoothPeripheralUsageDescription","NSBluetoothAlwaysUsageDescription","NSSpeechRecognitionUsageDescription","NSRemindersUsageDescription","NSMotionUsageDescription","NSHealthUpdateUsageDescription","NSHealthShareUsageDescription","NSAppleMusicUsageDescription","NFCReaderUsageDescription","NSHealthClinicalHealthRecordsShareUsageDescription","NSHomeKitUsageDescription","NSSiriUsageDescription","NSFaceIDUsageDescription","NSLocalNetworkUsageDescription","NSUserTrackingUsageDescription","NSLocationUsageDescription"],defaultIconDirPath=path_1.default.join(__dirname,"../../../static/images/"),iconInfoMap={appStore1024:{size:[1024,1024],scale:1,idiom:"ios-marketing",required:!0},mainIcon120:{size:[60,60],scale:2,idiom:"iphone",required:!0},mainIcon180:{size:[60,60],scale:3,idiom:"iphone"},spotlightIcon80:{size:[40,40],scale:2,idiom:"iphone"},spotlightIcon120:{size:[40,40],scale:3,idiom:"iphone"},settingsIcon58:{size:[29,29],scale:2,idiom:"iphone"},settingsIcon87:{size:[29,29],scale:3,idiom:"iphone"},notificationIcon40:{size:[20,20],scale:2,idiom:"iphone"},notificationIcon60:{size:[20,20],scale:3,idiom:"iphone"},ipadMainIcon152:{size:[76,76],scale:2,idiom:"ipad"},ipadMainIcon167:{size:[83.5,83.5],scale:2,idiom:"ipad"},ipadSpotlightIcon40:{size:[40,40],scale:1,idiom:"ipad"},ipadSpotlightIcon80:{size:[40,40],scale:2,idiom:"ipad"},ipadSettingsIcon29:{size:[29,29],scale:1,idiom:"ipad"},ipadSpotlightIcon58:{size:[29,29],scale:2,idiom:"ipad"},ipadNotificationIcon20:{size:[20,20],scale:1,idiom:"ipad"},ipadNotificationIcon40:{size:[20,20],scale:2,idiom:"ipad"}},getDepReg=e=>new RegExp(`s.subspec '${e}'.*\n(?:.*\n)*?(?:.*sp.vendored_frameworks = \\[\n)((?:.*'.*?'.*\n)*?)(?:.*\\]\n)`,"m"),buildIOSPluginTask={};class IOSUtils{constructor(e,i={},t,n){this.root=e,this.userConfig=i,this.miniappDirPath=t,this.devtoolsVersion=n}getProjectConfig(){const e=projectConfigUtils.getProjectConfig(this.root,this.userConfig);if(!e)throw new Error("iOS project folder not found. Are you sure this is a miniapp project?");return e}getBundleId(e){return child_process.execFileSync("/usr/libexec/PlistBuddy",["-c","Print:CFBundleIdentifier",path_1.default.join(e,"Info.plist")],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim()}generateTempDemoIpaPath(e){const i=path_1.default.join(e,"../.."),t=path_1.default.basename(i),n=path_1.default.dirname(i),s=path_1.default.join(n,t+"-operateDir");fs_extra_1.default.existsSync(s)&&fs_extra_1.default.removeSync(s),fs_extra_1.default.ensureDirSync(s);const a=path_1.default.join(s,"Payload/demo.app");return fs_extra_1.default.copySync(e,a),a}tryInstallPod(e,i){const t=this.getProjectConfig(),{sourceDir:n}=t,s={cwd:n,env:(0,env_1.getProcessEnv)()};i.progress("export LANG=en_US.UTF-8 && pod install"),child_process.execSync("export LANG=en_US.UTF-8 && pod install",s)}async runLocal(e,i){const t=this.getProjectConfig(),{sourceDir:n}=t;process.chdir(n),this.tryInstallPod(e,i);const s=path_1.default.basename(t.name,path_1.default.extname(t.name)),a=e.scheme||s;if(i.progress(`Found Xcode ${t.isWorkspace?"workspace":"project"} "${t.name}"`),e.device||e.udid){if(e.udid||e.device){const n=await deviceUtils.getDevices({recorder:i}),s=n.find(i=>i.udid===e.udid||i.name===e.device);if(!s)throw new Error(`Could not find a device with udid(${e.udid}) or device(${e.device}). ${deviceUtils.printFoundDevices(n)}`);if("simulator"===s.type)return void await this.runOnSimulatorLocal(t,a,e,i);await this.runOnDeviceLocal(t,a,s,i)}}else await this.runOnSimulatorLocal(t,a,e,i)}async runCloud(e,i){try{const{deviceType:t,udid:n,projectPath:s,demoIpaPath:a,sdkPath:o,bindingInfo:r,certificateInfo:c,arch:p="arm64",pluginDirList:l}=e,d=this.generateTempDemoIpaPath(a),u="simulator"===t,f=(0,miniappJson_1.tryGetIOSMiniappJson)(s);let h=r;if(c.signType===miniapp_builder_1.miniappSinTypes.appleId.type){const{mobileapp_info:e={}}=h;h=Object.assign(Object.assign({},h),{mobileapp_info:Object.assign(Object.assign({},e),{bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID,debug_ios_bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID})})}const _=await this.updateIOSInfoPlistInfo(s,h,d,f,i);await this.updateIOSAppConfigPlistInfo(s,h,d,f,o,u,i),await this.updateIOSAppexInfoPlistInfo(h,d,f,_,i),await this.updateIOSIcons(s,d,"",f,!1,i),await this.updateSplashScreen(s,d,f,!1,i,h),await this.updateExtendedSdk(d,o,p,f,i),await this.updatePlugin(d,l,i);const g=await this.getEntitlements(h,d,f,i);if("device"===t){const{mobileapp_info:e={}}=h,t=e.ios_flag&&e.bundle_id||e.debug_ios_bundle_id;await(0,miniapp_builder_1.signAndInstallOrExport)(s,d,c,{bundleId:t,install:!0,deviceId:n,entitlements:g},{recorder:i,miniappDirPath:this.miniappDirPath,devtoolsVersion:this.devtoolsVersion})}else await this.runOnSimulatorCloud(d,{udid:n},i)}catch(e){throw new Error("Run the app failed："+e.message)}}async buildLocal(e,i){const t=this.getProjectConfig();process.chdir(t.sourceDir);const n=path_1.default.basename(t.name,path_1.default.extname(t.name)),s=e.scheme||n;this.tryInstallPod(e,i),i.progress("start build ipa...");const a=await this.buildProjectArchive(t,{output:e.output,scheme:s},i),o=await this.exportArchive(t,a,e,i);return console.log("Successfully build ipa: "+o),o}async buildCloud(e,i){try{const{projectPath:t,demoIpaPath:n,sdkPath:s,arch:a="arm64",bindingInfo:o,certificateInfo:r,output:c,miniappCacheDirPath:p,pluginDirList:l}=e,d=this.generateTempDemoIpaPath(n),{selfCertificate:u={}}=r,f=(null==u?void 0:u.isPublish)||!1,h=(0,miniappJson_1.tryGetIOSMiniappJson)(t);if(errorIOSSdkVersions.includes(h.sdkVersion))throw new Error("当前 mini-ios.sdkVersion 存在缺陷，请参考更新日志进行修改");let _=o;if(r.signType===miniapp_builder_1.miniappSinTypes.appleId.type){const{mobileapp_info:e={}}=_;_=Object.assign(Object.assign({},_),{mobileapp_info:Object.assign(Object.assign({},e),{bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID,debug_ios_bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID})})}const g=await this.updateIOSInfoPlistInfo(t,_,d,h,i);await this.updateIOSAppConfigPlistInfo(t,_,d,h,s,!1,i),await this.updateIOSAppexInfoPlistInfo(_,d,h,g,i),await this.updateIOSIcons(t,d,p,h,f,i),await this.updateSplashScreen(t,d,h,f,i,_),await this.updateExtendedSdk(d,s,a,h,i),await this.updatePlugin(d,l,i);const m=await this.getEntitlements(_,d,h,i),{mobileapp_info:y={}}=_;let S;S=r.signType===miniapp_builder_1.miniappSinTypes.appleId.type?miniapp_builder_1.DEFAULT_BUNDLE_ID:y.ios_flag&&y.bundle_id||y.debug_ios_bundle_id;const I={bundleId:S,output:c,entitlements:m},v={recorder:i,miniappDirPath:this.miniappDirPath,devtoolsVersion:this.devtoolsVersion};if(u.isPublish){const e=await(0,miniapp_builder_1.codesignAndExport)(t,d,I,v,this.useTpush(h));if(!0!==e.success)throw new Error("Build ipa failed："+(e.errMsg||"codesignAndExport failed"))}else await(0,miniapp_builder_1.signAndInstallOrExport)(t,d,r,I,v)}catch(e){throw new Error("Build ipa failed："+e.message)}}launchSimulator(e,i){let t;try{t=JSON.parse(child_process.execFileSync("xcrun",["simctl","list","--json","devices"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}))}catch(e){throw new Error("Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues."+e.message)}const n=["iPhone 13","iPhone 12","iPhone 11"].reduce((e,i)=>e||deviceUtils.findMatchingSimulator(t,{device:i}),deviceUtils.findMatchingSimulator(t,e));if(!n)throw new Error("No simulator available with "+(e.device?`name "${e.device}"`:`udid "${e.udid}"`));const s=child_process.execFileSync("xcode-select",["-p"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim();if(child_process.execFileSync("open",[s+"/Applications/Simulator.app","--args","-CurrentDeviceUDID",n.udid],{env:(0,env_1.getProcessEnv)()}),!n.booted){const e=deviceUtils.formattedDeviceName(n);i.progress("Launching "+e),child_process.spawnSync("xcrun",["simctl","boot",n.udid],{env:(0,env_1.getProcessEnv)()})}return n}async runOnSimulatorCloud(e,i,t){const{udid:n}=i,s=this.launchSimulator({udid:n},t);await this.installAppOnSimulator(s,e,t),await this.launchAppOnSimulator(s,e,t)}async runOnSimulatorLocal(e,i,t,n){const s=this.launchSimulator(t,n),{appPath:a}=await this.buildProjectApp(e,{udid:s.udid,scheme:i},n);await this.installAppOnSimulator(s,a,n),await this.launchAppOnSimulator(s,a,n)}async runOnDeviceLocal(e,i,t,n){const{appPath:s}=await this.buildProjectApp(e,{udid:t.udid,scheme:i},n);if("catalyst"===t.type){child_process.spawn(`${s}/${i}`,[],{detached:!0,stdio:"ignore",env:(0,env_1.getProcessEnv)()}).unref()}else{const e=["--bundle",s,"--id",t.udid,"--justlaunch"];n.progress("Installing and launching your app on "+t.name);const i=path_1.default.join(__dirname,"../../../vendor/ios-deploy/ios-deploy");await(0,cp_1.spawnSync)(i,e,{},n)}return n.progress("Install successfully the app to the device.")}buildProjectApp(e,i,t){return new Promise((n,s)=>{const{scheme:a,udid:o}=i,r=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",a];let c;o&&r.push("-destination","id="+o),t.progress(`Building (using "xcodebuild ${r.join(" ")}")`),this.xcbeautifyAvailable()?c=child_process.spawn("xcbeautify",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}):this.xcprettyAvailable()&&(c=child_process.spawn("xcpretty",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}));const p=child_process.spawn("xcodebuild",r,{env:(0,env_1.getProcessEnv)()});let l="",d="";p.stdout.on("data",e=>{const i=e.toString();t.progress(i),l+=i,c&&c.stdin.write(e)}),p.stderr.on("data",e=>{const i=e.toString();d+=i,t.progress(i)}),p.on("close",i=>{if(c&&c.stdin.end(),0!==i)return void s(new Error(` Failed to build iOS project.\n              We ran "xcodebuild" command but it exited with error code ${i}. To debug build\n              logs further, consider building your app with Xcode.app, by opening\n              ${e.name}.\n              ${c?void 0:`${l}\n${d}`}\n            `));let o;try{o=this.getBuildInfo(e,l,a)}catch(e){s(e)}t.progress("Successfully built the app"),n(o)})})}async installAppOnSimulator(e,i,t){const n=["simctl","install",e.udid,i];await(0,cp_1.spawnSync)("xcrun",n,{},t)}async launchAppOnSimulator(e,i,t){const n=this.getBundleId(i),s=["simctl","launch",e.udid,n];await(0,cp_1.spawnSync)("xcrun",s,{},t),t.progress("Successfully launched the app on the simulator")}async buildProjectArchive(e,i,t){const{output:n,scheme:s,udid:a}=i,o=path_1.default.join(n,"./app"),{sourceDir:r}=e;fs_extra_1.default.ensureDirSync(path_1.default.dirname(o));const c=["archive",e.isWorkspace?"-workspace":"-project",e.name,"-scheme",s,"-archivePath",o];a&&c.push("-destination","id="+a);try{if(await(0,cp_1.spawnSync)("xcodebuild",c,{cwd:r},t),!fs_extra_1.default.existsSync(o+".xcarchive"))throw new Error(`Failed to build iOS project.\n          ${o+".xcarchive"} does not found\n        `);return t.progress(`Successfully archive the app: ${o}.xcarchive`),o+".xcarchive"}catch(i){throw new Error(`Failed to build iOS project. To debug build\n        logs further, consider building your app with Xcode.app, by opening\n        ${e.name}.\n      `)}}async exportArchive(e,i,t,n){const s=path_1.default.join(t.output,"ipa");fs_extra_1.default.ensureDirSync(s),fs_extra_1.default.emptyDirSync(s);const{exportOptionPlistPath:a}=t;if(!a)throw new Error("build ios ipa require exportOptionPlistPath in project.miniapp.json");let o="";o=path_1.default.isAbsolute(a)?a:path_1.default.join(t.projectPath,a);const r=["-exportArchive","-archivePath",i,"-exportOptionsPlist",o,"-exportPath",s];try{await(0,cp_1.spawnSync)("xcodebuild",r,{cwd:e.sourceDir},n)}catch(i){throw new Error(`To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${e.name}.\n          `)}return fs_extra_1.default.removeSync(i),s}getTargetPaths(e){const i=JSON.parse(e);for(const e in i){if("app"===i[e].buildSettings.WRAPPER_EXTENSION)return{targetBuildDir:i[e].buildSettings.TARGET_BUILD_DIR,executableFolderPath:i[e].buildSettings.EXECUTABLE_FOLDER_PATH}}return{}}getBuildInfo(e,i,t){const n=this.getPlatformName(i),s=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",t,"-sdk",n,"-showBuildSettings","-json"].join(" "),a=child_process.execSync("xcodebuild "+s,{encoding:"utf8",cwd:e.sourceDir,env:(0,env_1.getProcessEnv)()}),o=this.getBuildProductDir(i),{executableFolderPath:r}=this.getTargetPaths(a);if(!r)throw new Error("Failed to get the app name.");return{sdk:n,appPath:`${o}/${r}`}}getPlatformName(e){const i=/export PLATFORM_NAME\\?="?(\w+)"?$/m.exec(e);if(!i)throw new Error("Couldn't find PLATFORM_NAME in xcodebuild output.");return i[1]}getBuildProductDir(e){const i=/export BUILT_PRODUCTS_DIR\\?="?(.+)"?$/m.exec(e);if(!i)throw new Error("Couldn't find BUILT_PRODUCTS_DIR in xcodebuild output.");return i[1]}xcbeautifyAvailable(){try{child_process.execSync("xcbeautify --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}xcprettyAvailable(){try{child_process.execSync("xcpretty --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}async updateIOSInfoPlistInfo(e,i,t,n,s){var a,o,r,c,p,l,d;s.progress("update app base info...");const{mobileapp_info:u={}}=i,f=u.mobileapp_id,h=path_1.default.join(t,"Info.plist"),_=plist.readFileSync(h);if(_.CFBundleName=n.name,_.CFBundleDisplayName=n.name,_.CFBundleShortVersionString=n.version,"number"==typeof n.versionCode?_.CFBundleVersion=parseInt(n.versionCode.toString(),10).toString():_.CFBundleVersion=(parseInt(_.CFBundleVersion,10)+1).toString(),_.CFBundleIdentifier=u.ios_flag&&u.bundle_id||u.debug_ios_bundle_id,Array.isArray(_.CFBundleURLTypes)||(_.CFBundleURLTypes=[]),(null===(o=null===(a=_.CFBundleURLTypes)||void 0===a?void 0:a[0])||void 0===o?void 0:o.CFBundleURLSchemes)&&(_.CFBundleURLTypes[0].CFBundleURLSchemes=[f]),_.CFBundleURLTypes[0]&&(_.CFBundleURLTypes=[_.CFBundleURLTypes[0]]),privateDescriptions.forEach(e=>{var i,t;(null===(i=null==n?void 0:n.privateDescriptions)||void 0===i?void 0:i[e])?_[e]=null===(t=n.privateDescriptions)||void 0===t?void 0:t[e]:delete _[e]}),!0===(null===(r=null==n?void 0:n.infoPlist)||void 0===r?void 0:r.DisableAppUsesNonExemptEncryption)?_.ITSAppUsesNonExemptEncryption=!1:delete _.ITSAppUsesNonExemptEncryption,_.UIBackgroundModes=[],!0===(null===(c=null==n?void 0:n.infoPlist)||void 0===c?void 0:c.AudioInBackgroundMode)&&_.UIBackgroundModes.push("audio"),!0===(null===(p=null==n?void 0:n.infoPlist)||void 0===p?void 0:p.LocationInBackgroundMode)&&_.UIBackgroundModes.push("location"),!0===(null===(l=null==n?void 0:n.infoPlist)||void 0===l?void 0:l.requiresFullScreen)?_.UIRequiresFullScreen=!0:delete _.UIRequiresFullScreen,"object"==typeof(null===(d=null==n?void 0:n.infoPlist)||void 0===d?void 0:d.CFBundleURLTypes)){const e=this.generateInfoPlistCFBundleURLTypesItem(n.infoPlist.CFBundleURLTypes);_.CFBundleURLTypes.push(e);const{additionalCFBundleURLTypes:i}=n.infoPlist.CFBundleURLTypes;Array.isArray(i)&&i.forEach(e=>{if("object"==typeof e){const i=this.generateInfoPlistCFBundleURLTypesItem(e);_.CFBundleURLTypes.push(i)}})}return!0===n.enableIpad&&((0,miniappJson_1.iOSAppJsonIsUsingIPadResizable)(e)?(_["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown","UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"],s.progress("ipad is support Landscape")):(_["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown"],s.progress("ipad is not support Landscape"))),plist.writeFileSync(h,_),_.CFBundleVersion}generateInfoPlistCFBundleURLTypesItem(e){const i={};return e.CFBundleURLName&&(i.CFBundleURLName=e.CFBundleURLName),e.CFBundleURLSchemes&&(i.CFBundleURLSchemes=[e.CFBundleURLSchemes]),e.CFBundleTypeRole&&(i.CFBundleTypeRole=e.CFBundleTypeRole),i}async updateIOSAppexInfoPlistInfo(e,i,t,n,s){if(this.useTpush(t)){s.progress("update appex for notification base info...");const{mobileapp_info:a={}}=e,o=path_1.default.join(i,"PlugIns/TPNSService.appex"),r=path_1.default.join(o,"Info.plist"),c=plist.readFileSync(r);c.CFBundleShortVersionString=t.version,s.progress("update appex for CFBundleVersion: "+n),c.CFBundleVersion=n;const p=a.ios_flag&&a.bundle_id||a.debug_ios_bundle_id;c.CFBundleIdentifier=t.tpush.serviceBundleId||p+".service",s.progress("update appex bundle identifier for infoPlist : "+c.CFBundleIdentifier),plist.writeFileSync(r,c)}else s.progress("not using tpush...")}useTpush(e){return(0,miniappJson_1.iOSMiniAppJsonIsUsingTpush)(e)}useGDT(e){return(0,miniappJson_1.iOSMiniAppJsonIsUsingGDT)(e)}async updateIOSAppConfigPlistInfo(e,i,t,n,s,a,o){var r;o.progress("update app module info...");const{module_info:c={},cpa_info:p={},cpa_package_info:l={enable_remove_watermark:!1}}=i;if(!p.sdk_key||!p.sdk_key_secret)throw new Error("sdkKey and sdkSecret not found");const d=path_1.default.join(t,"MiniApp.bundle"),u=path_1.default.join(d,"AppConfig.plist"),f=plist.readFileSync(u);l.enable_remove_watermark&&(f.enableRemoveWatermark=!0),f.miniModuleId=c.module_id,f.sdkKey=p.sdk_key,f.sdkSecret=p.sdk_key_secret;const{privacy:h={}}=n;f.privacy||(f.privacy={}),f.privacy.enable=!!h.enable;const _=path_1.default.posix.join(d,"configs/privacy.json");let{template:g}=h;const{contentViewImage:m,cancelButtonImage:y,confirmButtonImage:S}=h;h.enable?g?(path_1.default.isAbsolute(g)||(g=path_1.default.resolve(e,g)),fs_extra_1.default.ensureDirSync(path_1.default.posix.join(d,"configs")),fs_extra_1.default.copyFileSync(g,_),f.privacy.template="configs/privacy.json"):f.privacy.template="configs/defaultPrivacy.json":(f.privacy.template="",fs_extra_1.default.removeSync(_)),this.updatePrivacyBackgroundImage(e,t,o,"contentViewImage",m),this.updatePrivacyBackgroundImage(e,t,o,"confirmButtonImage",S),this.updatePrivacyBackgroundImage(e,t,o,"cancelButtonImage",y);const{appMenuEnable:I=!0}=n;f.appMenuEnable=I;const{enableVConsole:v="undefined"}=n;f.enableVConsole=v;const{tpush:b}=n;let x=!1;if("object"==typeof b){const e=path_1.default.posix.join(t,"PlugIns/TPNSService.appex"),i=path_1.default.posix.join(e,"AppConfig.plist");if(this.useTpush(n)){f.TPNSAccessID=b.accessID,f.TPNSAccessKey=b.accessKey,b.clusterDomainName?f.clusterDomainName=b.clusterDomainName:delete f.clusterDomainName;const t=a?"x86_64":"arm64",n=path_1.default.join(s,`appex/${t}/TPNSService.appex`);if(!fs_extra_1.default.existsSync(n))throw new Error("can not found extendsdk: "+n);try{fs_extra_1.default.copySync(n,e),plist.writeFileSync(i,f),x=!0}catch(e){throw new Error("copy TPNSService.appex to app failed: "+e)}}}if(!x)try{const e=path_1.default.posix.join(t,"PlugIns");fs_extra_1.default.existsSync(e)?(fs_extra_1.default.removeSync(e),o.progress("removed PlugIns folder...")):o.progress("no PlugIns folder...")}catch(e){throw new Error("remove TPNSService.appex from app failed: "+e)}if(null===(r=n.useExtendedSdk)||void 0===r?void 0:r.WeAppLBS){if(!n.qmapAPIKey)throw new Error("You need to provide the Tencent Location Service API Key when using LBS SDK.");f.qmapAPIKey=n.qmapAPIKey}const{gdt:w}=n,P=this.useGDT(n);f.GDTAd=P?{appid:w.appid,enable:!0,SplashAd:{placementId:w.splashAd_placementId,fetchDelay:w.splashAd_fetchDelay||3}}:{appid:"",enable:!1,SplashAd:{placementId:"",fetchDelay:3}};const{enableDebugLog:F=!1}=n;f.enableDebugLog=F,plist.writeFileSync(u,f)}updatePrivacyBackgroundImage(e,i,t,n,s){t.message("doing","updatePrivacyBackgroundImage "+n);if(fs_extra_1.default.readdirSync(i).forEach(e=>{"privacy_"+n===path_1.default.basename(e,path_1.default.extname(e))&&fs_extra_1.default.removeSync(path_1.default.join(i,e))}),!s)return;path_1.default.isAbsolute(s)||(s=path_1.default.join(e,s));const a=path_1.default.extname(s),o=path_1.default.join(i,`privacy_${n}${a}`);try{fs_extra_1.default.copyFileSync(s,o)}catch(e){throw t.message("fail",`copy privacy image failed: ${n}, ${s} to ${o}`),e}}updateBundleIcons(e,i,t,n,s){const a=[],o=[],r=[];for(const c in t){if(!t[c])continue;let p=t[c];path_1.default.isAbsolute(p)||(p=path_1.default.join(e,t[c]));const l=iconInfoMap[c];try{const e=sizeOf(p),i=l.size[0]*l.scale,n=l.size[1]*l.scale;if(e.width!==i||e.height!==n){s.progress(`check ${c} size failed, require [${i}, ${n}] but [${e.width}, ${e.height}] ingore ${t[c]} `);continue}}catch(e){s.progress(`get ${c} info failed, ingore ${t[c]}（e: ${e.message}）`);continue}const d=path_1.default.extname(p),u=1===l.scale?"":`@${l.scale}x`,f=`${l.size[0]}x${l.size[1]}`,h=c.startsWith("ipad"),_="appStore1024"===c,g=n,m=path_1.default.join(i,`${g}${f}${u}${h?"~ipad":""}${d}`),y={from:p,to:m,filename:path_1.default.basename(m),size:f,scale:l.scale+"x",idiom:l.idiom,key:c};a.push(y),_||(h?r.includes(`${g}${f}`)||r.push(`${g}${f}${u}`):o.includes(`${g}${f}`)||o.push(`${g}${f}${u}`))}return{iphoneBundleIconFiles:o,ipadBundleIconFiles:r,addFiles:a}}async updateIOSIcons(e,i,t,n,s,a){a.progress("update app icons...");const{icons:o={}}=n,r=s&&!isWin&&!!t;a.progress("genAssetCar: "+r);const c=glob_1.default.sync("AppIcon*.+(png|jpg|jpeg|webp)",{nodir:!0,cwd:i}).map(e=>path_1.default.join(i,e)),p="AppIcon-"+uuidv4().slice(0,8),{iphoneBundleIconFiles:l=[],ipadBundleIconFiles:d=[],addFiles:u=[]}=this.updateBundleIcons(e,i,o,p,a),f={};for(const e in iconInfoMap){if(!iconInfoMap[e].required||o[e])continue;const i=iconInfoMap[e].size[0]*iconInfoMap[e].scale,t=iconInfoMap[e].size[1]*iconInfoMap[e].scale;if(f[e]=path_1.default.join(defaultIconDirPath,`donut-icon${i}x${t}.png`),a.progress(`using default app icons when ${e} is not config...`),!fs_extra_1.default.existsSync(f[e]))throw new Error(`required ${e} but not default or set`)}const{iphoneBundleIconFiles:h,ipadBundleIconFiles:_,addFiles:g}=this.updateBundleIcons(e,i,f,p,a);if(l.push(...h),d.push(..._),u.push(...g),!l.length&&!d.length)return;c.forEach(e=>{fs_extra_1.default.existsSync(e)&&fs_extra_1.default.removeSync(e)});const m=path_1.default.join(t,"__assetCarOperateDir/assetsCar/"),y=path_1.default.join(m,`Assets.xcassets/${p}.appiconset/`);r&&(fs_extra_1.default.ensureDirSync(y),fs_extra_1.default.emptyDirSync(y));const S=[];if(u.forEach(e=>{fs_extra_1.default.existsSync(e.to)&&fs_extra_1.default.removeSync(e.to),fs_extra_1.default.copyFileSync(e.from,e.to),r&&(fs_extra_1.default.copySync(e.from,path_1.default.join(y,e.filename)),S.push({filename:e.filename,size:e.size,scale:e.scale,idiom:e.idiom}))}),r&&fs_extra_1.default.writeJsonSync(path_1.default.join(y,"Contents.json"),{images:S,info:{author:"xcode",version:1}},{spaces:"\t"}),r){const e=path_1.default.join(__dirname,"../../../static/scripts/assetsCar/"),t=path_1.default.join(m,"createAssetsCar");fs_extra_1.default.copySync(e,m);try{await(0,miniapp_builder_1.checkXcodeEnv)(a),child_process.execSync(`"${t}" ${p}`,{env:(0,env_1.getProcessEnv)()})}catch(e){a.progress("createAssetsCar failed "+(e.message||""))}const n=path_1.default.join(m,"build/Assets.car"),s=path_1.default.join(i,"Assets.car");fs_extra_1.default.copyFileSync(n,s)}else{const e=path_1.default.join(i,"Assets.car");fs_extra_1.default.removeSync(e)}const I=path_1.default.join(i,"Info.plist"),v=plist.readFileSync(I);v.CFBundleIcons||(v.CFBundleIcons={CFBundlePrimaryIcon:{}}),v.CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconName=p,v.CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles=l,v["CFBundleIcons~ipad"]||(v["CFBundleIcons~ipad"]={CFBundlePrimaryIcon:{}}),v["CFBundleIcons~ipad"].CFBundlePrimaryIcon.CFBundleIconName=p,v["CFBundleIcons~ipad"].CFBundlePrimaryIcon.CFBundleIconFiles=d,v.NSAppTransportSecurity={NSAllowsArbitraryLoads:!0},plist.writeFileSync(I,v)}async updateSplashScreen(e,i,t,n,s,a){s.progress("update splashscreen image...");const{splashscreen:o={}}=t,{cpa_package_info:r={enable_remove_watermark:!1}}=a;if(r.enable_remove_watermark||o.customImage){const t=path_1.default.join(i,"/Base.lproj/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib");let n=fs_extra_1.default.readFileSync(t).toString("hex");if(r.enable_remove_watermark&&(-1!==n.indexOf("506f776572656420627920446f6e7574")?(n=n.replace("506f776572656420627920446f6e7574",""),console.log("replace storyboard watermark success")):console.log("replace storyboard watermark fail")),o.customImage){if(!o.customImage.endsWith(".png"))return void s.progress("LaunchScreen require png image, but get "+o.customImage);let t=o.customImage;path_1.default.isAbsolute(t)||(t=path_1.default.join(e,o.customImage));const a=path_1.default.join(i,"Info.plist"),r=plist.readFileSync(a),c=r.UISplashScreenImageName+".png";glob_1.default.sync("LaunchScreen-*.+(png|jpg|jpeg|webp)",{nodir:!0,cwd:i}).forEach(e=>{const t=path_1.default.join(i,e);fs_extra_1.default.removeSync(t)});const p="LaunchScreen-"+uuidv4().slice(0,12),l=p+".png",d=path_1.default.join(i,l);fs_extra_1.default.copyFileSync(t,d),r.UISplashScreenImageName=p,plist.writeFileSync(a,r);const u=Buffer.from(c,"utf-8").toString("hex"),f=Buffer.from(l,"utf-8").toString("hex");-1!==n.indexOf(u)?(n=n.replace(u,f),console.log("replace storyboard customImage success")):console.log("replace storyboard customImage fail")}fs_extra_1.default.writeFileSync(t,Buffer.from(n,"hex"))}return!1}genUseExtendedSdk(e){const i=Object.assign({},e.useExtendedSdk||{});for(const t in e)if("object"==typeof e[t])for(const n in e[t])if(n.startsWith("useExtendedLib_WeApp")&&!0===e[t][n]){i[n.slice("useExtendedLib_".length)]=!0}return!i.WeAppLBS||i.WeAppOpenFuns||i.WeAppOpenFuns_HasPay||(i.WeAppOpenFuns=!0),i}async updateExtendedSdk(e,i,t,n,s){const a=path_1.default.join(e,"Frameworks");fs_extra_1.default.ensureDirSync(a),s.progress("update extendsdk...");const o=path_1.default.join(i,"WeAppSDK.podspec"),r=fs_extra_1.default.readFileSync(o,"utf-8"),c=this.genUseExtendedSdk(n);if(s.progress("useExtendedSdks: "+JSON.stringify(c)),c.WeAppOpenFuns&&c.WeAppOpenFuns_HasPay)throw new Error("OpenFuncs SDK 只可勾选使用一个，请按需勾选使用");const p={};for(const e in c){if(!c[e])continue;const n=getDepReg(e),s=r.match(n);if(!(null==s?void 0:s[1]))throw new Error("can not match extendsdk in podspec file: "+e);const o=[];if(s[1].split("\n").forEach(e=>{const n=e.match(/.*'(.*?)',/);if(null==n?void 0:n[1]){const e=n[1].split("/").pop(),s=path_1.default.join(i,"Libs",t,e);if(!fs_extra_1.default.existsSync(s))throw new Error("can not found extendsdk: "+e);const r=path_1.default.join(a,e);fs_extra_1.default.copySync(s,r),o.push(path_1.default.basename(e))}}),o.length){p[o.shift()]=o}}const l=path_1.default.join(e,"DyFrameworks.plist");fs_extra_1.default.existsSync(l)&&fs_extra_1.default.removeSync(l),plist.writeFileSync(l,p)}async updatePlugin(e,i,t){if(!i.length)return;const n=path_1.default.join(e,"Frameworks");fs_extra_1.default.ensureDirSync(n),t.progress("update plugin..."),i.forEach(i=>{const{pluginId:s}=i,a=i.dir,o=path_1.default.join(n,s+".framework");if(-1!==a.indexOf("local-miniapp-plugin")){const e=fs_extra_1.default.statSync(path_1.default.join(a,s)),{mtime:i}=e;t.progress(`${s}.framework 正在使用本地版本，修改时间为 ${i}`)}fs_extra_1.default.existsSync(o)&&fs_extra_1.default.removeSync(o),fs_extra_1.default.copySync(a,o);const r=path_1.default.join(a,"MiniPlugin.bundle"),c=path_1.default.join(r,"PluginConfig.plist"),p=plist.readFileSync(c).CopyResourcesToMainBundle;(null==p?void 0:p.length)&&p.forEach(i=>{const t=path_1.default.join(r,i);fs_extra_1.default.existsSync(t)&&fs_extra_1.default.copySync(t,path_1.default.join(e,i))})})}async getEntitlements(e,i,t,n){const{mobileapp_info:s={}}=e;let a=s.ios_universal_link||s.debug_ios_universal_link;return(a.startsWith("https://")||a.startsWith("http://"))&&(a=a.replace(/^http(s)?:\/\//g,"applinks:")),{"com.apple.developer.associated-domains":a}}async buildPlugin(e,i){const{pluginId:t,projectPath:n,buildShellPath:s}=e;i.progress("start build native plugin...");try{const e=[n,t];fs_extra_1.default.chmodSync(s,"777"),buildIOSPluginTask[t]?(i.message("fail","存在未结束的插件构建任务，需等待构建结束..."),await buildIOSPluginTask[t].getResult(!0)):(buildIOSPluginTask[t]=new singletontask_1.SingletonTask(cp_1.spawnSyncExecShell.bind(null,s,e,{},i)),await buildIOSPluginTask[t].getResult(!0),buildIOSPluginTask[t]=void 0)}catch(e){throw buildIOSPluginTask[t]=void 0,new Error("build plugin failed: "+e)}}}exports.IOSUtils=IOSUtils;
}(require("licia/lazyImport")(require), require)