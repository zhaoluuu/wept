!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.tryLaunchAppOnDevice=exports.tryInstantInstall=exports.tryBuild=exports.tryInstantBuild=exports.getCPU=exports.getAvailableCPUs=exports.getDevices=exports.tryLaunchEmulator=exports.getEmulators=void 0;const tslib_1=require("tslib"),os=tslib_1.__importStar(require("os")),child_process_1=require("child_process"),env_1=require("../../../utils/env"),adb_1=require("./adb"),cp_1=require("../../../utils/cp");function getElumatorCommand(){const t=(0,env_1.getProcessEnv)();return t.ANDROID_HOME?t.ANDROID_HOME+"/emulator/emulator":"emulator"}const getEmulators=()=>{try{const t=getElumatorCommand();return(0,child_process_1.execSync)(t+" -list-avds",{env:(0,env_1.getProcessEnv)()}).toString().split(os.EOL).filter(t=>""!==t).map(t=>({name:t,type:"simulator",attach:!1}))}catch(t){return[]}};exports.getEmulators=getEmulators;const realLaunchEmulator=(t,e)=>new Promise(async(r,s)=>{var n,a;const o=getElumatorCommand();console.log(`Running command:${o} @${t}`),e.progress(`launch emulator ${t}...`);const c=await getDevices(),i=(0,child_process_1.spawn)(o,["@"+t],{detached:!0,stdio:["pipe","pipe","pipe","ipc"],env:(0,env_1.getProcessEnv)()});i.unref();let l="";null===(n=i.stdout)||void 0===n||n.on("data",t=>{e.progress(t.toString())}),null===(a=i.stderr)||void 0===a||a.on("data",t=>{const r=t.toString();l+=r,e.progress(r)});const u=setTimeout(()=>{d(),s(new Error("Could not start emulator within 30 seconds."))},3e4),p=setInterval(async()=>{const t=(await getDevices()).find(t=>c.every(e=>e.name!==t.name));t&&(d(),r(t))},1e3),d=()=>{clearTimeout(u),clearInterval(p)};i.on("exit",async()=>{if(d(),null==l?void 0:l.includes("Running multiple emulators with the same AVD")){const t=(await getDevices()).find(t=>"simulator"===t.type&&t.attach);r(t)}else s(new Error("Emulator exited before boot:"+l))}),i.on("error",t=>{d(),s(t.message)})}),tryLaunchEmulator=async(t,e)=>{if(!t){t=(0,exports.getEmulators)()[0].name}if(t)try{return{success:!0,device:await realLaunchEmulator(t,e)}}catch(t){return{success:!1,error:t.message}}return{success:!1,error:"No emulators found, please check `emulator -list-avds`"}};function parseDevicesResult(t){var e;if(!t)return[];const r=[],s=t.trim().split(/\r?\n/);for(const t of s){const s=t.split(/[ ,\t]+/).filter(t=>""!==t);"device"===s[1]&&((null===(e=s[0])||void 0===e?void 0:e.startsWith("emulator-"))?r.push({name:s[0],type:"simulator",attach:!0}):r.push({name:s[0],type:"device",attach:!0}))}return r}function getDevices(){return new Promise(t=>{const e=(0,adb_1.getAdbPath)();(0,child_process_1.exec)(`"${e}" devices -l`,{env:(0,env_1.getProcessEnv)()},(e,r)=>{const s=parseDevicesResult(r);e&&t([...(0,exports.getEmulators)()]),t([...(0,exports.getEmulators)(),...s])})})}function getAvailableCPUs(t){try{const e=(0,adb_1.getAdbPath)(),r=["-s",t,"shell","getprop"];let s=(0,child_process_1.execFileSync)(e,r.concat(["ro.product.cpu.abilist"]),{env:(0,env_1.getProcessEnv)()}).toString();return s&&0!==s.trim().length||(s=(0,child_process_1.execFileSync)(e,r.concat(["ro.product.cpu.abi"]),{env:(0,env_1.getProcessEnv)()}).toString()),(s||"").trim().split(",")}catch(t){return[]}}function getCPU(t){try{const e=(0,adb_1.getAdbPath)(),r=(0,child_process_1.execFileSync)(e,["-s",t,"shell","getprop","ro.product.cpu.abi"],{env:(0,env_1.getProcessEnv)()}).toString().trim();return r.length>0?r:null}catch(t){return null}}async function tryInstantBuild(t,e,r){const s=process.platform.startsWith("win")?"gradlew.bat":"./gradlew",n=["assemble"+e];await(0,cp_1.spawnSync)(s,n,{cwd:t.sourceDir},r)}async function tryBuild(t,e,r){const s=process.platform.startsWith("win")?"gradlew.bat":"./gradlew";await(0,cp_1.spawnSync)(s,e,{cwd:t},r)}async function tryInstantInstall(t,e,r){try{const s=process.platform.startsWith("win")?"gradlew.bat":"./gradlew",n=["install"+e];await(0,cp_1.spawnSync)(s,n,{cwd:t.sourceDir},r)}catch(t){throw createInstallError(t)}}async function tryLaunchAppOnDevice(t,e,r,s){const{mainActivity:n=""}=r;try{const r=["shell","am","start","-n",`${e}/${n}`];t?(r.unshift("-s",t),s.progress(`Starting the app on "${t}"...`)):s.progress("Starting the app...");const a=(0,adb_1.getAdbPath)();await(0,cp_1.spawnSync)(a,r,{stdio:"inherit"},s)}catch(t){throw new Error("Failed to start the app."+t.message)}}function createInstallError(t){const e=(t.stderr||"").toString();let r="Make sure you have the Android development environment set up";throw e.includes("No connected devices")?r="Make sure you have an Android emulator running or a device connected":(e.includes("licences have not been accepted")||e.includes("accept the SDK license"))&&(r="Please accept all necessary Android SDK licenses using Android SDK Manager: \n      '$ANDROID_HOME/tools/bin/sdkmanager --licenses',\n    "),new Error(`Failed to install the app. ${r}: ${e}.`)}exports.tryLaunchEmulator=tryLaunchEmulator,exports.getDevices=getDevices,exports.getAvailableCPUs=getAvailableCPUs,exports.getCPU=getCPU,exports.tryInstantBuild=tryInstantBuild,exports.tryBuild=tryBuild,exports.tryInstantInstall=tryInstantInstall,exports.tryLaunchAppOnDevice=tryLaunchAppOnDevice;
}(require("licia/lazyImport")(require), require)