!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeCompiler=void 0;const define_1=require("../../config/define"),miniappJson_1=require("../../utils/miniappJson"),android_1=require("./android"),ios_1=require("./ios");class NativeCompiler{constructor(t){this.projectPath=t.projectInfo.projectPath,this.miniappDirPath=t.miniappDirPath,this.devtoolsVersion=t.devtoolsVersion}getHandler(t){let i=null;const e=(0,miniappJson_1.getMiniappJson)(this.projectPath,t);return t===define_1.PLATFORM["mini-android"]?i=new android_1.AndroidUtils(e.projectPath,e.project,this.miniappDirPath,this.devtoolsVersion):t===define_1.PLATFORM["mini-ios"]&&(i=new ios_1.IOSUtils(e.projectPath,e.project,this.miniappDirPath,this.devtoolsVersion)),i}validNativePlatform(t){return t===define_1.PLATFORM["mini-android"]||t===define_1.PLATFORM["mini-ios"]}async getAndroidDevices(){const t=this.getHandler(define_1.PLATFORM["mini-android"]);return await t.getDevices()}async getIOSDevices(){const t=this.getHandler(define_1.PLATFORM["mini-ios"]);return await t.getDevices()}async run(t,i){const{targetPlatform:e,opts:n}=t;if(!this.validNativePlatform(e))return;const r=(0,miniappJson_1.getMiniappJson)(this.projectPath,e),a=this.getHandler(e);let s={};const{buildType:o="LOCAL"}=n;return"LOCAL"===o?(s=r.runArgs||{},await a.runLocal(Object.assign(Object.assign({projectPath:this.projectPath},s),n),i)):await a.runCloud(Object.assign({projectPath:this.projectPath},n),i)}async build(t,i){const{targetPlatform:e,opts:n={}}=t;if(!this.validNativePlatform(e))return;const r=this.getHandler(e),a=(0,miniappJson_1.getMiniappJson)(this.projectPath,e);let s={};const{buildType:o="LOCAL"}=n;return"LOCAL"===o?(s=a.buildArgs||{},await r.buildLocal(Object.assign(Object.assign({projectPath:this.projectPath},s),n),i)):await r.buildCloud(Object.assign({projectPath:this.projectPath},n),i)}async buildPlugin(t,i){const{targetPlatform:e,opts:n={}}=t;if(!this.validNativePlatform(e))return;const r=this.getHandler(e);return await r.buildPlugin(Object.assign({projectPath:this.projectPath},n),i)}}exports.NativeCompiler=NativeCompiler;
}(require("licia/lazyImport")(require), require)