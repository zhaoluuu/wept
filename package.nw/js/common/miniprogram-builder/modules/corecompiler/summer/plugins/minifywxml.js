"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("tslib"),config_1=require("../../../../config/config"),log=tslib_1.__importStar(require("../../../../utils/log")),customError_1=require("../../../../utils/customError"),taskmanager_1=tslib_1.__importDefault(require("../../../../utils/taskmanager")),minifyWXMLMod=require("../../original/workerThread/task/minifywxml"),{generateWXMLFromTokens:generateWXMLFromTokens,Tokenizer:Tokenizer}=minifyWXMLMod;function default_1(e,r){const{minify:o=!0}=r||{};return{name:"summer-minifywxml",workerMethods:{async doCompress(e,r){try{const o=new Tokenizer(e.replace(/\r\n/g,"\n"),r),t=[],n=o.generateTokens(t);if(0!==n)throw new Error("minifywxml tokenizer error ret: "+n);return generateWXMLFromTokens(t)}catch(e){throw log.error(e),(0,customError_1.makeCustomError)(e.msg,config_1.MINIFY_WXML_ERR,r)}}},async compress(e){const r={};if(o){const o=Object.keys(e).filter(e=>e.endsWith(".wxml")),t=Date.now(),n=async o=>{const t=e[o];if(t&&t.length>0){const t=await this.runWorkerMethod("doCompress",e[o],o);r[o]=t}},s=new taskmanager_1.default({poolLimit:10,breakWhenError:!0});for(const e of o)s.addTask(n,e);await s.runAllAsync(),console.log(`minify wxml, count: ${o.length}, cost: ${Date.now()-t}ms`)}return Object.assign(Object.assign({},e),r)}}}exports.default=default_1;