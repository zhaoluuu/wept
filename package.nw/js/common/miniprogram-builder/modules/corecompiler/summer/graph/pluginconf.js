!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PluginConf=void 0;const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),index_1=require("../../../../index"),locales_1=tslib_1.__importDefault(require("../../../../utils/locales/locales")),appconf_1=require("./appconf");class PluginConf{constructor(t,o){this.graph=o,this.pages=new Map,this.comps=new Map,this.proxyProject=t.proxyProject,this.proxyProject.addResolver(o.resolver)}destroy(){this.proxyProject.removeResolver(this.graph.resolver)}async build(t){this.resetState(),await this.loadPlugin(t)}async resetState(){this.plugin=void 0,this.pages.clear(),this.comps.clear()}async loadPlugin(t){const o=await t.run(locales_1.default.config.SUMMER_COMPILE.format("plugin.json"),()=>(0,index_1.getPluginJSON)(this.proxyProject));this.plugin=o;const s=new Set;for(const t of Object.values(o.pages||{}))s.add(t);await t.run(locales_1.default.config.SUMMER_COMPILE_PLUGIN_PAGE_JSON.format(s.size),async()=>{for(const[t]of s.entries())(0,appconf_1.isPluginPath)(t)||await this.loadPage(t);for(const t of Object.values(o.publicComponents||{}))(0,appconf_1.isPluginPath)(t)||await this.loadComp(t,t,"plugin.json");for(const t of Object.values(o.usingComponents||{}))(0,appconf_1.isPluginPath)(t)||await this.loadComp(t,t,"plugin.json")})}async loadPage(t){const o=await(0,index_1.getPluginPageJSON)({project:this.proxyProject,root:this.graph.root,filePath:path_1.default.posix.join(this.graph.root,t+".json")});this.pages.set(t,o);const s=async o=>{if((0,appconf_1.isPluginPath)(o))return;const s=(0,appconf_1.resolvePath)(t,o);await this.loadComp(s,o,t)};for(const t of Object.values(o.usingComponents||{}))await s(t)}async loadComp(t,o,s){if(this.comps.has(t))return;if(!this.proxyProject.stat(this.graph.root,t+".json"))throw new Error(`[summer-compiler] Couldn't found the '${o}.json' file relative to '${s}'`);const e=await(0,index_1.getPluginPageJSON)({project:this.proxyProject,root:this.graph.root,filePath:path_1.default.posix.join(this.graph.root,t+".json")});this.comps.set(t,e);const a=async o=>{if((0,appconf_1.isPluginPath)(o))return;const s=(0,appconf_1.resolvePath)(t,o);await this.loadComp(s,o,t)};for(const t of Object.values(e.usingComponents||{}))await a(t)}}exports.PluginConf=PluginConf;
}(require("licia/lazyImport")(require), require)