import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class TargetDetachedDialog extends SDK.SDKModel.SDKModel{constructor(e){super(e),e.registerInspectorDispatcher(this),e.inspectorAgent().enable(),this._hideCrashedDialog=null,TargetDetachedDialog._disconnectedScreenWithReasonWasShown=!1}detached(e){TargetDetachedDialog._disconnectedScreenWithReasonWasShown=!0,UI.RemoteDebuggingTerminatedScreen.RemoteDebuggingTerminatedScreen.show(e)}static webSocketConnectionLost(){UI.RemoteDebuggingTerminatedScreen.RemoteDebuggingTerminatedScreen.show(ls`WebSocket disconnected`)}targetCrashed(){if(this.target().parentTarget())return;const e=new UI.Dialog.Dialog;e.setSizeBehavior(UI.GlassPane.SizeBehavior.MeasureContent),e.addCloseButton(),e.setDimmed(!0),this._hideCrashedDialog=e.hide.bind(e),new UI.TargetCrashedScreen.TargetCrashedScreen(()=>{this._hideCrashedDialog=null}).show(e.contentElement),e.show()}targetReloadedAfterCrash(){this.target().runtimeAgent().runIfWaitingForDebugger(),this._hideCrashedDialog&&(this._hideCrashedDialog.call(null),this._hideCrashedDialog=null)}}SDK.SDKModel.SDKModel.register(TargetDetachedDialog,SDK.SDKModel.Capability.Inspector,!0);