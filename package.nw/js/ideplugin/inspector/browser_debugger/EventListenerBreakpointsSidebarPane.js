import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class EventListenerBreakpointsSidebarPane extends UI.Widget.VBox{constructor(){super(!0),this._categoriesTreeOutline=new UI.TreeOutline.TreeOutlineInShadow,this._categoriesTreeOutline.registerRequiredCSS("browser_debugger/eventListenerBreakpoints.css"),this._categoriesTreeOutline.setShowSelectionOnKeyboardFocus(!0),this.contentElement.appendChild(this._categoriesTreeOutline.element),this._categories=new Map;const e=self.SDK.domDebuggerManager.eventListenerBreakpoints().map(e=>e.category());e.sort();for(const t of e)this._categories.has(t)||this._createCategory(t);if(e.length>0){this._categories.get(e[0]).element.select()}this._breakpoints=new Map;for(const e of self.SDK.domDebuggerManager.eventListenerBreakpoints())this._createBreakpoint(e);SDK.SDKModel.TargetManager.instance().addModelListener(SDK.DebuggerModel.DebuggerModel,SDK.DebuggerModel.Events.DebuggerPaused,this._update,this),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.DebuggerModel.DebuggerModel,SDK.DebuggerModel.Events.DebuggerResumed,this._update,this),UI.Context.Context.instance().addFlavorChangeListener(SDK.SDKModel.Target,this._update,this)}focus(){this._categoriesTreeOutline.forceSelect()}_createCategory(e){const t=UI.UIUtils.CheckboxLabel.create(e);t.checkboxElement.addEventListener("click",this._categoryCheckboxClicked.bind(this,e),!0),t.checkboxElement.tabIndex=-1;const s=new UI.TreeOutline.TreeElement(t);s.listItemElement.addEventListener("keydown",t=>{" "===t.key&&(this._categories.get(e).checkbox.click(),t.consume(!0))}),t.checkboxElement.addEventListener("focus",()=>s.listItemElement.focus()),UI.ARIAUtils.setChecked(s.listItemElement,!1),this._categoriesTreeOutline.appendChild(s),this._categories.set(e,{element:s,checkbox:t.checkboxElement})}_createBreakpoint(e){const t=UI.UIUtils.CheckboxLabel.create(e.title());t.classList.add("source-code"),t.checkboxElement.addEventListener("click",this._breakpointCheckboxClicked.bind(this,e),!0),t.checkboxElement.tabIndex=-1;const s=new UI.TreeOutline.TreeElement(t);s.listItemElement.addEventListener("keydown",t=>{" "===t.key&&(this._breakpoints.get(e).checkbox.click(),t.consume(!0))}),t.checkboxElement.addEventListener("focus",()=>s.listItemElement.focus()),UI.ARIAUtils.setChecked(s.listItemElement,!1),s.listItemElement.createChild("div","breakpoint-hit-marker"),this._categories.get(e.category()).element.appendChild(s),this._breakpoints.set(e,{element:s,checkbox:t.checkboxElement})}_update(){const e=UI.Context.Context.instance().flavor(SDK.SDKModel.Target),t=e?e.model(SDK.DebuggerModel.DebuggerModel):null,s=t?t.debuggerPausedDetails():null;if(!s||s.reason!==SDK.DebuggerModel.BreakReason.EventListener||!s.auxData)return void(this._highlightedElement&&(UI.ARIAUtils.setDescription(this._highlightedElement,""),this._highlightedElement.classList.remove("breakpoint-hit"),delete this._highlightedElement));const i=self.SDK.domDebuggerManager.resolveEventListenerBreakpoint(s.auxData);i&&(UI.ViewManager.ViewManager.instance().showView("sources.eventListenerBreakpoints"),this._categories.get(i.category()).element.expand(),this._highlightedElement=this._breakpoints.get(i).element.listItemElement,UI.ARIAUtils.setDescription(this._highlightedElement,ls`breakpoint hit`),this._highlightedElement.classList.add("breakpoint-hit"))}_categoryCheckboxClicked(e){const t=this._categories.get(e),s=t.checkbox.checked;UI.ARIAUtils.setChecked(t.element.listItemElement,s);for(const t of this._breakpoints.keys())t.category()===e&&(t.setEnabled(s),this._breakpoints.get(t).checkbox.checked=s)}_breakpointCheckboxClicked(e){const t=this._breakpoints.get(e);e.setEnabled(t.checkbox.checked),UI.ARIAUtils.setChecked(t.element.listItemElement,t.checkbox.checked);let s=!1,i=!1;for(const t of this._breakpoints.keys())t.category()===e.category()&&(t.enabled()?s=!0:i=!0);const n=this._categories.get(e.category());n.checkbox.checked=s,n.checkbox.indeterminate=s&&i,n.checkbox.indeterminate?UI.ARIAUtils.setCheckboxAsIndeterminate(n.element.listItemElement):UI.ARIAUtils.setChecked(n.element.listItemElement,s)}}export let Item;