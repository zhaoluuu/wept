import*as Common from"../common/common.js";import*as EventListeners from"../event_listeners/event_listeners.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class ObjectEventListenersSidebarPane extends UI.Widget.VBox{constructor(){super(),this._refreshButton=new UI.Toolbar.ToolbarButton(ls`Refresh global listeners`,"largeicon-refresh"),this._refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._refreshClick,this),this._refreshButton.setEnabled(!1),this._eventListenersView=new EventListeners.EventListenersView.EventListenersView(this.update.bind(this),!0),this._eventListenersView.show(this.element),this.setDefaultFocusedChild(this._eventListenersView)}toolbarItems(){return[this._refreshButton]}update(){this._lastRequestedContext&&(this._lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName),delete this._lastRequestedContext);const e=UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);if(!e)return this._eventListenersView.reset(),void this._eventListenersView.addEmptyHolderIfNeeded();this._lastRequestedContext=e,Promise.all([this._windowObjectInContext(e)]).then(this._eventListenersView.addObjects.bind(this._eventListenersView))}wasShown(){super.wasShown(),UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext,this.update,this),this._refreshButton.setEnabled(!0),this.update()}willHide(){super.willHide(),UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext,this.update,this),this._refreshButton.setEnabled(!1)}_windowObjectInContext(e){return e.evaluate({expression:"self",objectGroup:objectGroupName,includeCommandLineAPI:!1,silent:!0,returnByValue:!1,generatePreview:!1},!1,!1).then(e=>e.object&&!e.exceptionDetails?e.object:null)}_refreshClick(e){e.data.consume(),this.update()}}export const objectGroupName="object-event-listeners-sidebar-pane";