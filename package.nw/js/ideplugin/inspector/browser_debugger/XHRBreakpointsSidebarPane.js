import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class XHRBreakpointsSidebarPane extends UI.Widget.VBox{constructor(){super(!0),this.registerRequiredCSS("browser_debugger/xhrBreakpointsSidebarPane.css"),this._breakpoints=new UI.ListModel.ListModel,this._list=new UI.ListControl.ListControl(this._breakpoints,this,UI.ListControl.ListMode.NonViewport),this.contentElement.appendChild(this._list.element),this._list.element.classList.add("breakpoint-list","hidden"),UI.ARIAUtils.markAsList(this._list.element),UI.ARIAUtils.setAccessibleName(this._list.element,ls`XHR/fetch Breakpoints`),this._emptyElement=this.contentElement.createChild("div","gray-info-message"),this._emptyElement.textContent=Common.UIString.UIString("No breakpoints"),this._breakpointElements=new Map,this._addButton=new UI.Toolbar.ToolbarButton(ls`Add XHR/fetch breakpoint`,"largeicon-add"),this._addButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,e=>{this._addButtonClicked()}),this._emptyElement.addEventListener("contextmenu",this._emptyElementContextMenu.bind(this),!0),this._emptyElement.tabIndex=-1,this._restoreBreakpoints(),this._update()}toolbarItems(){return[this._addButton]}_emptyElementContextMenu(e){const t=new UI.ContextMenu.ContextMenu(e);t.defaultSection().appendItem(Common.UIString.UIString("Add breakpoint"),this._addButtonClicked.bind(this)),t.show()}async _addButtonClicked(){await UI.ViewManager.ViewManager.instance().showView("sources.xhrBreakpoints");const e=document.createElement("p");e.classList.add("breakpoint-condition"),e.textContent=Common.UIString.UIString("Break when URL contains:");const t=e.createChild("span","breakpoint-condition-input");function i(t,i,s){this._removeListElement(e),t&&(self.SDK.domDebuggerManager.addXHRBreakpoint(s,!0),this._setBreakpoint(s)),this._update()}this._addListElement(e,this._list.element.firstChild);const s=new UI.InplaceEditor.Config(i.bind(this,!0),i.bind(this,!1));UI.InplaceEditor.InplaceEditor.startEditing(t,s)}heightForItem(e){return 0}isItemSelectable(e){return!0}_setBreakpoint(e){-1!==this._breakpoints.indexOf(e)?this._list.refreshItem(e):this._breakpoints.insertWithComparator(e,(e,t)=>e>t?1:e<t?-1:0),this._list.selectedItem()&&this.hasFocus()||this._list.selectItem(this._breakpoints.at(0))}createElementForItem(e){const t=createElement("div");UI.ARIAUtils.markAsListitem(t);const i=t.createChild("div","breakpoint-entry");t.checkboxElement=i;const s=self.SDK.domDebuggerManager.xhrBreakpoints().get(e);UI.ARIAUtils.markAsCheckbox(i),UI.ARIAUtils.setChecked(i,s),i._url=e,i.addEventListener("contextmenu",this._contextMenu.bind(this,e),!0);const n=e?Common.UIString.UIString('URL contains "%s"',e):Common.UIString.UIString("Any XHR or fetch"),o=UI.UIUtils.CheckboxLabel.create(n,s);return UI.ARIAUtils.markAsHidden(o),UI.ARIAUtils.setAccessibleName(i,n),i.appendChild(o),o.checkboxElement.addEventListener("click",this._checkboxClicked.bind(this,e,s),!1),i.addEventListener("click",t=>{t.target===i&&this._checkboxClicked(e,s)},!1),i._checkboxElement=o.checkboxElement,o.checkboxElement.tabIndex=-1,i.tabIndex=-1,e===this._list.selectedItem()&&(i.tabIndex=0,this.setDefaultFocusedElement(i)),i.addEventListener("keydown",t=>{let i=!1;" "===t.key?(this._checkboxClicked(e,s),i=!0):isEnterKey(t)&&(this._labelClicked(e),i=!0),i&&t.consume(!0)}),e===this._hitBreakpoint&&(i.classList.add("breakpoint-hit"),UI.ARIAUtils.setDescription(i,ls`breakpoint hit`)),o.classList.add("cursor-auto"),o.textElement.addEventListener("dblclick",this._labelClicked.bind(this,e),!1),this._breakpointElements.set(e,t),t}selectedItemChanged(e,t,i,s){i&&(i.checkboxElement.tabIndex=-1),s&&(this.setDefaultFocusedElement(s.checkboxElement),s.checkboxElement.tabIndex=0,this.hasFocus()&&s.checkboxElement.focus())}updateSelectedItemARIA(e,t){return!0}_removeBreakpoint(e){const t=this._breakpoints.indexOf(e);t>=0&&this._breakpoints.remove(t),this._breakpointElements.delete(e),this._update()}_addListElement(e,t){this._list.element.insertBefore(e,t),this._emptyElement.classList.add("hidden"),this._list.element.classList.remove("hidden")}_removeListElement(e){this._list.element.removeChild(e),this._list.element.firstElementChild||(this._emptyElement.classList.remove("hidden"),this._list.element.classList.add("hidden"))}_contextMenu(e,t){const i=new UI.ContextMenu.ContextMenu(t);const s=Common.UIString.UIString("Remove all breakpoints");i.defaultSection().appendItem(Common.UIString.UIString("Add breakpoint"),this._addButtonClicked.bind(this)),i.defaultSection().appendItem(Common.UIString.UIString("Remove breakpoint"),function(){self.SDK.domDebuggerManager.removeXHRBreakpoint(e),this._removeBreakpoint(e)}.bind(this)),i.defaultSection().appendItem(s,function(){for(const e of this._breakpointElements.keys())self.SDK.domDebuggerManager.removeXHRBreakpoint(e),this._removeBreakpoint(e);this._update()}.bind(this)),i.show()}_checkboxClicked(e,t){const i=this.hasFocus();self.SDK.domDebuggerManager.toggleXHRBreakpoint(e,!t),this._list.refreshItem(e),this._list.selectItem(e),i&&this.focus()}_labelClicked(e){const t=this._breakpointElements.get(e)||null,i=document.createElement("span");function s(s,n,o){if(this._removeListElement(i),s){self.SDK.domDebuggerManager.removeXHRBreakpoint(e),this._removeBreakpoint(e);const i=!t||t.checkboxElement._checkboxElement.checked;self.SDK.domDebuggerManager.addXHRBreakpoint(o,i),this._setBreakpoint(o),this._list.selectItem(o)}else t.classList.remove("hidden");this.focus()}i.classList.add("breakpoint-condition"),i.textContent=e,this._list.element.insertBefore(i,t),t.classList.add("hidden"),UI.InplaceEditor.InplaceEditor.startEditing(i,new UI.InplaceEditor.Config(s.bind(this,!0),s.bind(this,!1)))}flavorChanged(e){this._update()}_update(){const e=0===this._breakpoints.length;this._list.element.classList.toggle("hidden",e),this._emptyElement.classList.toggle("hidden",!e);const t=UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);if(!t||t.reason!==SDK.DebuggerModel.BreakReason.XHR){if(this._hitBreakpoint){const e=this._hitBreakpoint;delete this._hitBreakpoint,this._breakpoints.indexOf(e)>=0&&this._list.refreshItem(e)}return}const i=t.auxData.breakpointURL;this._hitBreakpoint=i,this._breakpoints.indexOf(i)<0||(this._list.refreshItem(i),UI.ViewManager.ViewManager.instance().showView("sources.xhrBreakpoints"))}_restoreBreakpoints(){const e=self.SDK.domDebuggerManager.xhrBreakpoints();for(const t of e.keys())this._setBreakpoint(t)}}