import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{LayerView,LayerViewHost,ScrollRectSelection,Selection,SnapshotSelection,Type}from"./LayerViewHost.js";export class LayerDetailsView extends UI.Widget.Widget{constructor(e){super(!0),this.registerRequiredCSS("layer_viewer/layerDetailsView.css"),this._layerViewHost=e,this._layerViewHost.registerView(this),this._emptyWidget=new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString("Select a layer to see its details")),this._layerSnapshotMap=this._layerViewHost.getLayerSnapshotMap(),this._buildContent()}hoverObject(e){}selectObject(e){this._selection=e,this.isShowing()&&this.update()}setLayerTree(e){}wasShown(){super.wasShown(),this.update()}_onScrollRectClicked(e,t){1===t.which&&this._layerViewHost.selectObject(new ScrollRectSelection(this._selection.layer(),e))}_invokeProfilerLink(){const e=this._selection.type()===Type.Snapshot?this._selection:this._layerSnapshotMap.get(this._selection.layer());e&&this.dispatchEventToListeners(Events.PaintProfilerRequested,e)}_createScrollRectElement(e,t){t&&this._scrollRectsCell.createTextChild(", ");const o=this._scrollRectsCell.createChild("span","scroll-rect");this._selection.scrollRectIndex===t&&o.classList.add("active"),o.textContent=Common.UIString.UIString("%s %d × %d (at %d, %d)",slowScrollRectNames.get(e.type),e.rect.width,e.rect.height,e.rect.x,e.rect.y),o.addEventListener("click",this._onScrollRectClicked.bind(this,t),!1)}_formatStickyAncestorLayer(e,t){if(!t)return"";const o=t.nodeForSelfOrAncestor(),i=o?o.simpleSelector():Common.UIString.UIString("<unnamed>");return Common.UIString.UIString("%s: %s (%s)",e,i,t.id())}_createStickyAncestorChild(e,t){if(!t)return;this._stickyPositionConstraintCell.createTextChild(", ");this._stickyPositionConstraintCell.createChild("span").textContent=this._formatStickyAncestorLayer(e,t)}_populateStickyPositionConstraintCell(e){if(this._stickyPositionConstraintCell.removeChildren(),!e)return;const t=e.stickyBoxRect();this._stickyPositionConstraintCell.createChild("span").textContent=Common.UIString.UIString("Sticky Box %d × %d (at %d, %d)",t.width,t.height,t.x,t.y),this._stickyPositionConstraintCell.createTextChild(", ");const o=e.containingBlockRect();this._stickyPositionConstraintCell.createChild("span").textContent=Common.UIString.UIString("Containing Block %d × %d (at %d, %d)",o.width,o.height,o.x,o.y),this._createStickyAncestorChild(Common.UIString.UIString("Nearest Layer Shifting Sticky Box"),e.nearestLayerShiftingStickyBox()),this._createStickyAncestorChild(Common.UIString.UIString("Nearest Layer Shifting Containing Block"),e.nearestLayerShiftingContainingBlock())}update(){const e=this._selection&&this._selection.layer();if(!e)return this._tableElement.remove(),this._paintProfilerLink.remove(),void this._emptyWidget.show(this.contentElement);this._emptyWidget.detach(),this.contentElement.appendChild(this._tableElement),this.contentElement.appendChild(this._paintProfilerLink),this._sizeCell.textContent=Common.UIString.UIString("%d × %d (at %d,%d)",e.width(),e.height(),e.offsetX(),e.offsetY()),this._paintCountCell.parentElement.classList.toggle("hidden",!e.paintCount()),this._paintCountCell.textContent=e.paintCount(),this._memoryEstimateCell.textContent=Platform.NumberUtilities.bytesToString(e.gpuMemoryUsage()),e.requestCompositingReasonIds().then(this._updateCompositingReasons.bind(this)),this._scrollRectsCell.removeChildren(),e.scrollRects().forEach(this._createScrollRectElement.bind(this)),this._populateStickyPositionConstraintCell(e.stickyPositionConstraint());const t=this._selection.type()===Type.Snapshot?this._selection.snapshot():null;this._paintProfilerLink.classList.toggle("hidden",!(this._layerSnapshotMap.has(e)||t))}_buildContent(){this._tableElement=this.contentElement.createChild("table"),this._tbodyElement=this._tableElement.createChild("tbody"),this._sizeCell=this._createRow(Common.UIString.UIString("Size")),this._compositingReasonsCell=this._createRow(Common.UIString.UIString("Compositing Reasons")),this._memoryEstimateCell=this._createRow(Common.UIString.UIString("Memory estimate")),this._paintCountCell=this._createRow(Common.UIString.UIString("Paint count")),this._scrollRectsCell=this._createRow(Common.UIString.UIString("Slow scroll regions")),this._stickyPositionConstraintCell=this._createRow(Common.UIString.UIString("Sticky position constraint")),this._paintProfilerLink=this.contentElement.createChild("span","hidden devtools-link link-margin"),UI.ARIAUtils.markAsLink(this._paintProfilerLink),this._paintProfilerLink.textContent=ls`Paint Profiler`,this._paintProfilerLink.tabIndex=0,this._paintProfilerLink.addEventListener("click",e=>{e.consume(!0),this._invokeProfilerLink()}),this._paintProfilerLink.addEventListener("keydown",e=>{isEnterKey(e)&&(e.consume(),this._invokeProfilerLink())})}_createRow(e){const t=this._tbodyElement.createChild("tr");return t.createChild("td").textContent=e,t.createChild("td")}_updateCompositingReasons(e){if(!e||!e.length)return void(this._compositingReasonsCell.textContent="n/a");this._compositingReasonsCell.removeChildren();const t=this._compositingReasonsCell.createChild("ul"),o=LayerDetailsView.getCompositingReasons(e);for(const e of o)t.createChild("li").textContent=e}static getCompositingReasons(e){const t=[];for(const o of e){const e=compositingReasonIdToReason.get(o);e?t.push(e):console.error(`Compositing reason id '${o}' is not recognized.`)}return t}}const compositingReasonIdToReason=new Map([["transform3D",ls`Has a 3d transform.`],["video",ls`Is an accelerated video.`],["canvas",ls`Is an accelerated canvas, or is a display list backed canvas that was promoted to a layer based on a performance heuristic.`],["plugin",ls`Is an accelerated plugin.`],["iFrame",ls`Is an accelerated iFrame.`],["backfaceVisibilityHidden",ls`Has backface-visibility: hidden.`],["activeTransformAnimation",ls`Has an active accelerated transform animation or transition.`],["activeOpacityAnimation",ls`Has an active accelerated opacity animation or transition.`],["activeFilterAnimation",ls`Has an active accelerated filter animation or transition.`],["activeBackdropFilterAnimation",ls`Has an active accelerated backdrop filter animation or transition.`],["immersiveArOverlay",ls`Is DOM overlay for WebXR immersive-ar mode.`],["scrollDependentPosition",ls`Is fixed or sticky position.`],["overflowScrolling",ls`Is a scrollable overflow element.`],["overflowScrollingParent",ls`Scroll parent is not an ancestor.`],["outOfFlowClipping",ls`Has clipping ancestor.`],["videoOverlay",ls`Is overlay controls for video.`],["willChangeTransform",ls`Has a will-change: transform compositing hint.`],["willChangeOpacity",ls`Has a will-change: opacity compositing hint.`],["willChangeOther",ls`Has a will-change compositing hint other than transform and opacity.`],["backdropFilter",ls`Has a backdrop filter.`],["rootScroller",ls`Is the document.rootScroller.`],["assumedOverlap",ls`Might overlap other composited content.`],["overlap",ls`Overlaps other composited content.`],["negativeZIndexChildren",ls`Parent with composited negative z-index content.`],["squashingDisallowed",ls`Layer was separately composited because it could not be squashed.`],["opacityWithCompositedDescendants",ls`Has opacity that needs to be applied by compositor because of composited descendants.`],["maskWithCompositedDescendants",ls`Has a mask that needs to be known by compositor because of composited descendants.`],["reflectionWithCompositedDescendants",ls`Has a reflection that needs to be known by compositor because of composited descendants.`],["filterWithCompositedDescendants",ls`Has a filter effect that needs to be known by compositor because of composited descendants.`],["blendingWithCompositedDescendants",ls`Has a blending effect that needs to be known by compositor because of composited descendants.`],["clipsCompositingDescendants",ls`Has a clip that needs to be known by compositor because of composited descendants.`],["perspectiveWith3DDescendants",ls`Has a perspective transform that needs to be known by compositor because of 3d descendants.`],["preserve3DWith3DDescendants",ls`Has a preserves-3d property that needs to be known by compositor because of 3d descendants.`],["isolateCompositedDescendants",ls`Should isolate descendants to apply a blend effect.`],["positionFixedWithCompositedDescendants",ls`Is a position:fixed element with composited descendants.`],["root",ls`Is the root layer.`],["layerForHorizontalScrollbar",ls`Secondary layer, the horizontal scrollbar layer.`],["layerForVerticalScrollbar",ls`Secondary layer, the vertical scrollbar layer.`],["layerForOverflowControlsHost",ls`Secondary layer, the overflow controls host layer.`],["layerForScrollCorner",ls`Secondary layer, the scroll corner layer.`],["layerForScrollingContents",ls`Secondary layer, to house contents that can be scrolled.`],["layerForScrollingContainer",ls`Secondary layer, used to position the scrolling contents while scrolling.`],["layerForSquashingContents",ls`Secondary layer, home for a group of squashable content.`],["layerForSquashingContainer",ls`Secondary layer, no-op layer to place the squashing layer correctly in the composited layer tree.`],["layerForForeground",ls`Secondary layer, to contain any normal flow and positive z-index contents on top of a negative z-index layer.`],["layerForMask",ls`Secondary layer, to contain the mask contents.`],["layerForDecoration",ls`Layer painted on top of other layers as decoration.`],["layerForOther",ls`Layer for link highlight, frame overlay, etc.`]]);export const Events={PaintProfilerRequested:Symbol("PaintProfilerRequested")};export const slowScrollRectNames=new Map([[SDK.LayerTreeBase.Layer.ScrollRectType.NonFastScrollable,Common.UIString.UIString("Non fast scrollable")],[SDK.LayerTreeBase.Layer.ScrollRectType.TouchEventHandler,Common.UIString.UIString("Touch event handler")],[SDK.LayerTreeBase.Layer.ScrollRectType.WheelEventHandler,Common.UIString.UIString("Wheel event handler")],[SDK.LayerTreeBase.Layer.ScrollRectType.RepaintsOnScroll,Common.UIString.UIString("Repaints on scroll")],[SDK.LayerTreeBase.Layer.ScrollRectType.MainThreadScrollingReason,Common.UIString.UIString("Main thread scrolling reason")]]);