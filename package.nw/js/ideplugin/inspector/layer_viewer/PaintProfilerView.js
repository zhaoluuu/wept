import*as Common from"../common/common.js";import*as PerfUI from"../perf_ui/perf_ui.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class PaintProfilerView extends UI.Widget.HBox{constructor(t){super(!0),this.registerRequiredCSS("layer_viewer/paintProfiler.css"),this.contentElement.classList.add("paint-profiler-overview"),this._canvasContainer=this.contentElement.createChild("div","paint-profiler-canvas-container"),this._progressBanner=this.contentElement.createChild("div","full-widget-dimmed-banner hidden"),this._progressBanner.textContent=Common.UIString.UIString("Profilingâ€¦"),this._pieChart=new PerfUI.PieChart.PieChart({chartName:ls`Profiling Results`,size:55,formatter:this._formatPieChartTime.bind(this)}),this._pieChart.element.classList.add("paint-profiler-pie-chart"),this.contentElement.appendChild(this._pieChart.element),this._showImageCallback=t,this._canvas=this._canvasContainer.createChild("canvas","fill"),this._context=this._canvas.getContext("2d"),this._selectionWindow=new PerfUI.OverviewGrid.Window(this._canvasContainer),this._selectionWindow.addEventListener(PerfUI.OverviewGrid.Events.WindowChanged,this._onWindowChanged,this),this._innerBarWidth=4*window.devicePixelRatio,this._minBarHeight=window.devicePixelRatio,this._barPaddingWidth=2*window.devicePixelRatio,this._outerBarWidth=this._innerBarWidth+this._barPaddingWidth,this._pendingScale=1,this._scale=this._pendingScale,this._reset()}static categories(){return PaintProfilerView._categories||(PaintProfilerView._categories={shapes:new PaintProfilerCategory("shapes",Common.UIString.UIString("Shapes"),"rgb(255, 161, 129)"),bitmap:new PaintProfilerCategory("bitmap",Common.UIString.UIString("Bitmap"),"rgb(136, 196, 255)"),text:new PaintProfilerCategory("text",Common.UIString.UIString("Text"),"rgb(180, 255, 137)"),misc:new PaintProfilerCategory("misc",Common.UIString.UIString("Misc"),"rgb(206, 160, 255)")}),PaintProfilerView._categories}static _initLogItemCategories(){if(PaintProfilerView._logItemCategoriesMap)return PaintProfilerView._logItemCategoriesMap;const t=PaintProfilerView.categories(),e={};return e.Clear=t.misc,e.DrawPaint=t.misc,e.DrawData=t.misc,e.SetMatrix=t.misc,e.PushCull=t.misc,e.PopCull=t.misc,e.Translate=t.misc,e.Scale=t.misc,e.Concat=t.misc,e.Restore=t.misc,e.SaveLayer=t.misc,e.Save=t.misc,e.BeginCommentGroup=t.misc,e.AddComment=t.misc,e.EndCommentGroup=t.misc,e.ClipRect=t.misc,e.ClipRRect=t.misc,e.ClipPath=t.misc,e.ClipRegion=t.misc,e.DrawPoints=t.shapes,e.DrawRect=t.shapes,e.DrawOval=t.shapes,e.DrawRRect=t.shapes,e.DrawPath=t.shapes,e.DrawVertices=t.shapes,e.DrawDRRect=t.shapes,e.DrawBitmap=t.bitmap,e.DrawBitmapRectToRect=t.bitmap,e.DrawBitmapMatrix=t.bitmap,e.DrawBitmapNine=t.bitmap,e.DrawSprite=t.bitmap,e.DrawPicture=t.bitmap,e.DrawText=t.text,e.DrawPosText=t.text,e.DrawPosTextH=t.text,e.DrawTextOnPath=t.text,PaintProfilerView._logItemCategoriesMap=e,e}static _categoryForLogItem(t){const e=Platform.StringUtilities.toTitleCase(t.method),i=PaintProfilerView._initLogItemCategories();let s=i[e];return s||(s=PaintProfilerView.categories().misc,i[e]=s),s}onResize(){this._update()}async setSnapshotAndLog(t,e,i){if(this._reset(),this._snapshot=t,this._snapshot&&this._snapshot.addReference(),this._log=e,this._logCategories=this._log.map(PaintProfilerView._categoryForLogItem),!this._snapshot)return this._update(),this._pieChart.initializeWithTotal(0),void this._selectionWindow.setEnabled(!1);this._selectionWindow.setEnabled(!0),this._progressBanner.classList.remove("hidden"),this._updateImage();const s=await t.profile(i);this._progressBanner.classList.add("hidden"),this._profiles=s,this._update(),this._updatePieChart()}setScale(t){const e=t>this._scale;this._pendingScale=Math.min(1,2*t),e&&this._snapshot&&this._updateImage()}_update(){if(this._canvas.width=this._canvasContainer.clientWidth*window.devicePixelRatio,this._canvas.height=this._canvasContainer.clientHeight*window.devicePixelRatio,this._samplesPerBar=0,!this._profiles||!this._profiles.length)return;const t=Math.floor((this._canvas.width-2*this._barPaddingWidth)/this._outerBarWidth),e=this._log.length;this._samplesPerBar=Math.ceil(e/t);let i=0;const s=[],r=[];let n={};for(let t=0,o=0,a=0;t<e;){let h=this._logCategories[t]&&this._logCategories[t].name||"misc";const l=this._log[t].commandIndex;for(let t=0;t<this._profiles.length;t++){const e=this._profiles[t][l];a+=e,n[h]=(n[h]||0)+e}if(++t,t-o===this._samplesPerBar||t===e){const e=this._profiles.length*(t-o);for(h in a/=e,n)n[h]/=e;s.push(a),r.push(n),a>i&&(i=a),a=0,n={},o=t}}const o=4*window.devicePixelRatio,a=(this._canvas.height-o-this._minBarHeight)/i;for(let t=0;t<s.length;++t){for(const e in r[t])r[t][e]*=(s[t]*a+this._minBarHeight)/s[t];this._renderBar(t,r[t])}}_renderBar(t,e){const i=PaintProfilerView.categories();let s=0;const r=this._barPaddingWidth+t*this._outerBarWidth;for(const t in i){if(!e[t])continue;s+=e[t];const n=this._canvas.height-s;this._context.fillStyle=i[t].color,this._context.fillRect(r,n,this._innerBarWidth,e[t])}}_onWindowChanged(){this.dispatchEventToListeners(Events.WindowChanged),this._updatePieChart(),this._updateImageTimer||(this._updateImageTimer=setTimeout(this._updateImage.bind(this),100))}_updatePieChart(){const t=this.selectionWindow();if(!this._profiles||!this._profiles.length||!t)return;let e=0;const i={};for(let s=t.left;s<t.right;++s){const t=this._log[s],r=PaintProfilerView._categoryForLogItem(t);i[r.color]=i[r.color]||0;for(let s=0;s<this._profiles.length;++s){const n=this._profiles[s][t.commandIndex];e+=n,i[r.color]+=n}}this._pieChart.initializeWithTotal(e/this._profiles.length);for(const t in i)this._pieChart.addSlice(i[t]/this._profiles.length,t)}_formatPieChartTime(t){return Number.millisToString(1e3*t,!0)}selectionWindow(){if(!this._log)return null;const t=this._selectionWindow.windowLeft*this._canvas.width,e=this._selectionWindow.windowRight*this._canvas.width,i=Math.floor(t/this._outerBarWidth),s=Math.floor((e+this._innerBarWidth-this._barPaddingWidth/2)/this._outerBarWidth);return{left:Platform.NumberUtilities.clamp(i*this._samplesPerBar,0,this._log.length-1),right:Platform.NumberUtilities.clamp(s*this._samplesPerBar,0,this._log.length)}}_updateImage(){let t,e;delete this._updateImageTimer;const i=this.selectionWindow();this._profiles&&this._profiles.length&&i&&(t=this._log[i.left].commandIndex,e=this._log[i.right-1].commandIndex);const s=this._pendingScale;this._snapshot.replay(s,t,e).then(t=>{t&&(this._scale=s,this._showImageCallback(t))})}_reset(){this._snapshot&&this._snapshot.release(),this._snapshot=null,this._profiles=null,this._selectionWindow.reset(),this._selectionWindow.setEnabled(!1)}}export const Events={WindowChanged:Symbol("WindowChanged")};export class PaintProfilerCommandLogView extends UI.ThrottledWidget.ThrottledWidget{constructor(){super(),this.setMinimumSize(100,25),this.element.classList.add("overflow-auto"),this._treeOutline=new UI.TreeOutline.TreeOutlineInShadow,UI.ARIAUtils.setAccessibleName(this._treeOutline.contentElement,ls`Command Log`),this.element.appendChild(this._treeOutline.element),this.setDefaultFocusedElement(this._treeOutline.contentElement),this._log=[]}setCommandLog(t){this._log=t,this._treeItemCache=new Map,this.updateWindow({left:0,right:this._log.length})}_appendLogItem(t){let e=this._treeItemCache.get(t);if(e){if(e.parent)return}else e=new LogTreeElement(this,t),this._treeItemCache.set(t,e);this._treeOutline.appendChild(e)}updateWindow(t){this._selectionWindow=t,this.update()}doUpdate(){if(!this._selectionWindow||!this._log.length)return this._treeOutline.removeChildren(),Promise.resolve();const t=this._treeOutline.rootElement();for(;;){const e=t.firstChild();if(!e||e._logItem.commandIndex>=this._selectionWindow.left)break;t.removeChildAtIndex(0)}for(;;){const e=t.lastChild();if(!e||e._logItem.commandIndex<this._selectionWindow.right)break;t.removeChildAtIndex(t.children().length-1)}for(let t=this._selectionWindow.left,e=this._selectionWindow.right;t<e;++t)this._appendLogItem(this._log[t]);return Promise.resolve()}}export class LogTreeElement extends UI.TreeOutline.TreeElement{constructor(t,e){super("",!!e.params),this._logItem=e,this._ownerView=t,this._filled=!1}onattach(){this._update()}async onpopulate(){for(const t in this._logItem.params)LogPropertyTreeElement._appendLogPropertyItem(this,t,this._logItem.params[t])}_paramToString(t,e){if("object"!=typeof t)return"string"==typeof t&&t.length>100?e:JSON.stringify(t);let i="",s=0;for(const r in t){if(++s>4||"object"==typeof t[r]||"string"==typeof t[r]&&t[r].length>100)return e;i&&(i+=", "),i+=t[r]}return i}_paramsToString(t){let e="";for(const i in t)e&&(e+=", "),e+=this._paramToString(t[i],i);return e}_update(){const t=createDocumentFragment();t.createTextChild(this._logItem.method+"("+this._paramsToString(this._logItem.params)+")"),this.title=t}}export class LogPropertyTreeElement extends UI.TreeOutline.TreeElement{constructor(t){super(),this._property=t}static _appendLogPropertyItem(t,e,i){const s=new LogPropertyTreeElement({name:e,value:i});if(t.appendChild(s),i&&"object"==typeof i)for(const t in i)LogPropertyTreeElement._appendLogPropertyItem(s,t,i[t])}onattach(){const t=createDocumentFragment();t.createChild("span","name").textContent=this._property.name;if(t.createChild("span","separator").textContent=": ",null===this._property.value||"object"!=typeof this._property.value){const e=t.createChild("span","value");e.textContent=JSON.stringify(this._property.value),e.classList.add("cm-js-"+(null===this._property.value?"null":typeof this._property.value))}this.title=t}}export class PaintProfilerCategory{constructor(t,e,i){this.name=t,this.title=e,this.color=i}}