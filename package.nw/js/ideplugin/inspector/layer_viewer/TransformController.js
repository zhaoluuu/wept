import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as UI from"../ui/ui.js";export class TransformController extends Common.ObjectWrapper.ObjectWrapper{constructor(t,e){if(super(),this._shortcuts={},this.element=t,this._registerShortcuts(),UI.UIUtils.installDragHandle(t,this._onDragStart.bind(this),this._onDrag.bind(this),this._onDragEnd.bind(this),"move",null),t.addEventListener("keydown",this._onKeyDown.bind(this),!1),t.addEventListener("mousewheel",this._onMouseWheel.bind(this),!1),this._minScale=0,this._maxScale=1/0,this._controlPanelToolbar=new UI.Toolbar.Toolbar("transform-control-panel"),this._modeButtons={},!e){const t=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Pan mode (X)"),"largeicon-pan");t.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._setMode.bind(this,Modes.Pan)),this._modeButtons[Modes.Pan]=t,this._controlPanelToolbar.appendToolbarItem(t);const e=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Rotate mode (V)"),"largeicon-rotate");e.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._setMode.bind(this,Modes.Rotate)),this._modeButtons[Modes.Rotate]=e,this._controlPanelToolbar.appendToolbarItem(e)}this._setMode(Modes.Pan);const o=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Reset transform (0)"),"largeicon-center");o.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this.resetAndNotify.bind(this,void 0)),this._controlPanelToolbar.appendToolbarItem(o),this._reset()}toolbar(){return this._controlPanelToolbar}_onKeyDown(t){const e=UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEventIgnoringModifiers(t),o=this._shortcuts[e];o&&o(t)&&t.consume()}_addShortcuts(t,e){for(let o=0;o<t.length;++o)this._shortcuts[t[o].key]=e}_registerShortcuts(){this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.ResetView,this.resetAndNotify.bind(this)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.PanMode,this._setMode.bind(this,Modes.Pan)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.RotateMode,this._setMode.bind(this,Modes.Rotate));this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.ZoomIn,this._onKeyboardZoom.bind(this,1.1)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.ZoomOut,this._onKeyboardZoom.bind(this,1/1.1)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.Up,this._onKeyboardPanOrRotate.bind(this,0,-1)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.Down,this._onKeyboardPanOrRotate.bind(this,0,1)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.Left,this._onKeyboardPanOrRotate.bind(this,-1,0)),this._addShortcuts(UI.ShortcutsScreen.LayersPanelShortcuts.Right,this._onKeyboardPanOrRotate.bind(this,1,0))}_postChangeEvent(){this.dispatchEventToListeners(Events.TransformChanged)}_reset(){this._scale=1,this._offsetX=0,this._offsetY=0,this._rotateX=0,this._rotateY=0}_setMode(t){this._mode!==t&&(this._mode=t,this._updateModeButtons())}_updateModeButtons(){for(const t in this._modeButtons)this._modeButtons[t].setToggled(t===this._mode)}resetAndNotify(t){this._reset(),this._postChangeEvent(),t&&t.preventDefault(),this.element.focus()}setScaleConstraints(t,e){this._minScale=t,this._maxScale=e,this._scale=Platform.NumberUtilities.clamp(this._scale,t,e)}clampOffsets(t,e,o,s){this._offsetX=Platform.NumberUtilities.clamp(this._offsetX,t,e),this._offsetY=Platform.NumberUtilities.clamp(this._offsetY,o,s)}scale(){return this._scale}offsetX(){return this._offsetX}offsetY(){return this._offsetY}rotateX(){return this._rotateX}rotateY(){return this._rotateY}_onScale(t,e,o){t=Platform.NumberUtilities.clamp(this._scale*t,this._minScale,this._maxScale)/this._scale,this._scale*=t,this._offsetX-=(e-this._offsetX)*(t-1),this._offsetY-=(o-this._offsetY)*(t-1),this._postChangeEvent()}_onPan(t,e){this._offsetX+=t,this._offsetY+=e,this._postChangeEvent()}_onRotate(t,e){this._rotateX=t,this._rotateY=e,this._postChangeEvent()}_onKeyboardZoom(t){this._onScale(t,this.element.clientWidth/2,this.element.clientHeight/2)}_onKeyboardPanOrRotate(t,e){this._mode===Modes.Rotate?this._onRotate(this._rotateX+5*e,this._rotateY+5*t):this._onPan(6*t,6*e)}_onMouseWheel(t){const e=Math.pow(1.1,t.wheelDeltaY*(1/120));this._onScale(e,t.clientX-this.element.totalOffsetLeft(),t.clientY-this.element.totalOffsetTop())}_onDrag(t){this._mode===Modes.Rotate?this._onRotate(this._oldRotateX+(this._originY-t.clientY)/this.element.clientHeight*180,this._oldRotateY-(this._originX-t.clientX)/this.element.clientWidth*180):(this._onPan(t.clientX-this._originX,t.clientY-this._originY),this._originX=t.clientX,this._originY=t.clientY)}_onDragStart(t){return this.element.focus(),this._originX=t.clientX,this._originY=t.clientY,this._oldRotateX=this._rotateX,this._oldRotateY=this._rotateY,!0}_onDragEnd(){delete this._originX,delete this._originY,delete this._oldRotateX,delete this._oldRotateY}}export const Events={TransformChanged:Symbol("TransformChanged")};export const Modes={Pan:"Pan",Rotate:"Rotate"};