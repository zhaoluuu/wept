import*as Common from"../common/common.js";import{ContrastInfo,Events}from"./ContrastInfo.js";export class ContrastOverlay{constructor(t,o){this._contrastInfo=t,this._visible=!1,this._contrastRatioSVG=o.createSVGChild("svg","spectrum-contrast-container fill"),this._contrastRatioLines=new Map,this._contrastRatioLines.set("aa",this._contrastRatioSVG.createSVGChild("path","spectrum-contrast-line")),this._contrastRatioLines.set("aaa",this._contrastRatioSVG.createSVGChild("path","spectrum-contrast-line")),this._width=0,this._height=0,this._contrastRatioLineBuilder=new ContrastRatioLineBuilder(this._contrastInfo),this._contrastRatioLinesThrottler=new Common.Throttler.Throttler(0),this._drawContrastRatioLinesBound=this._drawContrastRatioLines.bind(this),this._contrastInfo.addEventListener(Events.ContrastInfoUpdated,this._update.bind(this))}_update(){this._visible&&!this._contrastInfo.isNull()&&this._contrastInfo.contrastRatio()&&this._contrastRatioLinesThrottler.schedule(this._drawContrastRatioLinesBound)}setDimensions(t,o){this._width=t,this._height=o,this._update()}setVisible(t){this._visible=t,this._contrastRatioSVG.classList.toggle("hidden",!t),this._update()}async _drawContrastRatioLines(){for(const[t,o]of this._contrastRatioLines){const s=this._contrastRatioLineBuilder.drawContrastRatioLine(this._width,this._height,t);s?o.setAttribute("d",s):o.removeAttribute("d")}}}export class ContrastRatioLineBuilder{constructor(t){this._contrastInfo=t}drawContrastRatioLine(t,o,s){const i=this._contrastInfo.contrastRatioThreshold(s);if(!t||!o||!i)return null;const n=.02,r=this._contrastInfo.color(),a=this._contrastInfo.bgColor();if(!r||!a)return null;const e=r.rgba(),l=r.hsva(),h=a.rgba(),c=Common.ColorUtils.luminance(h);let C=Common.ColorUtils.blendColors(e,h);const d=Common.ColorUtils.luminance(C)>c,_=Common.Color.Color.desiredLuminance(c,i,d);let m=l[2],u=0;const p=[l[0],0,0,l[3]];let R=[];const f=[];let L;for(Common.Color.Color.hsva2rgba(p,f),C=Common.ColorUtils.blendColors(f,h),L=0;L<1.02;L+=n){L=Math.min(1,L),p[1]=L,p[2]=m+u*n;const s=Common.Color.Color.approachColorValue(p,h,2,_);if(null===s)break;u=0===L?0:(s-m)/n,m=s,R.push(R.length?"L":"M"),R.push((L*t).toFixed(2)),R.push(((1-s)*o).toFixed(2))}return L<1.02&&(L-=n,p[2]=1,L=Common.Color.Color.approachColorValue(p,h,1,_),null!==L&&(R=R.concat(["L",(L*t).toFixed(2),"-0.1"]))),0===R.length?null:R.join(" ")}}