import*as Common from"../common/common.js";import*as TextUtils from"../text_utils/text_utils.js";export class CSSShadowModel{constructor(t){this._isBoxShadow=t,this._inset=!1,this._offsetX=CSSLength.zero(),this._offsetY=CSSLength.zero(),this._blurRadius=CSSLength.zero(),this._spreadRadius=CSSLength.zero(),this._color=Common.Color.Color.parse("black"),this._format=[_Part.OffsetX,_Part.OffsetY]}static parseTextShadow(t){return CSSShadowModel._parseShadow(t,!1)}static parseBoxShadow(t){return CSSShadowModel._parseShadow(t,!0)}static _parseShadow(t,s){const e=[],r=TextUtils.TextUtils.Utils.splitStringByRegexes(t,[Common.Color.Regex,/,/g]);let o=0;for(let s=0;s<r.length;s++)if(1===r[s].regexIndex){const a=r[s];e.push(t.substring(o,a.position)),o=a.position+1}e.push(t.substring(o,t.length));const a=[];for(let t=0;t<e.length;t++){const r=new CSSShadowModel(s);r._format=[];let o=!0;const n=[/inset/gi,Common.Color.Regex,CSSLength.Regex],f=TextUtils.TextUtils.Utils.splitStringByRegexes(e[t],n);for(let t=0;t<f.length;t++){const s=f[t];if(-1===s.regexIndex){if(/\S/.test(s.value))return[];o=!0}else{if(!o)return[];if(o=!1,0===s.regexIndex)r._inset=!0,r._format.push(_Part.Inset);else if(1===s.regexIndex){const t=Common.Color.Color.parse(s.value);if(!t)return[];r._color=t,r._format.push(_Part.Color)}else if(2===s.regexIndex){const t=CSSLength.parse(s.value);if(!t)return[];const e=r._format.length>0?r._format[r._format.length-1]:"";e===_Part.OffsetX?(r._offsetY=t,r._format.push(_Part.OffsetY)):e===_Part.OffsetY?(r._blurRadius=t,r._format.push(_Part.BlurRadius)):e===_Part.BlurRadius?(r._spreadRadius=t,r._format.push(_Part.SpreadRadius)):(r._offsetX=t,r._format.push(_Part.OffsetX))}}}if(i(r,_Part.OffsetX,1,1)||i(r,_Part.OffsetY,1,1)||i(r,_Part.Color,0,1)||i(r,_Part.BlurRadius,0,1)||i(r,_Part.Inset,0,s?1:0)||i(r,_Part.SpreadRadius,0,s?1:0))return[];a.push(r)}return a;function i(t,s,e,r){let o=0;for(let e=0;e<t._format.length;e++)t._format[e]===s&&o++;return o<e||o>r}}setInset(t){this._inset=t,-1===this._format.indexOf(_Part.Inset)&&this._format.unshift(_Part.Inset)}setOffsetX(t){this._offsetX=t}setOffsetY(t){this._offsetY=t}setBlurRadius(t){if(this._blurRadius=t,-1===this._format.indexOf(_Part.BlurRadius)){const t=this._format.indexOf(_Part.OffsetY);this._format.splice(t+1,0,_Part.BlurRadius)}}setSpreadRadius(t){if(this._spreadRadius=t,-1===this._format.indexOf(_Part.SpreadRadius)){this.setBlurRadius(this._blurRadius);const t=this._format.indexOf(_Part.BlurRadius);this._format.splice(t+1,0,_Part.SpreadRadius)}}setColor(t){this._color=t,-1===this._format.indexOf(_Part.Color)&&this._format.push(_Part.Color)}isBoxShadow(){return this._isBoxShadow}inset(){return this._inset}offsetX(){return this._offsetX}offsetY(){return this._offsetY}blurRadius(){return this._blurRadius}spreadRadius(){return this._spreadRadius}color(){return this._color}asCSSText(){const t=[];for(let s=0;s<this._format.length;s++){const e=this._format[s];e===_Part.Inset&&this._inset?t.push("inset"):e===_Part.OffsetX?t.push(this._offsetX.asCSSText()):e===_Part.OffsetY?t.push(this._offsetY.asCSSText()):e===_Part.BlurRadius?t.push(this._blurRadius.asCSSText()):e===_Part.SpreadRadius?t.push(this._spreadRadius.asCSSText()):e===_Part.Color&&t.push(this._color.asString(this._color.format()))}return t.join(" ")}}export const _Part={Inset:"I",OffsetX:"X",OffsetY:"Y",BlurRadius:"B",SpreadRadius:"S",Color:"C"};export class CSSLength{constructor(t,s){this.amount=t,this.unit=s}static parse(t){const s=new RegExp("^(?:"+CSSLength.Regex.source+")$","i"),e=t.match(s);return e?e.length>2&&e[2]?new CSSLength(parseFloat(e[1]),e[2]):CSSLength.zero():null}static zero(){return new CSSLength(0,"")}asCSSText(){return this.amount+this.unit}}CSSLength.Regex=new RegExp("([+-]?(?:[0-9]*[.])?[0-9]+(?:[eE][+-]?[0-9]+)?)(ch|cm|em|ex|in|mm|pc|pt|px|rem|vh|vmax|vmin|vw)|[+-]?(?:0*[.])?0+(?:[eE][+-]?[0-9]+)?","gi");