import*as Host from"../host/host.js";import*as UI from"../ui/ui.js";export class TimelineGrid{constructor(){this.element=createElement("div"),UI.Utils.appendStyle(this.element,"perf_ui/timelineGrid.css"),this._dividersElement=this.element.createChild("div","resources-dividers"),this._gridHeaderElement=createElement("div"),this._gridHeaderElement.classList.add("timeline-grid-header"),this._eventDividersElement=this._gridHeaderElement.createChild("div","resources-event-dividers"),this._dividersLabelBarElement=this._gridHeaderElement.createChild("div","resources-dividers-label-bar"),this.element.appendChild(this._gridHeaderElement)}static calculateGridOffsets(e,i){const t=e.computePosition(e.maximumBoundary());let s=t/64,r=e.boundarySpan()/s;const d=t/e.boundarySpan(),l=Math.ceil(Math.log(r)/Math.LN10);r=Math.pow(10,l),r*d>=320&&(r/=5),r*d>=128&&(r/=2);const n=Math.ceil((e.minimumBoundary()-e.zeroTime())/r)*r+e.zeroTime();let o=e.maximumBoundary();o+=64/d,s=Math.ceil((o-n)/r),r||(s=0);const a=[];for(let t=0;t<s;++t){const s=n+r*t;e.computePosition(s)<i||a.push({position:Math.floor(e.computePosition(s)),time:s})}return{offsets:a,precision:Math.max(0,-Math.floor(Math.log(1.01*r)/Math.LN10))}}static drawCanvasGrid(e,i){e.save(),e.scale(window.devicePixelRatio,window.devicePixelRatio);const t=Math.floor(e.canvas.height/window.devicePixelRatio);e.strokeStyle=self.UI.themeSupport.patchColorText("rgba(0, 0, 0, 0.1)",UI.UIUtils.ThemeSupport.ColorUsage.Foreground),e.lineWidth=1,e.translate(.5,.5),e.beginPath();for(const s of i.offsets)e.moveTo(s.position,0),e.lineTo(s.position,t);e.stroke(),e.restore()}static drawCanvasHeaders(e,i,t,s,r,d){e.save(),e.scale(window.devicePixelRatio,window.devicePixelRatio);const l=Math.ceil(e.canvas.width/window.devicePixelRatio);e.beginPath(),e.fillStyle=self.UI.themeSupport.patchColorText("rgba(255, 255, 255, 0.5)",UI.UIUtils.ThemeSupport.ColorUsage.Background),e.fillRect(0,0,l,r),e.fillStyle=self.UI.themeSupport.patchColorText("#333",UI.UIUtils.ThemeSupport.ColorUsage.Foreground),e.textBaseline="hanging",e.font="11px "+Host.Platform.fontFamily();for(const r of i.offsets){const i=t(r.time),l=e.measureText(i).width,n=r.position-l-4;(!d||d<n)&&e.fillText(i,n,s)}e.restore()}get dividersElement(){return this._dividersElement}get dividersLabelBarElement(){return this._dividersLabelBarElement}removeDividers(){this._dividersElement.removeChildren(),this._dividersLabelBarElement.removeChildren()}updateDividers(e,i){const t=TimelineGrid.calculateGridOffsets(e,i),s=t.offsets,r=t.precision,d=this._dividersElement.clientWidth;let l=this._dividersElement.firstChild,n=this._dividersLabelBarElement.firstChild;for(let i=0;i<s.length;++i){if(!l){l=createElement("div"),l.className="resources-divider",this._dividersElement.appendChild(l),n=createElement("div"),n.className="resources-divider";const e=createElement("div");e.className="resources-divider-label",n._labelElement=e,n.appendChild(e),this._dividersLabelBarElement.appendChild(n)}const t=s[i].time,o=s[i].position;n._labelElement.textContent=e.formatValue(t,r);const a=100*o/d;l.style.left=a+"%",n.style.left=a+"%",l=l.nextSibling,n=n.nextSibling}for(;l;){const e=l.nextSibling;this._dividersElement.removeChild(l),l=e}for(;n;){const e=n.nextSibling;this._dividersLabelBarElement.removeChild(n),n=e}return!0}addEventDivider(e){this._eventDividersElement.appendChild(e)}addEventDividers(e){this._gridHeaderElement.removeChild(this._eventDividersElement);for(const i of e)this._eventDividersElement.appendChild(i);this._gridHeaderElement.appendChild(this._eventDividersElement)}removeEventDividers(){this._eventDividersElement.removeChildren()}hideEventDividers(){this._eventDividersElement.classList.add("hidden")}showEventDividers(){this._eventDividersElement.classList.remove("hidden")}hideDividers(){this._dividersElement.classList.add("hidden")}showDividers(){this._dividersElement.classList.remove("hidden")}setScrollTop(e){this._dividersLabelBarElement.style.top=e+"px",this._eventDividersElement.style.top=e+"px"}}export class Calculator{computePosition(e){}formatValue(e,i){}minimumBoundary(){}zeroTime(){}maximumBoundary(){}boundarySpan(){}}export let DividersData;