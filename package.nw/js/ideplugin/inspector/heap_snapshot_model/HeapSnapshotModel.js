export const HeapSnapshotProgressEvent={Update:"ProgressUpdate",BrokenSnapshot:"BrokenSnapshot"};export const baseSystemDistance=1e8;export class AllocationNodeCallers{constructor(t,s){this.nodesWithSingleCaller=t,this.branchingCallers=s}}export class SerializedAllocationNode{constructor(t,s,e,i,o,h,r,a,d,n,c){this.id=t,this.name=s,this.scriptName=e,this.scriptId=i,this.line=o,this.column=h,this.count=r,this.size=a,this.liveCount=d,this.liveSize=n,this.hasChildren=c}}export class AllocationStackFrame{constructor(t,s,e,i,o){this.functionName=t,this.scriptName=s,this.scriptId=e,this.line=i,this.column=o}}export class Node{constructor(t,s,e,i,o,h,r){this.id=t,this.name=s,this.distance=e,this.nodeIndex=i,this.retainedSize=o,this.selfSize=h,this.type=r,this.canBeQueried=!1,this.detachedDOMTreeNode=!1}}export class Edge{constructor(t,s,e,i){this.name=t,this.node=s,this.type=e,this.edgeIndex=i}}export class Aggregate{constructor(){this.count,this.distance,this.self,this.maxRet,this.type,this.name,this.idxs}}export class AggregateForDiff{constructor(){this.indexes=[],this.ids=[],this.selfSizes=[]}}export class Diff{constructor(){this.addedCount=0,this.removedCount=0,this.addedSize=0,this.removedSize=0,this.deletedIndexes=[],this.addedIndexes=[]}}export class DiffForClass{constructor(){this.addedCount,this.removedCount,this.addedSize,this.removedSize,this.deletedIndexes,this.addedIndexes,this.countDelta,this.sizeDelta}}export class ComparatorConfig{constructor(){this.fieldName1,this.ascending1,this.fieldName2,this.ascending2}}export class WorkerCommand{constructor(){this.callId,this.disposition,this.objectId,this.newObjectId,this.methodName,this.methodArguments,this.source}}export class ItemsRange{constructor(t,s,e,i){this.startPosition=t,this.endPosition=s,this.totalLength=e,this.items=i}}export class StaticData{constructor(t,s,e,i){this.nodeCount=t,this.rootNodeIndex=s,this.totalSize=e,this.maxJSObjectId=i}}export class Statistics{constructor(){this.total,this.v8heap,this.native,this.code,this.jsArrays,this.strings,this.system}}export class NodeFilter{constructor(t,s){this.minNodeId=t,this.maxNodeId=s,this.allocationNodeId}equals(t){return this.minNodeId===t.minNodeId&&this.maxNodeId===t.maxNodeId&&this.allocationNodeId===t.allocationNodeId}}export class SearchConfig{constructor(t,s,e,i,o){this.query=t,this.caseSensitive=s,this.isRegex=e,this.shouldJump=i,this.jumpBackward=o}}export class Samples{constructor(t,s,e){this.timestamps=t,this.lastAssignedIds=s,this.sizes=e}}export class Location{constructor(t,s,e){this.scriptId=t,this.lineNumber=s,this.columnNumber=e}}