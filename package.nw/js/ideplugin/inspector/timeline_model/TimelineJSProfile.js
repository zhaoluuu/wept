import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import{RecordType,TimelineModelImpl}from"./TimelineModel.js";export class TimelineJSProfileProcessor{static generateTracingEventsFromCpuProfile(e,t){const n=e.idleNode,i=e.programNode,o=e.gcNode,r=e.samples,a=e.timestamps,s=[],l=new Map;l.set(i,[]);for(let i=0;i<r.length;++i){let c=e.nodeByIndex(i);if(!c){console.error(`Node with unknown id ${r[i]} at index ${i}`);continue}if(c===o||c===n)continue;let m=l.get(c);if(!m){m=new Array(c.depth+1),l.set(c,m);for(let e=0;c.parent;c=c.parent)m[e++]=c}const d=new SDK.TracingModel.Event(SDK.TracingModel.DevToolsTimelineEventCategory,RecordType.JSSample,SDK.TracingModel.Phase.Instant,a[i],t);d.args.data={stackTrace:m},s.push(d)}return s}static generateJSFrameEvents(e){const t=[],n=[],i=[];let o=0;const r=Root.Runtime.experiments.isEnabled("timelineShowAllEvents"),a=Root.Runtime.experiments.isEnabled("timelineV8RuntimeCallStats"),s=Common.Settings.Settings.instance().moduleSetting("showNativeFunctionsInJSProfile").get();function l(e,t){if(i.length){const n=i.peekLast();e<n&&(console.error(`Child stack is shallower (${e}) than the parent stack (${n}) at ${t}`),e=n)}n.length<e&&(console.error("Trying to truncate higher than the current stack size at "+t),e=n.length);for(let e=0;e<n.length;++e)n[e].setEndTime(t);n.length=e}function c(e){const o=RecordType,c=e.name===o.JSSample?e.args.data.stackTrace.slice().reverse():n.map(e=>e.args.data);!function(e){if(r)return;let t=null,n=0;for(let o=0;o<e.length;++o){const r=e[o],l=r.url,c=l&&l.startsWith("native ");if(!s&&c)continue;const m=TimelineJSProfileProcessor.isNativeRuntimeFrame(r);if(m&&(i=r.functionName,!a||!TimelineJSProfileProcessor.nativeGroup(i)))continue;const d=m?TimelineJSProfileProcessor.nativeGroup(r.functionName):null;t&&t===d||(t=d,e[n++]=r)}var i;e.length=n}(c);const m=e.endTime||e.startTime,d=Math.min(c.length,n.length);let u;for(u=i.peekLast()||0;u<d;++u){const e=c[u],t=n[u].args.data;if(T=t,(p=e).scriptId!==T.scriptId||p.functionName!==T.functionName||p.lineNumber!==T.lineNumber)break;n[u].setEndTime(Math.max(n[u].endTime,m))}var p,T;for(l(u,e.startTime);u<c.length;++u){const i=c[u],r=new SDK.TracingModel.Event(SDK.TracingModel.DevToolsTimelineEventCategory,o.JSFrame,SDK.TracingModel.Phase.Complete,e.startTime,e.thread);r.ordinal=e.ordinal,r.addArgs({data:i}),r.setEndTime(m),n.push(r),t.push(r)}}const m=e.find(SDK.TracingModel.TracingModel.isTopLevelEvent),d=m?m.startTime:0;return TimelineModelImpl.forEachEvent(e,(function(e){e.ordinal=++o,c(e),i.push(n.length)}),(function(e){l(i.pop(),e.endTime)}),(function(e,t){e.ordinal=++o,t&&function(e){switch(e.name){case RecordType.RunMicrotasks:case RecordType.FunctionCall:case RecordType.EvaluateScript:case RecordType.EvaluateModule:case RecordType.EventDispatch:case RecordType.V8Execute:return!0}return!1}(t)&&c(e)}),d),t}static isNativeRuntimeFrame(e){return"native V8Runtime"===e.url}static nativeGroup(e){return e.startsWith("Parse")?TimelineJSProfileProcessor.NativeGroups.Parse:e.startsWith("Compile")||e.startsWith("Recompile")?TimelineJSProfileProcessor.NativeGroups.Compile:null}static buildTraceProfileFromCpuProfile(e,t,n,i){const o=[];if(n&&T("TracingStartedInPage",{data:{sessionId:"1"}},0,0,"M"),i||(i=ls`Thread ${t}`),T(SDK.TracingModel.MetadataEvent.ThreadName,{name:i},0,0,"M","__metadata"),!e)return o;const r=new Map,a=e.nodes;for(let e=0;e<a.length;++e)r.set(a[e].id,a[e]);let s,l=null,c=null,m=e.startTime;const d=e.samples,u=e.timeDeltas;for(let e=0;e<d.length;++e){s=m,m+=u[e];const t=r.get(d[e]).callFrame.functionName;"(idle)"!==t?(l||(l=T("MessageLoop::RunTask",{},s,0,"X","toplevel")),"(program)"===t?c&&(c.dur=s-c.ts,c=null):c||(c=T("FunctionCall",{data:{sessionId:"1"}},s))):p()}return p(),T("CpuProfile",{data:{cpuProfile:e}},e.endTime,0,"I"),o;function p(){l&&(l.dur=s-l.ts),c&&(c.dur=s-c.ts),l=null,c=null}function T(e,n,i,r,a,s){const l={cat:s||"disabled-by-default-devtools.timeline",name:e,ph:a||"X",pid:1,tid:t,ts:i,args:n};return r&&(l.dur=r),o.push(l),l}}}TimelineJSProfileProcessor.NativeGroups={Compile:"Compile",Parse:"Parse"};