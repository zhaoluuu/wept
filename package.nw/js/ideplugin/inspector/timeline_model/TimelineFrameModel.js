import*as SDK from"../sdk/sdk.js";import{RecordType,TimelineData}from"./TimelineModel.js";import{TracingLayerTree}from"./TracingLayerTree.js";export class TimelineFrameModel{constructor(e){this._categoryMapper=e,this.reset()}frames(e,t){if(!e&&!t)return this._frames;const a=this._frames.lowerBound(e||0,(e,t)=>e-t.endTime),r=this._frames.lowerBound(t||1/0,(e,t)=>e-t.startTime);return this._frames.slice(a,r)}hasRasterTile(e){const t=e.args.tileData;if(!t)return!1;const a=t.sourceFrameNumber,r=a&&this._frameById[a];return!(!r||!r.layerTree)}rasterTilePromise(e){if(!this._target)return Promise.resolve(null);const t=e.args.tileData,a=t.sourceFrameNumber,r=t.tileId&&t.tileId.id_ref,i=a&&this._frameById[a];return i&&i.layerTree&&r?i.layerTree.layerTreePromise().then(e=>e&&e.pictureForRasterTile(r)):Promise.resolve(null)}reset(){this._minimumRecordTime=1/0,this._frames=[],this._frameById={},this._lastFrame=null,this._lastLayerTree=null,this._mainFrameCommitted=!1,this._mainFrameRequested=!1,this._framePendingCommit=null,this._lastBeginFrame=null,this._lastNeedsBeginFrame=null,this._framePendingActivation=null,this._lastTaskBeginTime=null,this._target=null,this._layerTreeId=null,this._currentTaskTimeByCategory={}}handleBeginFrame(e){this._lastFrame||this._startFrame(e),this._lastBeginFrame=e}handleDrawFrame(e){if(this._lastFrame){if(this._mainFrameCommitted||!this._mainFrameRequested){if(this._lastNeedsBeginFrame){const e=this._framePendingActivation?this._framePendingActivation.triggerTime:this._lastBeginFrame||this._lastNeedsBeginFrame;e>this._lastFrame.startTime&&(this._lastFrame.idle=!0,this._startFrame(e),this._framePendingActivation&&this._commitPendingFrame(),this._lastBeginFrame=null),this._lastNeedsBeginFrame=null}this._startFrame(e)}this._mainFrameCommitted=!1}else this._startFrame(e)}handleActivateLayerTree(){this._lastFrame&&this._framePendingActivation&&!this._lastNeedsBeginFrame&&this._commitPendingFrame()}handleRequestMainThreadFrame(){this._lastFrame&&(this._mainFrameRequested=!0)}handleCompositeLayers(){this._framePendingCommit&&(this._framePendingActivation=this._framePendingCommit,this._framePendingCommit=null,this._mainFrameRequested=!1,this._mainFrameCommitted=!0)}handleLayerTreeSnapshot(e){this._lastLayerTree=e}handleNeedFrameChanged(e,t){t&&(this._lastNeedsBeginFrame=e)}_startFrame(e){this._lastFrame&&this._flushFrame(this._lastFrame,e),this._lastFrame=new TimelineFrame(e,e-this._minimumRecordTime)}_flushFrame(e,t){e._setLayerTree(this._lastLayerTree),e._setEndTime(t),this._lastLayerTree&&this._lastLayerTree._setPaints(e._paints),this._frames.length&&(e.startTime!==this._frames.peekLast().endTime||e.startTime>e.endTime)&&console.assert(!1,`Inconsistent frame time for frame ${this._frames.length} (${e.startTime} - ${e.endTime})`),this._frames.push(e),"number"==typeof e._mainFrameId&&(this._frameById[e._mainFrameId]=e)}_commitPendingFrame(){this._lastFrame._addTimeForCategories(this._framePendingActivation.timeByCategory),this._lastFrame._paints=this._framePendingActivation.paints,this._lastFrame._mainFrameId=this._framePendingActivation.mainFrameId,this._framePendingActivation=null}addTraceEvents(e,t,a){this._target=e;let r=0;this._currentProcessMainThread=a.length&&a[0].thread||null;for(let e=0;e<t.length;++e){for(;r+1<a.length&&a[r+1].time<=t[e].startTime;)this._currentProcessMainThread=a[++r].thread;this._addTraceEvent(t[e])}this._currentProcessMainThread=null}_addTraceEvent(e){const t=RecordType;if(e.startTime&&e.startTime<this._minimumRecordTime&&(this._minimumRecordTime=e.startTime),e.name===t.SetLayerTreeId)this._layerTreeId=e.args.layerTreeId||e.args.data.layerTreeId;else if(e.phase===SDK.TracingModel.Phase.SnapshotObject&&e.name===t.LayerTreeHostImplSnapshot&&parseInt(e.id,0)===this._layerTreeId){const t=e;this.handleLayerTreeSnapshot(new TracingFrameLayerTree(this._target,t))}else this._processCompositorEvents(e),e.thread===this._currentProcessMainThread?this._addMainThreadTraceEvent(e):this._lastFrame&&e.selfTime&&!SDK.TracingModel.TracingModel.isTopLevelEvent(e)&&this._lastFrame._addTimeForCategory(this._categoryMapper(e),e.selfTime)}_processCompositorEvents(e){const t=RecordType;if(e.args.layerTreeId!==this._layerTreeId)return;const a=e.startTime;e.name===t.BeginFrame?this.handleBeginFrame(a):e.name===t.DrawFrame?this.handleDrawFrame(a):e.name===t.ActivateLayerTree?this.handleActivateLayerTree():e.name===t.RequestMainThreadFrame?this.handleRequestMainThreadFrame():e.name===t.NeedsBeginFrameChanged&&this.handleNeedFrameChanged(a,e.args.data&&e.args.data.needsBeginFrame)}_addMainThreadTraceEvent(e){const t=RecordType;SDK.TracingModel.TracingModel.isTopLevelEvent(e)&&(this._currentTaskTimeByCategory={},this._lastTaskBeginTime=e.startTime),!this._framePendingCommit&&TimelineFrameModel._mainFrameMarkers.indexOf(e.name)>=0&&(this._framePendingCommit=new PendingFrame(this._lastTaskBeginTime||e.startTime,this._currentTaskTimeByCategory)),this._framePendingCommit?(this._addTimeForCategory(this._framePendingCommit.timeByCategory,e),e.name===t.BeginMainThreadFrame&&e.args.data&&e.args.data.frameId&&(this._framePendingCommit.mainFrameId=e.args.data.frameId),e.name===t.Paint&&e.args.data.layerId&&TimelineData.forEvent(e).picture&&this._target&&this._framePendingCommit.paints.push(new LayerPaintEvent(e,this._target)),e.name===t.CompositeLayers&&e.args.layerTreeId===this._layerTreeId&&this.handleCompositeLayers()):this._addTimeForCategory(this._currentTaskTimeByCategory,e)}_addTimeForCategory(e,t){if(!t.selfTime)return;const a=this._categoryMapper(t);e[a]=(e[a]||0)+t.selfTime}}TimelineFrameModel._mainFrameMarkers=[RecordType.ScheduleStyleRecalculation,RecordType.InvalidateLayout,RecordType.BeginMainThreadFrame,RecordType.ScrollLayer];export class TracingFrameLayerTree{constructor(e,t){this._target=e,this._snapshot=t,this._paints}async layerTreePromise(){const e=await this._snapshot.objectPromise();if(!e)return null;const t=e.device_viewport_size,a=e.active_tiles,r=e.active_tree.root_layer,i=e.active_tree.layers,s=new TracingLayerTree(this._target);return s.setViewportSize(t),s.setTiles(a),await s.setLayers(r,i,this._paints||[]),s}paints(){return this._paints||[]}_setPaints(e){this._paints=e}}export class TimelineFrame{constructor(e,t){this.startTime=e,this.startTimeOffset=t,this.endTime=this.startTime,this.duration=0,this.timeByCategory={},this.cpuTime=0,this.idle=!1,this.layerTree=null,this._paints=[],this._mainFrameId=void 0}hasWarnings(){return!1}_setEndTime(e){this.endTime=e,this.duration=this.endTime-this.startTime}_setLayerTree(e){this.layerTree=e}_addTimeForCategories(e){for(const t in e)this._addTimeForCategory(t,e[t])}_addTimeForCategory(e,t){this.timeByCategory[e]=(this.timeByCategory[e]||0)+t,this.cpuTime+=t}}export class LayerPaintEvent{constructor(e,t){this._event=e,this._target=t}layerId(){return this._event.args.data.layerId}event(){return this._event}picturePromise(){return TimelineData.forEvent(this._event).picture.objectPromise().then(e=>{if(!e)return null;const t=e.params&&e.params.layer_rect,a=e.skp64;return t&&a?{rect:t,serializedPicture:a}:null})}snapshotPromise(){const e=this._target&&this._target.model(SDK.PaintProfiler.PaintProfilerModel);return this.picturePromise().then(t=>t&&e?e.loadSnapshot(t.serializedPicture).then(e=>e?{rect:t.rect,snapshot:e}:null):null)}}export class PendingFrame{constructor(e,t){this.timeByCategory=t,this.paints=[],this.mainFrameId=void 0,this.triggerTime=e}}