import"./root/root-legacy.js";import*as RootModule from"./root/root.js";let appStartedPromiseCallback;self.Runtime=self.Runtime||{},Runtime=Runtime||{},self.Runtime.cachedResources={__proto__:null},self.Root=self.Root||{},Root=Root||{},Root.allDescriptors=Root.allDescriptors||[],Root.applicationDescriptor=Root.applicationDescriptor||void 0,Runtime.appStarted=new Promise(o=>{appStartedPromiseCallback=o});export async function startApplication(o){console.timeStamp("Root.Runtime.startApplication");const e={};for(let o=0;o<Root.allDescriptors.length;++o){const t=Root.allDescriptors[o];e[t.name]=t}if(!Root.applicationDescriptor){let e=await RootModule.Runtime.loadResourcePromise(o+".json");Root.applicationDescriptor=JSON.parse(e);let t=Root.applicationDescriptor;for(;t.extends;)e=await RootModule.Runtime.loadResourcePromise(t.extends+".json"),t=JSON.parse(e),Root.applicationDescriptor.modules=t.modules.concat(Root.applicationDescriptor.modules)}if(wxMain.isFeatureEnabled("addModule")){const o=wxMain.getFeatureOptions("addModule").modules;Root.applicationDescriptor.modules=Root.applicationDescriptor.modules.concat(o)}if(wxMain.isFeatureEnabled("removeModule")){const o=wxMain.getFeatureOptions("removeModule").modules;Root.applicationDescriptor.modules=Root.applicationDescriptor.modules.filter(e=>o.indexOf(e.name)<0)}const t=Root.applicationDescriptor.modules,i=[],a=[];for(let o=0;o<t.length;++o){const r=t[o],s=r.name,n=e[s];n?i.push(Promise.resolve(n)):i.push(RootModule.Runtime.loadResourcePromise(s+"/module.json").then(JSON.parse.bind(JSON))),"autostart"===r.type&&a.push(s)}const r=await Promise.all(i);for(let o=0;o<r.length;++o)r[o].name=t[o].name,r[o].condition=t[o].condition,r[o].remote="remote"===t[o].type;if(wxMain.isFeatureEnabled("modifyModuleDescriptor")){const o=wxMain.getFeatureOptions("modifyModuleDescriptor").modules;for(let e=0;e<r.length;++e){const t=r[e];o[t.name]&&(r[e]=o[t.name](t))}}self.runtime=RootModule.Runtime.Runtime.instance({forceNew:!0,moduleDescriptors:r}),a&&await self.runtime.loadAutoStartModules(a),appStartedPromiseCallback()}export async function startWorker(o){return startApplication(o).then((function(){self.postMessage("workerReady")}))}