import*as Common from"../common/common.js";const MaxWorkers=2;export class FormatterWorkerPool{constructor(){this._taskQueue=[],this._workerTasks=new Map}_createWorker(){const t=new Common.Worker.WorkerWrapper("formatter_worker_entrypoint");return t.onmessage=this._onWorkerMessage.bind(this,t),t.onerror=this._onWorkerError.bind(this,t),t}_processNextTask(){if(!this._taskQueue.length)return;let t=[...this._workerTasks.keys()].find(t=>!this._workerTasks.get(t));if(!t&&this._workerTasks.size<2&&(t=this._createWorker()),!t)return;const e=this._taskQueue.shift();this._workerTasks.set(t,e),t.postMessage({method:e.method,params:e.params})}_onWorkerMessage(t,e){const s=this._workerTasks.get(t);s.isChunked&&e.data&&!e.data.isLastChunk?s.callback(e.data):(this._workerTasks.set(t,null),this._processNextTask(),s.callback(e.data?e.data:null))}_onWorkerError(t,e){console.error(e);const s=this._workerTasks.get(t);t.terminate(),this._workerTasks.delete(t);const r=this._createWorker();this._workerTasks.set(r,null),this._processNextTask(),s.callback(null)}_runChunkedTask(t,e,s){const r=new Task(t,e,(function(t){if(!t)return void s(!0,null);const e=!!t.isLastChunk,r=t.chunk;s(e,r)}),!0);this._taskQueue.push(r),this._processNextTask()}_runTask(t,e){let s;const r=new Promise(t=>{s=t}),n=new Task(t,e,s,!1);return this._taskQueue.push(n),this._processNextTask(),r}parseSCSS(t){return this._runTask("parseSCSS",{content:t}).then(t=>t||[])}format(t,e,s){const r={mimeType:t,content:e,indentString:s};return this._runTask("format",r)}javaScriptIdentifiers(t){return this._runTask("javaScriptIdentifiers",{content:t}).then(t=>t||[])}evaluatableJavaScriptSubstring(t){return this._runTask("evaluatableJavaScriptSubstring",{content:t}).then(t=>t||"")}parseCSS(t,e){this._runChunkedTask("parseCSS",{content:t},(function(t,s){e(t,s||[])}))}javaScriptOutline(t,e){this._runChunkedTask("javaScriptOutline",{content:t},(function(t,s){e(t,s||[])}))}outlineForMimetype(t,e,s){switch(e){case"text/html":case"text/javascript":return this.javaScriptOutline(t,(function(t,e){s(t,e.map(t=>({line:t.line,column:t.column,title:t.name,subtitle:t.arguments})))})),!0;case"text/css":return this.parseCSS(t,(function(t,e){s(t,e.map(t=>({line:t.lineNumber,column:t.columnNumber,title:t.selectorText||t.atRule})))})),!0}return!1}findLastExpression(t){return this._runTask("findLastExpression",{content:t})}findLastFunctionCall(t){return this._runTask("findLastFunctionCall",{content:t})}argumentsList(t){return this._runTask("argumentsList",{content:t})}}class Task{constructor(t,e,s,r){this.method=t,this.params=e,this.callback=s,this.isChunked=r}}export class FormatResult{constructor(){this.content,this.mapping}}class JSOutlineItem{constructor(){this.name,this.arguments,this.line,this.column}}class CSSProperty{constructor(){this.name,this.nameRange,this.value,this.valueRange,this.range,this.disabled}}class CSSStyleRule{constructor(){this.selectorText,this.styleRange,this.lineNumber,this.columnNumber,this.properties}}class SCSSProperty{constructor(){this.range,this.name,this.value,this.disabled}}class SCSSRule{constructor(){this.selectors,this.properties,this.styleRange}}export function formatterWorkerPool(){return Formatter._formatterWorkerPool||(Formatter._formatterWorkerPool=new FormatterWorkerPool),Formatter._formatterWorkerPool}export let OutlineItem;export let FormatMapping;export let CSSAtRule;export let CSSRule;export let TextRange;