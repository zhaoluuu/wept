import*as Common from"../common/common.js";import*as DataGrid from"../data_grid/data_grid.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import*as Workspace from"../workspace/workspace.js";import{SamplingHeapProfileNode}from"./HeapProfileView.js";export class LiveHeapProfileView extends UI.Widget.VBox{constructor(){super(!0),this._gridNodeByUrl=new Map,this.registerRequiredCSS("profiler/liveHeapProfile.css"),this._setting=Common.Settings.Settings.instance().moduleSetting("memoryLiveHeapProfile");const e=new UI.Toolbar.Toolbar("live-heap-profile-toolbar",this.contentElement);this._toggleRecordAction=UI.ActionRegistry.ActionRegistry.instance().action("live-heap-profile.toggle-recording"),this._toggleRecordButton=UI.Toolbar.Toolbar.createActionButton(this._toggleRecordAction),this._toggleRecordButton.setToggled(this._setting.get()),e.appendToolbarItem(this._toggleRecordButton);const t=SDK.SDKModel.TargetManager.instance().mainTarget();if(t&&t.model(SDK.ResourceTreeModel.ResourceTreeModel)){const t=UI.ActionRegistry.ActionRegistry.instance().action("live-heap-profile.start-with-reload");this._startWithReloadButton=UI.Toolbar.Toolbar.createActionButton(t),e.appendToolbarItem(this._startWithReloadButton)}this._dataGrid=this._createDataGrid(),this._dataGrid.asWidget().show(this.contentElement),this._currentPollId=0}_createDataGrid(){const e=[{id:"size",title:ls`JS Heap`,width:"72px",fixedWidth:!0,sortable:!0,align:DataGrid.DataGrid.Align.Right,sort:DataGrid.DataGrid.Order.Descending,tooltip:ls`Allocated JS heap size currently in use`},{id:"isolates",title:ls`VMs`,width:"40px",fixedWidth:!0,align:DataGrid.DataGrid.Align.Right,tooltip:ls`Number of VMs sharing the same script source`},{id:"url",title:ls`Script URL`,fixedWidth:!1,sortable:!0,tooltip:ls`URL of the script source`}],t=new DataGrid.SortableDataGrid.SortableDataGrid({displayName:ls`Heap Profile`,columns:e});t.setResizeMethod(DataGrid.DataGrid.ResizeMethod.Last),t.element.classList.add("flex-auto"),t.element.addEventListener("keydown",this._onKeyDown.bind(this),!1),t.addEventListener(DataGrid.DataGrid.Events.OpenedNode,this._revealSourceForSelectedNode,this),t.addEventListener(DataGrid.DataGrid.Events.SortingChanged,this._sortingChanged,this);for(const i of e){const e=t.headerTableHeader(i.id);e&&e.setAttribute("title",i.tooltip)}return t}wasShown(){this._poll(),this._setting.addChangeListener(this._settingChanged,this)}willHide(){++this._currentPollId,this._setting.removeChangeListener(this._settingChanged,this)}_settingChanged(e){this._toggleRecordButton.setToggled(e.data)}async _poll(){const e=this._currentPollId;do{const t=Array.from(self.SDK.isolateManager.isolates()),i=await Promise.all(t.map(e=>e.heapProfilerModel()&&e.heapProfilerModel().getSamplingProfile()));if(this._currentPollId!==e)return;this._update(t,i),await new Promise(e=>setTimeout(e,3e3))}while(this._currentPollId===e)}_update(e,t){const i=new Map;t.forEach((t,o)=>{t&&function e(t,o,r){const s=r.callFrame.url||o||function(e){const t=e.callFrame.functionName;return t.startsWith("(")&&"(root)"!==t?t:""}(r)||function(e){return Number(e.callFrame.scriptId)?Common.UIString.UIString("(Anonymous Script %s)",e.callFrame.scriptId):""}(r);if(r.children.forEach(e.bind(null,t,s)),!r.selfSize)return;let a=i.get(s);a||(a={size:0,isolates:new Set},i.set(s,a));a.size+=r.selfSize,a.isolates.add(t)}(e[o],"",t.head)});const o=this._dataGrid.rootNode(),r=new Set;for(const e of i){const t=e[0],i=e[1].size,s=e[1].isolates.size;if(!t){console.info(`Node with empty URL: ${i} bytes`);continue}let a=this._gridNodeByUrl.get(t);a?a.updateNode(i,s):(a=new GridNode(t,i,s),this._gridNodeByUrl.set(t,a),o.appendChild(a)),r.add(a)}for(const e of o.children.slice())r.has(e)||e.remove(),this._gridNodeByUrl.delete(e);this._sortingChanged()}_onKeyDown(e){isEnterKey(e)&&(e.consume(!0),this._revealSourceForSelectedNode())}_revealSourceForSelectedNode(){const e=this._dataGrid.selectedNode;if(!e||!e._url)return;const t=Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(e._url);t&&Common.Revealer.reveal(t)}_sortingChanged(){const e=this._dataGrid.sortColumnId();if(!e)return;const t="url"===e?(e,t)=>t._url.localeCompare(e._url):(e,t)=>t._size-e._size;this._dataGrid.sortNodes(t,this._dataGrid.isSortOrderAscending())}_toggleRecording(){!this._setting.get()?this._startRecording(!1):this._stopRecording()}_startRecording(e){if(this._setting.set(!0),!e)return;const t=SDK.SDKModel.TargetManager.instance().mainTarget();if(!t)return;const i=t.model(SDK.ResourceTreeModel.ResourceTreeModel);i&&i.reloadPage()}async _stopRecording(){this._setting.set(!1)}}export class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode{constructor(e,t,i){super(),this._url=e,this._size=t,this._isolateCount=i}updateNode(e,t){this._size===e&&this._isolateCount===t||(this._size=e,this._isolateCount=t,this.refresh())}createCell(e){const t=this.createTD(e);switch(e){case"url":t.textContent=this._url;break;case"size":t.textContent=Number.withThousandsSeparator(Math.round(this._size/1e3)),t.createChild("span","size-units").textContent=ls`KB`;break;case"isolates":t.textContent=""+this._isolateCount}return t}}export class ActionDelegate{handleAction(e,t){return(async()=>{await UI.ViewManager.ViewManager.instance().showView("live_heap_profile");const e=await UI.ViewManager.ViewManager.instance().view("live_heap_profile").widget();this._innerHandleAction(e,t)})(),!0}_innerHandleAction(e,t){switch(t){case"live-heap-profile.toggle-recording":e._toggleRecording();break;case"live-heap-profile.start-with-reload":e._startRecording(!0);break;default:console.assert(!1,"Unknown action: "+t)}}}