import*as Common from"../common/common.js";import*as HeapSnapshotModel from"../heap_snapshot_model/heap_snapshot_model.js";import{ChildrenProvider}from"./ChildrenProvider.js";export class HeapSnapshotWorkerProxy extends Common.ObjectWrapper.ObjectWrapper{constructor(e){super(),this._eventHandler=e,this._nextObjectId=1,this._nextCallId=1,this._callbacks=new Map,this._previousCallbacks=new Set,this._worker=new Common.Worker.WorkerWrapper("heap_snapshot_worker_entrypoint"),this._worker.onmessage=this._messageReceived.bind(this)}createLoader(e,t){const s=this._nextObjectId++,o=new HeapSnapshotLoaderProxy(this,s,e,t);return this._postMessage({callId:this._nextCallId++,disposition:"create",objectId:s,methodName:"HeapSnapshotWorker.HeapSnapshotLoader"}),o}dispose(){this._worker.terminate(),this._interval&&clearInterval(this._interval)}disposeObject(e){this._postMessage({callId:this._nextCallId++,disposition:"dispose",objectId:e})}evaluateForTest(e,t){const s=this._nextCallId++;this._callbacks.set(s,t),this._postMessage({callId:s,disposition:"evaluateForTest",source:e})}callFactoryMethod(e,t,s,o){const r=this._nextCallId++,a=Array.prototype.slice.call(arguments,4),i=this._nextObjectId++;return e?(this._callbacks.set(r,function(t){e(t?new o(this,i):null)}.bind(this)),this._postMessage({callId:r,disposition:"factory",objectId:t,methodName:s,methodArguments:a,newObjectId:i}),null):(this._postMessage({callId:r,disposition:"factory",objectId:t,methodName:s,methodArguments:a,newObjectId:i}),new o(this,i))}callMethod(e,t,s){const o=this._nextCallId++,r=Array.prototype.slice.call(arguments,3);e&&this._callbacks.set(o,e),this._postMessage({callId:o,disposition:"method",objectId:t,methodName:s,methodArguments:r})}startCheckingForLongRunningCalls(){this._interval||(this._checkLongRunningCalls(),this._interval=setInterval(this._checkLongRunningCalls.bind(this),300))}_checkLongRunningCalls(){for(const e of this._previousCallbacks)this._callbacks.has(e)||this._previousCallbacks.delete(e);const e=!!this._previousCallbacks.size;this.dispatchEventToListeners(HeapSnapshotWorkerProxy.Events.Wait,e);for(const e of this._callbacks.keys())this._previousCallbacks.add(e)}_messageReceived(e){const t=e.data;if(t.eventName)return void(this._eventHandler&&this._eventHandler(t.eventName,t.data));if(t.error)return t.errorMethodName&&Common.Console.Console.instance().error(Common.UIString.UIString("An error occurred when a call to method '%s' was requested",t.errorMethodName)),Common.Console.Console.instance().error(t.errorCallStack),void this._callbacks.delete(t.callId);if(!this._callbacks.has(t.callId))return;const s=this._callbacks.get(t.callId);this._callbacks.delete(t.callId),s(t.result)}_postMessage(e){this._worker.postMessage(e)}}HeapSnapshotWorkerProxy.Events={Wait:Symbol("Wait")};export class HeapSnapshotProxyObject{constructor(e,t){this._worker=e,this._objectId=t}_callWorker(e,t){return t.splice(1,0,this._objectId),this._worker[e].apply(this._worker,t)}dispose(){this._worker.disposeObject(this._objectId)}disposeWorker(){this._worker.dispose()}callFactoryMethod(e,t,s,o){return this._callWorker("callFactoryMethod",Array.prototype.slice.call(arguments,0))}_callMethodPromise(e,t){const s=Array.prototype.slice.call(arguments);return new Promise(e=>this._callWorker("callMethod",[e,...s]))}}export class HeapSnapshotLoaderProxy extends HeapSnapshotProxyObject{constructor(e,t,s,o){super(e,t),this._profileUid=s,this._snapshotReceivedCallback=o}write(e){return this._callMethodPromise("write",e)}async close(){await this._callMethodPromise("close");const e=await new Promise(e=>this.callFactoryMethod(e,"buildSnapshot",HeapSnapshotProxy));this.dispose(),e.setProfileUid(this._profileUid),await e.updateStaticData(),this._snapshotReceivedCallback(e)}}export class HeapSnapshotProxy extends HeapSnapshotProxyObject{constructor(e,t){super(e,t),this._staticData=null}search(e,t){return this._callMethodPromise("search",e,t)}aggregatesWithFilter(e){return this._callMethodPromise("aggregatesWithFilter",e)}aggregatesForDiff(){return this._callMethodPromise("aggregatesForDiff")}calculateSnapshotDiff(e,t){return this._callMethodPromise("calculateSnapshotDiff",e,t)}nodeClassName(e){return this._callMethodPromise("nodeClassName",e)}createEdgesProvider(e){return this.callFactoryMethod(null,"createEdgesProvider",HeapSnapshotProviderProxy,e)}createRetainingEdgesProvider(e){return this.callFactoryMethod(null,"createRetainingEdgesProvider",HeapSnapshotProviderProxy,e)}createAddedNodesProvider(e,t){return this.callFactoryMethod(null,"createAddedNodesProvider",HeapSnapshotProviderProxy,e,t)}createDeletedNodesProvider(e){return this.callFactoryMethod(null,"createDeletedNodesProvider",HeapSnapshotProviderProxy,e)}createNodesProvider(e){return this.callFactoryMethod(null,"createNodesProvider",HeapSnapshotProviderProxy,e)}createNodesProviderForClass(e,t){return this.callFactoryMethod(null,"createNodesProviderForClass",HeapSnapshotProviderProxy,e,t)}allocationTracesTops(){return this._callMethodPromise("allocationTracesTops")}allocationNodeCallers(e){return this._callMethodPromise("allocationNodeCallers",e)}allocationStack(e){return this._callMethodPromise("allocationStack",e)}dispose(){throw new Error("Should never be called")}get nodeCount(){return this._staticData.nodeCount}get rootNodeIndex(){return this._staticData.rootNodeIndex}async updateStaticData(){this._staticData=await this._callMethodPromise("updateStaticData")}getStatistics(){return this._callMethodPromise("getStatistics")}getLocation(e){return this._callMethodPromise("getLocation",e)}getSamples(){return this._callMethodPromise("getSamples")}get totalSize(){return this._staticData.totalSize}get uid(){return this._profileUid}setProfileUid(e){this._profileUid=e}maxJSObjectId(){return this._staticData.maxJSObjectId}}export class HeapSnapshotProviderProxy extends HeapSnapshotProxyObject{constructor(e,t){super(e,t)}nodePosition(e){return this._callMethodPromise("nodePosition",e)}isEmpty(){return this._callMethodPromise("isEmpty")}serializeItemsRange(e,t){return this._callMethodPromise("serializeItemsRange",e,t)}sortAndRewind(e){return this._callMethodPromise("sortAndRewind",e)}}