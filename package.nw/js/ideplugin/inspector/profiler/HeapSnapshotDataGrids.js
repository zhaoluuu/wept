import*as Components from"../components/components.js";import*as DataGrid from"../data_grid/data_grid.js";import*as HeapSnapshotModel from"../heap_snapshot_model/heap_snapshot_model.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{AllocationGridNode,HeapSnapshotConstructorNode,HeapSnapshotDiffNode,HeapSnapshotGridNode,HeapSnapshotObjectNode,HeapSnapshotRetainingObjectNode}from"./HeapSnapshotGridNodes.js";import{HeapSnapshotProxy}from"./HeapSnapshotProxy.js";import{DataDisplayDelegate}from"./ProfileHeader.js";export class HeapSnapshotSortableDataGrid extends DataGrid.DataGrid.DataGridImpl{constructor(e,t,i){super(i),this._heapProfilerModel=e,this._dataDisplayDelegate=t;const s=[["distance",ls`Distance from window object`],["shallowSize",ls`Size of the object itself in bytes`],["retainedSize",ls`Size of the object plus the graph it retains in bytes`]];for(const e of s){const t=this.headerTableHeader(e[0]);t&&t.setAttribute("title",e[1])}this._recursiveSortingDepth=0,this._highlightedNode=null,this._populatedAndSorted=!1,this._nameFilter=null,this._nodeFilter=new HeapSnapshotModel.HeapSnapshotModel.NodeFilter,this.addEventListener(HeapSnapshotSortableDataGrid.Events.SortingComplete,this._sortingComplete,this),this.addEventListener(DataGrid.DataGrid.Events.SortingChanged,this.sortingChanged,this),this.setRowContextMenuCallback(this._populateContextMenu.bind(this))}heapProfilerModel(){return this._heapProfilerModel}dataDisplayDelegate(){return this._dataDisplayDelegate}nodeFilter(){return this._nodeFilter}setNameFilter(e){this._nameFilter=e}defaultPopulateCount(){return 100}_disposeAllNodes(){const e=this.topLevelNodes();for(let t=0,i=e.length;t<i;++t)e[t].dispose()}wasShown(){this._nameFilter&&(this._nameFilter.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged,this._onNameFilterChanged,this),this.updateVisibleNodes(!0)),this._populatedAndSorted&&this.dispatchEventToListeners(HeapSnapshotSortableDataGrid.Events.ContentShown,this)}_sortingComplete(){this.removeEventListener(HeapSnapshotSortableDataGrid.Events.SortingComplete,this._sortingComplete,this),this._populatedAndSorted=!0,this.dispatchEventToListeners(HeapSnapshotSortableDataGrid.Events.ContentShown,this)}willHide(){this._nameFilter&&this._nameFilter.removeEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged,this._onNameFilterChanged,this),this._clearCurrentHighlight()}_populateContextMenu(e,t){t.populateContextMenu(e,this._dataDisplayDelegate,this.heapProfilerModel()),t.linkElement&&!e.containsTarget(t.linkElement)&&e.appendApplicableItems(t.linkElement)}resetSortingCache(){delete this._lastSortColumnId,delete this._lastSortAscending}topLevelNodes(){return this.rootNode().children}revealObjectByHeapSnapshotId(e){return Promise.resolve(null)}highlightNode(e){this._clearCurrentHighlight(),this._highlightedNode=e,UI.UIUtils.runCSSAnimationOnce(this._highlightedNode.element(),"highlighted-row")}_clearCurrentHighlight(){this._highlightedNode&&(this._highlightedNode.element().classList.remove("highlighted-row"),this._highlightedNode=null)}resetNameFilter(){this._nameFilter.setValue("")}_onNameFilterChanged(){this.updateVisibleNodes(!0),this._deselectFilteredNodes()}_deselectFilteredNodes(){let e=this.selectedNode;for(;e;){if(this._isFilteredOut(e))return this.selectedNode.deselect(),void(this.selectedNode=null);e=e.parent}}sortingChanged(){const e=this.isSortOrderAscending(),t=this.sortColumnId();if(this._lastSortColumnId===t&&this._lastSortAscending===e)return;this._lastSortColumnId=t,this._lastSortAscending=e;const i=this._sortFields(t,e);this._performSorting((function(e,t){let s=e[i[0]],o=t[i[0]],l=s<o?-1:s>o?1:0;return i[1]||(l=-l),0!==l||(s=e[i[2]],o=t[i[2]],l=s<o?-1:s>o?1:0,i[3]||(l=-l)),l}))}_performSorting(e){this.recursiveSortingEnter();const t=this.allChildren(this.rootNode());this.rootNode().removeChildren(),t.sort(e);for(let e=0,i=t.length;e<i;++e){const i=t[e];this.appendChildAfterSorting(i),i.expanded&&i.sort()}this.recursiveSortingLeave()}appendChildAfterSorting(e){const t=e.revealed;this.rootNode().appendChild(e),e.revealed=t}recursiveSortingEnter(){++this._recursiveSortingDepth}recursiveSortingLeave(){this._recursiveSortingDepth&&(--this._recursiveSortingDepth||(this.updateVisibleNodes(!0),this.dispatchEventToListeners(HeapSnapshotSortableDataGrid.Events.SortingComplete)))}updateVisibleNodes(e){}allChildren(e){return e.children}insertChild(e,t,i){e.insertChild(t,i)}removeChildByIndex(e,t){e.removeChild(e.children[t])}removeAllChildren(e){e.removeChildren()}}HeapSnapshotSortableDataGrid.Events={ContentShown:Symbol("ContentShown"),SortingComplete:Symbol("SortingComplete")};export class HeapSnapshotViewportDataGrid extends HeapSnapshotSortableDataGrid{constructor(e,t,i){super(e,t,i),this.scrollContainer.addEventListener("scroll",this._onScroll.bind(this),!0),this._topPaddingHeight=0,this._bottomPaddingHeight=0}topLevelNodes(){return this.allChildren(this.rootNode())}appendChildAfterSorting(e){}updateVisibleNodes(e){const t=this.scrollContainer.scrollHeight;let i=this.scrollContainer.scrollTop,s=t-i-this.scrollContainer.offsetHeight;i=Math.max(0,i-40),s=Math.max(0,s-40);let o=t-i-s;if(!e&&i>=this._topPaddingHeight&&s>=this._bottomPaddingHeight)return;i-=500,o+=1e3;const l=this.selectedNode;this.rootNode().removeChildren(),this._topPaddingHeight=0,this._bottomPaddingHeight=0,this._addVisibleNodes(this.rootNode(),i,i+o),this.setVerticalPadding(this._topPaddingHeight,this._bottomPaddingHeight),l&&(l.parent?l.select(!0):this.selectedNode=l)}_addVisibleNodes(e,t,i){if(!e.expanded)return 0;const s=this.allChildren(e);let o=0,l=0;for(;l<s.length;++l){const e=s[l];if(this._isFilteredOut(e))continue;const i=o+this._nodeHeight(e);if(i>t)break;o=i}let r=o;for(;l<s.length&&r<i;++l){const o=s[l];if(this._isFilteredOut(o))continue;const n=o.hasChildren();o.removeChildren(),o.setHasChildren(n),e.appendChild(o),r+=o.nodeSelfHeight(),r+=this._addVisibleNodes(o,t-r,i-r)}let n=0;for(;l<s.length;++l){const e=s[l];this._isFilteredOut(e)||(n+=this._nodeHeight(e))}return this._topPaddingHeight+=o,this._bottomPaddingHeight+=n,r+n}_isFilteredOut(e){const t=this._nameFilter?this._nameFilter.value().toLowerCase():"";return!!(t&&e.filteredOut&&e.filteredOut(t))}_nodeHeight(e){let t=e.nodeSelfHeight();if(!e.expanded)return t;const i=this.allChildren(e);for(let e=0;e<i.length;e++)t+=this._nodeHeight(i[e]);return t}revealTreeNode(e){const t=this._calculateOffset(e),i=e.peekLast(),s=this.scrollContainer.scrollTop,o=s+this.scrollContainer.offsetHeight;if(t>=s&&t<o)return Promise.resolve(i);return this.scrollContainer.scrollTop=Math.max(0,t-40),new Promise(e=>{console.assert(!this._scrollToResolveCallback),this._scrollToResolveCallback=e.bind(null,i),this.scrollContainer.window().requestAnimationFrame(()=>{this._scrollToResolveCallback&&(this._scrollToResolveCallback(),this._scrollToResolveCallback=null)})})}_calculateOffset(e){let t=this.rootNode(),i=0;for(let s=0;s<e.length;++s){const o=e[s],l=this.allChildren(t);for(let e=0;e<l.length;++e){const t=l[e];if(o===t){i+=o.nodeSelfHeight();break}i+=this._nodeHeight(t)}t=o}return i-e.peekLast().nodeSelfHeight()}allChildren(e){return e._allChildren||(e._allChildren=[]),e._allChildren}appendNode(e,t){this.allChildren(e).push(t)}insertChild(e,t,i){this.allChildren(e).splice(i,0,t)}removeChildByIndex(e,t){this.allChildren(e).splice(t,1)}removeAllChildren(e){e._allChildren=[]}removeTopLevelNodes(){this._disposeAllNodes(),this.rootNode().removeChildren(),this.rootNode()._allChildren=[]}_isScrolledIntoView(e){const t=this.scrollContainer.scrollTop,i=t+this.scrollContainer.clientHeight,s=e.offsetTop;return s+e.offsetHeight<=i&&s>=t}onResize(){super.onResize(),this.updateVisibleNodes(!1)}_onScroll(e){this.updateVisibleNodes(!1),this._scrollToResolveCallback&&(this._scrollToResolveCallback(),this._scrollToResolveCallback=null)}}export class HeapSnapshotContainmentDataGrid extends HeapSnapshotSortableDataGrid{constructor(e,t,i,s){super(e,t,{displayName:i,columns:s=s||[{id:"object",title:ls`Object`,disclosure:!0,sortable:!0},{id:"distance",title:ls`Distance`,width:"70px",sortable:!0,fixedWidth:!0},{id:"shallowSize",title:ls`Shallow Size`,width:"110px",sortable:!0,fixedWidth:!0},{id:"retainedSize",title:ls`Retained Size`,width:"110px",sortable:!0,fixedWidth:!0,sort:DataGrid.DataGrid.Order.Descending}]})}setDataSource(e,t){this.snapshot=e;const i={node:{nodeIndex:t||e.rootNodeIndex}};this.setRootNode(this._createRootNode(e,i)),this.rootNode().sort()}_createRootNode(e,t){return new HeapSnapshotObjectNode(this,e,t,null)}sortingChanged(){const e=this.rootNode();e.hasChildren()&&e.sort()}}export class HeapSnapshotRetainmentDataGrid extends HeapSnapshotContainmentDataGrid{constructor(e,t){const i=[{id:"object",title:ls`Object`,disclosure:!0,sortable:!0},{id:"distance",title:ls`Distance`,width:"70px",sortable:!0,fixedWidth:!0,sort:DataGrid.DataGrid.Order.Ascending},{id:"shallowSize",title:ls`Shallow Size`,width:"110px",sortable:!0,fixedWidth:!0},{id:"retainedSize",title:ls`Retained Size`,width:"110px",sortable:!0,fixedWidth:!0}];super(e,t,ls`Heap Snapshot Retainment`,i)}_createRootNode(e,t){return new HeapSnapshotRetainingObjectNode(this,e,t,null)}_sortFields(e,t){return{object:["_name",t,"_count",!1],count:["_count",t,"_name",!0],shallowSize:["_shallowSize",t,"_name",!0],retainedSize:["_retainedSize",t,"_name",!0],distance:["_distance",t,"_name",!0]}[e]}reset(){this.rootNode().removeChildren(),this.resetSortingCache()}setDataSource(e,t){super.setDataSource(e,t),this.rootNode().expand()}}HeapSnapshotRetainmentDataGrid.Events={ExpandRetainersComplete:Symbol("ExpandRetainersComplete")};export class HeapSnapshotConstructorsDataGrid extends HeapSnapshotViewportDataGrid{constructor(e,t){const i=[{id:"object",title:ls`Constructor`,disclosure:!0,sortable:!0},{id:"distance",title:ls`Distance`,width:"70px",sortable:!0,fixedWidth:!0},{id:"shallowSize",title:ls`Shallow Size`,width:"110px",sortable:!0,fixedWidth:!0},{id:"retainedSize",title:ls`Retained Size`,width:"110px",sort:DataGrid.DataGrid.Order.Descending,sortable:!0,fixedWidth:!0}];super(e,t,{displayName:ls`Heap Snapshot Constructors`,columns:i}),this._profileIndex=-1,this._objectIdToSelect=null}_sortFields(e,t){return{object:["_name",t,"_retainedSize",!1],distance:["_distance",t,"_retainedSize",!1],shallowSize:["_shallowSize",t,"_name",!0],retainedSize:["_retainedSize",t,"_name",!0]}[e]}async revealObjectByHeapSnapshotId(e){if(!this.snapshot)return this._objectIdToSelect=e,null;const t=await this.snapshot.nodeClassName(parseInt(e,10));if(!t)return null;const i=this.topLevelNodes().find(e=>e._name===t);if(!i)return null;const s=await i.populateNodeBySnapshotObjectId(parseInt(e,10));return s.length?this.revealTreeNode(s):null}clear(){this._nextRequestedFilter=null,this._lastFilter=null,this.removeTopLevelNodes()}setDataSource(e){this.snapshot=e,-1===this._profileIndex&&this._populateChildren(),this._objectIdToSelect&&(this.revealObjectByHeapSnapshotId(this._objectIdToSelect),this._objectIdToSelect=null)}setSelectionRange(e,t){this._nodeFilter=new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(e,t),this._populateChildren(this._nodeFilter)}setAllocationNodeId(e){this._nodeFilter=new HeapSnapshotModel.HeapSnapshotModel.NodeFilter,this._nodeFilter.allocationNodeId=e,this._populateChildren(this._nodeFilter)}_aggregatesReceived(e,t){this._filterInProgress=null,this._nextRequestedFilter&&(this.snapshot.aggregatesWithFilter(this._nextRequestedFilter).then(this._aggregatesReceived.bind(this,this._nextRequestedFilter)),this._filterInProgress=this._nextRequestedFilter,this._nextRequestedFilter=null),this.removeTopLevelNodes(),this.resetSortingCache();for(const i in t)this.appendNode(this.rootNode(),new HeapSnapshotConstructorNode(this,i,t[i],e));this.sortingChanged(),this._lastFilter=e}async _populateChildren(e){const t=e||new HeapSnapshotModel.HeapSnapshotModel.NodeFilter;if(this._filterInProgress)return void(this._nextRequestedFilter=this._filterInProgress.equals(t)?null:t);if(this._lastFilter&&this._lastFilter.equals(t))return;this._filterInProgress=t;const i=await this.snapshot.aggregatesWithFilter(t);this._aggregatesReceived(t,i)}filterSelectIndexChanged(e,t){if(this._profileIndex=t,this._nodeFilter=void 0,-1!==t){const i=t>0?e[t-1].maxJSObjectId:0,s=e[t].maxJSObjectId;this._nodeFilter=new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(i,s)}this._populateChildren(this._nodeFilter)}}export class HeapSnapshotDiffDataGrid extends HeapSnapshotViewportDataGrid{constructor(e,t){const i=[{id:"object",title:ls`Constructor`,disclosure:!0,sortable:!0},{id:"addedCount",title:ls`# New`,width:"75px",sortable:!0,fixedWidth:!0},{id:"removedCount",title:ls`# Deleted`,width:"75px",sortable:!0,fixedWidth:!0},{id:"countDelta",title:ls`# Delta`,width:"65px",sortable:!0,fixedWidth:!0},{id:"addedSize",title:ls`Alloc. Size`,width:"75px",sortable:!0,fixedWidth:!0,sort:DataGrid.DataGrid.Order.Descending},{id:"removedSize",title:ls`Freed Size`,width:"75px",sortable:!0,fixedWidth:!0},{id:"sizeDelta",title:ls`Size Delta`,width:"75px",sortable:!0,fixedWidth:!0}];super(e,t,{displayName:ls`Heap Snapshot Diff`,columns:i})}defaultPopulateCount(){return 50}_sortFields(e,t){return{object:["_name",t,"_count",!1],addedCount:["_addedCount",t,"_name",!0],removedCount:["_removedCount",t,"_name",!0],countDelta:["_countDelta",t,"_name",!0],addedSize:["_addedSize",t,"_name",!0],removedSize:["_removedSize",t,"_name",!0],sizeDelta:["_sizeDelta",t,"_name",!0]}[e]}setDataSource(e){this.snapshot=e}setBaseDataSource(e){this.baseSnapshot=e,this.removeTopLevelNodes(),this.resetSortingCache(),this.baseSnapshot!==this.snapshot?this._populateChildren():this.dispatchEventToListeners(HeapSnapshotSortableDataGrid.Events.SortingComplete)}async _populateChildren(){const e=await this.baseSnapshot.aggregatesForDiff(),t=await this.snapshot.calculateSnapshotDiff(this.baseSnapshot.uid,e);for(const e in t){const i=t[e];this.appendNode(this.rootNode(),new HeapSnapshotDiffNode(this,e,i))}this.sortingChanged()}}export class AllocationDataGrid extends HeapSnapshotViewportDataGrid{constructor(e,t){const i=[{id:"liveCount",title:ls`Live Count`,width:"75px",sortable:!0,fixedWidth:!0},{id:"count",title:ls`Count`,width:"65px",sortable:!0,fixedWidth:!0},{id:"liveSize",title:ls`Live Size`,width:"75px",sortable:!0,fixedWidth:!0},{id:"size",title:ls`Size`,width:"75px",sortable:!0,fixedWidth:!0,sort:DataGrid.DataGrid.Order.Descending},{id:"name",title:ls`Function`,disclosure:!0,sortable:!0}];super(e,t,{displayName:ls`Allocation`,columns:i}),this._linkifier=new Components.Linkifier.Linkifier}dispose(){this._linkifier.reset()}async setDataSource(e){this.snapshot=e,this._topNodes=await this.snapshot.allocationTracesTops(),this._populateChildren()}_populateChildren(){this.removeTopLevelNodes();const e=this.rootNode(),t=this._topNodes;for(const i of t)this.appendNode(e,new AllocationGridNode(this,i));this.updateVisibleNodes(!0)}sortingChanged(){this._topNodes.sort(this._createComparator()),this.rootNode().removeChildren(),this._populateChildren()}_createComparator(){const e=this.sortColumnId(),t=this.sortOrder()===DataGrid.DataGrid.Order.Ascending?1:-1;return function(i,s){return i[e]>s[e]?t:i[e]<s[e]?-t:0}}}