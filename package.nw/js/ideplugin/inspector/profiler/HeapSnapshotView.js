import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as Components from"../components/components.js";import*as DataGrid from"../data_grid/data_grid.js";import*as HeapSnapshotModel from"../heap_snapshot_model/heap_snapshot_model.js";import*as Host from"../host/host.js";import*as ObjectUI from"../object_ui/object_ui.js";import*as PerfUI from"../perf_ui/perf_ui.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{AllocationDataGrid,HeapSnapshotConstructorsDataGrid,HeapSnapshotContainmentDataGrid,HeapSnapshotDiffDataGrid,HeapSnapshotRetainmentDataGrid,HeapSnapshotSortableDataGrid}from"./HeapSnapshotDataGrids.js";import{HeapSnapshotGenericObjectNode,HeapSnapshotGridNode}from"./HeapSnapshotGridNodes.js";import{HeapSnapshotProxy,HeapSnapshotWorkerProxy}from"./HeapSnapshotProxy.js";import{HeapTimelineOverview,IdsRangeChanged,Samples}from"./HeapTimelineOverview.js";import{DataDisplayDelegate,Events as ProfileHeaderEvents,ProfileEvents as ProfileTypeEvents,ProfileHeader,ProfileType}from"./ProfileHeader.js";import{ProfileSidebarTreeElement}from"./ProfileSidebarTreeElement.js";import{instance}from"./ProfileTypeRegistry.js";export class HeapSnapshotView extends UI.View.SimpleView{constructor(e,t){super(Common.UIString.UIString("Heap Snapshot")),this.element.classList.add("heap-snapshot-view"),this._profile=t,this._linkifier=new Components.Linkifier.Linkifier;const i=t.profileType();i.addEventListener(HeapSnapshotProfileType.SnapshotReceived,this._onReceiveSnapshot,this),i.addEventListener(ProfileTypeEvents.RemoveProfileHeader,this._onProfileHeaderRemoved,this);const s=i.id===TrackingHeapSnapshotProfileType.TypeId;s&&this._createOverview(),this._parentDataDisplayDelegate=e,this._searchableView=new UI.SearchableView.SearchableView(this),this._searchableView.show(this.element),this._splitWidget=new UI.SplitWidget.SplitWidget(!1,!0,"heapSnapshotSplitViewState",200,200),this._splitWidget.show(this._searchableView.element);const r=t.heapProfilerModel();let a;if(this._containmentDataGrid=new HeapSnapshotContainmentDataGrid(r,this,ls`Containment`),this._containmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,this._selectionChanged,this),this._containmentWidget=this._containmentDataGrid.asWidget(),this._containmentWidget.setMinimumSize(50,25),this._statisticsView=new HeapSnapshotStatisticsView,this._constructorsDataGrid=new HeapSnapshotConstructorsDataGrid(r,this),this._constructorsDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,this._selectionChanged,this),this._constructorsWidget=this._constructorsDataGrid.asWidget(),this._constructorsWidget.setMinimumSize(50,25),this._diffDataGrid=new HeapSnapshotDiffDataGrid(r,this),this._diffDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,this._selectionChanged,this),this._diffWidget=this._diffDataGrid.asWidget(),this._diffWidget.setMinimumSize(50,25),s&&(this._allocationDataGrid=new AllocationDataGrid(r,this),this._allocationDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,this._onSelectAllocationNode,this),this._allocationWidget=this._allocationDataGrid.asWidget(),this._allocationWidget.setMinimumSize(50,25),this._allocationStackView=new HeapAllocationStackView(r),this._allocationStackView.setMinimumSize(50,25),this._tabbedPane=new UI.TabbedPane.TabbedPane),this._retainmentDataGrid=new HeapSnapshotRetainmentDataGrid(r,this),this._retainmentWidget=this._retainmentDataGrid.asWidget(),this._retainmentWidget.setMinimumSize(50,21),this._retainmentWidget.element.classList.add("retaining-paths-view"),this._allocationStackView)this._tabbedPane=new UI.TabbedPane.TabbedPane,this._tabbedPane.appendTab("retainers",Common.UIString.UIString("Retainers"),this._retainmentWidget),this._tabbedPane.appendTab("allocation-stack",Common.UIString.UIString("Allocation stack"),this._allocationStackView),a=this._tabbedPane.headerElement(),this._objectDetailsView=this._tabbedPane;else{const e=document.createElement("div");e.classList.add("heap-snapshot-view-resizer");e.createChild("div","title").createChild("span").textContent=Common.UIString.UIString("Retainers"),a=e,this._objectDetailsView=new UI.Widget.VBox,this._objectDetailsView.element.appendChild(e),this._retainmentWidget.show(this._objectDetailsView.element)}this._splitWidget.hideDefaultResizer(),this._splitWidget.installResizer(a),this._retainmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,this._inspectedObjectChanged,this),this._retainmentDataGrid.reset(),this._perspectives=[],this._comparisonPerspective=new ComparisonPerspective,this._perspectives.push(new SummaryPerspective),t.profileType()!==instance.trackingHeapSnapshotProfileType&&this._perspectives.push(this._comparisonPerspective),this._perspectives.push(new ContainmentPerspective),this._allocationWidget&&this._perspectives.push(new AllocationPerspective),this._perspectives.push(new StatisticsPerspective),this._perspectiveSelect=new UI.Toolbar.ToolbarComboBox(this._onSelectedPerspectiveChanged.bind(this),ls`Perspective`),this._updatePerspectiveOptions(),this._baseSelect=new UI.Toolbar.ToolbarComboBox(this._changeBase.bind(this),ls`Base snapshot`),this._baseSelect.setVisible(!1),this._updateBaseOptions(),this._filterSelect=new UI.Toolbar.ToolbarComboBox(this._changeFilter.bind(this),ls`Filter`),this._filterSelect.setVisible(!1),this._updateFilterOptions(),this._classNameFilter=new UI.Toolbar.ToolbarInput(ls`Class filter`),this._classNameFilter.setVisible(!1),this._constructorsDataGrid.setNameFilter(this._classNameFilter),this._diffDataGrid.setNameFilter(this._classNameFilter),this._selectedSizeText=new UI.Toolbar.ToolbarText,this._popoverHelper=new UI.PopoverHelper.PopoverHelper(this.element,this._getPopoverRequest.bind(this)),this._popoverHelper.setDisableOnClick(!0),this._popoverHelper.setHasPadding(!0),this.element.addEventListener("scroll",this._popoverHelper.hidePopover.bind(this._popoverHelper),!0),this._currentPerspectiveIndex=0,this._currentPerspective=this._perspectives[0],this._currentPerspective.activate(this),this._dataGrid=this._currentPerspective.masterGrid(this),this._populate(),this._searchThrottler=new Common.Throttler.Throttler(0);for(const e of this._profiles())e.addEventListener(ProfileHeaderEvents.ProfileTitleChanged,this._updateControls,this)}_createOverview(){const e=this._profile.profileType();this._trackingOverviewGrid=new HeapTimelineOverview,this._trackingOverviewGrid.addEventListener(IdsRangeChanged,this._onIdsRangeChanged.bind(this)),this._profile.fromFile()||e.profileBeingRecorded()!==this._profile||(e.addEventListener(TrackingHeapSnapshotProfileType.HeapStatsUpdate,this._onHeapStatsUpdate,this),e.addEventListener(TrackingHeapSnapshotProfileType.TrackingStopped,this._onStopTracking,this),this._trackingOverviewGrid.start())}_onStopTracking(){this._profile.profileType().removeEventListener(TrackingHeapSnapshotProfileType.HeapStatsUpdate,this._onHeapStatsUpdate,this),this._profile.profileType().removeEventListener(TrackingHeapSnapshotProfileType.TrackingStopped,this._onStopTracking,this),this._trackingOverviewGrid&&this._trackingOverviewGrid.stop()}_onHeapStatsUpdate(e){e.data&&this._trackingOverviewGrid.setSamples(e.data)}searchableView(){return this._searchableView}showProfile(e){return this._parentDataDisplayDelegate.showProfile(e)}showObject(e,t){e<=this._profile.maxJSObjectId?this.selectLiveObject(t,e):this._parentDataDisplayDelegate.showObject(e,t)}async linkifyObject(e){const t=this._profile.heapProfilerModel();if(!t)return null;const i=await this._profile.getLocation(e);if(!i)return null;const s=t.runtimeModel().debuggerModel().createRawLocationByScriptId(String(i.scriptId),i.lineNumber,i.columnNumber);if(!s)return null;const r=s.script()&&s.script().sourceURL;return r&&this._linkifier?this._linkifier.linkifyRawLocation(s,r):null}async _populate(){const e=await this._profile._loadPromise;if(this._retrieveStatistics(e),this._dataGrid.setDataSource(e),this._profile.profileType().id===TrackingHeapSnapshotProfileType.TypeId&&this._profile.fromFile()){const t=await e.getSamples();if(t){console.assert(t.timestamps.length);const e=new Samples;e.sizes=t.sizes,e.ids=t.lastAssignedIds,e.timestamps=t.timestamps,e.max=t.sizes,e.totalTime=Math.max(t.timestamps.peekLast(),1e4),this._trackingOverviewGrid.setSamples(e)}}const t=this._profiles().indexOf(this._profile);this._baseSelect.setSelectedIndex(Math.max(0,t-1)),this._trackingOverviewGrid&&this._trackingOverviewGrid.updateGrid()}async _retrieveStatistics(e){const t=await e.getStatistics();return this._statisticsView.setTotal(t.total),this._statisticsView.addRecord(t.code,Common.UIString.UIString("Code"),"#f77"),this._statisticsView.addRecord(t.strings,Common.UIString.UIString("Strings"),"#5e5"),this._statisticsView.addRecord(t.jsArrays,Common.UIString.UIString("JS Arrays"),"#7af"),this._statisticsView.addRecord(t.native,Common.UIString.UIString("Typed Arrays"),"#fc5"),this._statisticsView.addRecord(t.system,Common.UIString.UIString("System Objects"),"#98f"),t}_onIdsRangeChanged(e){const t=e.data.minId,i=e.data.maxId;this._selectedSizeText.setText(Common.UIString.UIString("Selected size: %s",Platform.NumberUtilities.bytesToString(e.data.size))),this._constructorsDataGrid.snapshot&&this._constructorsDataGrid.setSelectionRange(t,i)}async toolbarItems(){const e=[this._perspectiveSelect,this._classNameFilter];return this._profile.profileType()!==instance.trackingHeapSnapshotProfileType&&e.push(this._baseSelect,this._filterSelect),e.push(this._selectedSizeText),e}willHide(){this._currentSearchResultIndex=-1,this._popoverHelper.hidePopover()}supportsCaseSensitiveSearch(){return!0}supportsRegexSearch(){return!1}searchCanceled(){this._currentSearchResultIndex=-1,this._searchResults=[]}_selectRevealedNode(e){e&&e.select()}performSearch(e,t,i){const s=new HeapSnapshotModel.HeapSnapshotModel.SearchConfig(e.query.trim(),e.caseSensitive,e.isRegex,t,i||!1);this._searchThrottler.schedule(this._performSearch.bind(this,s))}async _performSearch(e){if(this.searchCanceled(),!this._currentPerspective.supportsSearch())return;this.currentQuery=e;const t=e.query.trim();if(t)if("@"!==t.charAt(0))this._searchResults=await this._profile._snapshotProxy.search(this.currentQuery,this._dataGrid.nodeFilter()),this._searchableView.updateSearchMatchesCount(this._searchResults.length),this._searchResults.length&&(this._currentSearchResultIndex=e.jumpBackwards?this._searchResults.length-1:0),await this._jumpToSearchResult(this._currentSearchResultIndex);else{const e=parseInt(t.substring(1),10);if(isNaN(e))return;const i=await this._dataGrid.revealObjectByHeapSnapshotId(String(e));this._selectRevealedNode(i)}}jumpToNextSearchResult(){this._searchResults.length&&(this._currentSearchResultIndex=(this._currentSearchResultIndex+1)%this._searchResults.length,this._searchThrottler.schedule(this._jumpToSearchResult.bind(this,this._currentSearchResultIndex)))}jumpToPreviousSearchResult(){this._searchResults.length&&(this._currentSearchResultIndex=(this._currentSearchResultIndex+this._searchResults.length-1)%this._searchResults.length,this._searchThrottler.schedule(this._jumpToSearchResult.bind(this,this._currentSearchResultIndex)))}async _jumpToSearchResult(e){if(this._searchableView.updateCurrentMatchIndex(e),-1===e)return;const t=await this._dataGrid.revealObjectByHeapSnapshotId(String(this._searchResults[e]));this._selectRevealedNode(t)}refreshVisibleData(){if(!this._dataGrid)return;let e=this._dataGrid.rootNode().children[0];for(;e;)e.refresh(),e=e.traverseNextNode(!1,null,!0)}_changeBase(){if(this._baseProfile===this._profiles()[this._baseSelect.selectedIndex()])return;this._baseProfile=this._profiles()[this._baseSelect.selectedIndex()];const e=this._dataGrid;e.snapshot&&this._baseProfile._loadPromise.then(e.setBaseDataSource.bind(e)),this.currentQuery&&this._searchResults&&this.performSearch(this.currentQuery,!1)}_changeFilter(){const e=this._filterSelect.selectedIndex()-1;this._dataGrid.filterSelectIndexChanged(this._profiles(),e),this.currentQuery&&this._searchResults&&this.performSearch(this.currentQuery,!1)}_profiles(){return this._profile.profileType().getProfiles()}_selectionChanged(e){const t=e.data;this._setSelectedNodeForDetailsView(t),this._inspectedObjectChanged(e)}_onSelectAllocationNode(e){const t=e.data;this._constructorsDataGrid.setAllocationNodeId(t.allocationNodeId()),this._setSelectedNodeForDetailsView(null)}_inspectedObjectChanged(e){const t=e.data,i=this._profile.heapProfilerModel();i&&t instanceof HeapSnapshotGenericObjectNode&&i.addInspectedHeapObject(String(t.snapshotNodeId))}_setSelectedNodeForDetailsView(e){const t=e&&e.retainersDataSource();t?(this._retainmentDataGrid.setDataSource(t.snapshot,t.snapshotNodeIndex),this._allocationStackView&&this._allocationStackView.setAllocatedObject(t.snapshot,t.snapshotNodeIndex)):(this._allocationStackView&&this._allocationStackView.clear(),this._retainmentDataGrid.reset())}_changePerspectiveAndWait(e){const t=this._perspectives.findIndex(t=>t.title()===e);if(-1===t||this._currentPerspectiveIndex===t)return Promise.resolve();const i=this._perspectives[t].masterGrid(this).once(HeapSnapshotSortableDataGrid.Events.ContentShown),s=this._perspectiveSelect.options().find(e=>e.value===String(t));return this._perspectiveSelect.select(s),this._changePerspective(t),i}async _updateDataSourceAndView(){const e=this._dataGrid;if(!e||e.snapshot)return;const t=await this._profile._loadPromise;if(this._dataGrid!==e)return;if(e.snapshot!==t&&e.setDataSource(t),e!==this._diffDataGrid)return;this._baseProfile||(this._baseProfile=this._profiles()[this._baseSelect.selectedIndex()]);const i=await this._baseProfile._loadPromise;this._diffDataGrid.baseSnapshot!==i&&this._diffDataGrid.setBaseDataSource(i)}_onSelectedPerspectiveChanged(e){this._changePerspective(e.target.selectedOptions[0].value)}_changePerspective(e){if(e===this._currentPerspectiveIndex)return;this._currentPerspectiveIndex=e,this._currentPerspective.deactivate(this);const t=this._perspectives[e];this._currentPerspective=t,this._dataGrid=t.masterGrid(this),t.activate(this),this.refreshVisibleData(),this._dataGrid&&this._dataGrid.updateWidths(),this._updateDataSourceAndView(),this.currentQuery&&this._searchResults&&this.performSearch(this.currentQuery,!1)}async selectLiveObject(e,t){await this._changePerspectiveAndWait(e);const i=await this._dataGrid.revealObjectByHeapSnapshotId(t);i?i.select():Common.Console.Console.instance().error("Cannot find corresponding heap snapshot node")}_getPopoverRequest(e){const t=e.target.enclosingNodeOrSelfWithNodeName("span"),i=e.target.enclosingNodeOrSelfWithNodeName("tr"),s=this._profile.heapProfilerModel();if(!i||!t||!s)return null;const r=i._dataGridNode;let a;return{box:t.boxInWindow(),show:async e=>{const t=await r.queryObjectContent(s,"popover");return!!t&&(a=await ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildObjectPopover(t,e),!!a||(s.runtimeModel().releaseObjectGroup("popover"),!1))},hide:()=>{s.runtimeModel().releaseObjectGroup("popover"),a.dispose()}}}_updatePerspectiveOptions(){const e=this._profiles().length>1;this._perspectiveSelect.removeOptions(),this._perspectives.forEach((t,i)=>{(e||t!==this._comparisonPerspective)&&this._perspectiveSelect.createOption(t.title(),String(i))})}_updateBaseOptions(){const e=this._profiles(),t=this._baseSelect.selectedIndex();this._baseSelect.removeOptions();for(const t of e)this._baseSelect.createOption(t.title);t>-1&&this._baseSelect.setSelectedIndex(t)}_updateFilterOptions(){const e=this._profiles(),t=this._filterSelect.selectedIndex();this._filterSelect.removeOptions(),this._filterSelect.createOption(Common.UIString.UIString("All objects"));for(let t=0;t<e.length;++t){let i;i=t?Common.UIString.UIString("Objects allocated between %s and %s",e[t-1].title,e[t].title):Common.UIString.UIString("Objects allocated before %s",e[t].title),this._filterSelect.createOption(i)}t>-1&&this._filterSelect.setSelectedIndex(t)}_updateControls(){this._updatePerspectiveOptions(),this._updateBaseOptions(),this._updateFilterOptions()}_onReceiveSnapshot(e){this._updateControls();e.data.addEventListener(ProfileHeaderEvents.ProfileTitleChanged,this._updateControls,this)}_onProfileHeaderRemoved(e){const t=e.data;t.removeEventListener(ProfileHeaderEvents.ProfileTitleChanged,this._updateControls,this),this._profile===t?(this.detach(),this._profile.profileType().removeEventListener(HeapSnapshotProfileType.SnapshotReceived,this._onReceiveSnapshot,this),this._profile.profileType().removeEventListener(ProfileTypeEvents.RemoveProfileHeader,this._onProfileHeaderRemoved,this),this.dispose()):this._updateControls()}dispose(){this._linkifier.dispose(),this._popoverHelper.dispose(),this._allocationStackView&&(this._allocationStackView.clear(),this._allocationDataGrid.dispose()),this._onStopTracking(),this._trackingOverviewGrid&&this._trackingOverviewGrid.removeEventListener(IdsRangeChanged,this._onIdsRangeChanged.bind(this))}}export class Perspective{constructor(e){this._title=e}activate(e){}deactivate(e){e._baseSelect.setVisible(!1),e._filterSelect.setVisible(!1),e._classNameFilter.setVisible(!1),e._trackingOverviewGrid&&e._trackingOverviewGrid.detach(),e._allocationWidget&&e._allocationWidget.detach(),e._statisticsView&&e._statisticsView.detach(),e._splitWidget.detach(),e._splitWidget.detachChildWidgets()}masterGrid(e){return null}title(){return this._title}supportsSearch(){return!1}}export class SummaryPerspective extends Perspective{constructor(){super(Common.UIString.UIString("Summary"))}activate(e){e._splitWidget.setMainWidget(e._constructorsWidget),e._splitWidget.setSidebarWidget(e._objectDetailsView),e._splitWidget.show(e._searchableView.element),e._filterSelect.setVisible(!0),e._classNameFilter.setVisible(!0),e._trackingOverviewGrid&&(e._trackingOverviewGrid.show(e._searchableView.element,e._splitWidget.element),e._trackingOverviewGrid.update(),e._trackingOverviewGrid.updateGrid())}masterGrid(e){return e._constructorsDataGrid}supportsSearch(){return!0}}export class ComparisonPerspective extends Perspective{constructor(){super(Common.UIString.UIString("Comparison"))}activate(e){e._splitWidget.setMainWidget(e._diffWidget),e._splitWidget.setSidebarWidget(e._objectDetailsView),e._splitWidget.show(e._searchableView.element),e._baseSelect.setVisible(!0),e._classNameFilter.setVisible(!0)}masterGrid(e){return e._diffDataGrid}supportsSearch(){return!0}}export class ContainmentPerspective extends Perspective{constructor(){super(Common.UIString.UIString("Containment"))}activate(e){e._splitWidget.setMainWidget(e._containmentWidget),e._splitWidget.setSidebarWidget(e._objectDetailsView),e._splitWidget.show(e._searchableView.element)}masterGrid(e){return e._containmentDataGrid}}export class AllocationPerspective extends Perspective{constructor(){super(Common.UIString.UIString("Allocation")),this._allocationSplitWidget=new UI.SplitWidget.SplitWidget(!1,!0,"heapSnapshotAllocationSplitViewState",200,200),this._allocationSplitWidget.setSidebarWidget(new UI.Widget.VBox)}activate(e){this._allocationSplitWidget.setMainWidget(e._allocationWidget),e._splitWidget.setMainWidget(e._constructorsWidget),e._splitWidget.setSidebarWidget(e._objectDetailsView);const t=new UI.Widget.VBox,i=document.createElement("div");i.classList.add("heap-snapshot-view-resizer");i.createChild("div","title").createChild("span").textContent=Common.UIString.UIString("Live objects"),this._allocationSplitWidget.hideDefaultResizer(),this._allocationSplitWidget.installResizer(i),t.element.appendChild(i),e._splitWidget.show(t.element),this._allocationSplitWidget.setSidebarWidget(t),this._allocationSplitWidget.show(e._searchableView.element),e._constructorsDataGrid.clear();const s=e._allocationDataGrid.selectedNode;s&&e._constructorsDataGrid.setAllocationNodeId(s.allocationNodeId())}deactivate(e){this._allocationSplitWidget.detach(),super.deactivate(e)}masterGrid(e){return e._allocationDataGrid}}export class StatisticsPerspective extends Perspective{constructor(){super(Common.UIString.UIString("Statistics"))}activate(e){e._statisticsView.show(e._searchableView.element)}masterGrid(e){return null}}export class HeapSnapshotProfileType extends ProfileType{constructor(e,t){super(e||HeapSnapshotProfileType.TypeId,t||ls`Heap snapshot`),SDK.SDKModel.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel,this),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel,SDK.HeapProfilerModel.Events.ResetProfiles,this._resetProfiles,this),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel,SDK.HeapProfilerModel.Events.AddHeapSnapshotChunk,this._addHeapSnapshotChunk,this),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel,SDK.HeapProfilerModel.Events.ReportHeapSnapshotProgress,this._reportHeapSnapshotProgress,this),this._treatGlobalObjectsAsRoots=Common.Settings.Settings.instance().createSetting("treatGlobalObjectsAsRoots",!0),this._customContent=null}modelAdded(e){e.enable()}modelRemoved(e){}getProfiles(){return super.getProfiles()}fileExtension(){return".heapsnapshot"}get buttonTooltip(){return Common.UIString.UIString("Take heap snapshot")}isInstantProfile(){return!0}buttonClicked(){return this._takeHeapSnapshot(),Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesHeapProfileTaken),!1}get treeItemTitle(){return Common.UIString.UIString("HEAP SNAPSHOTS")}get description(){return Common.UIString.UIString("Heap snapshot profiles show memory distribution among your page's JavaScript objects and related DOM nodes.")}customContent(){const e=UI.SettingsUI.createSettingCheckbox(ls`Treat global objects as roots (recommended, unchecking this exposes internal nodes and introduces excessive detail, but might help debugging cycles in retaining paths)`,this._treatGlobalObjectsAsRoots,!0);this._customContent=e;return Root.Runtime.experiments.isEnabled("showOptionToNotTreatGlobalObjectsAsRoots")?e:null}setCustomContentEnabled(e){this._customContent.checkboxElement.disabled=!e}createProfileLoadedFromFile(e){return new HeapProfileHeader(null,this,e)}async _takeHeapSnapshot(){if(this.profileBeingRecorded())return;const e=UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);if(!e)return;let t=new HeapProfileHeader(e,this);this.setProfileBeingRecorded(t),this.addProfile(t),t.updateStatus(Common.UIString.UIString("Snapshotting…")),await e.takeHeapSnapshot(!0,this._treatGlobalObjectsAsRoots.get()),t=this.profileBeingRecorded(),t.title=Common.UIString.UIString("Snapshot %d",t.uid),t._finishLoad(),this.setProfileBeingRecorded(null),this.dispatchEventToListeners(ProfileTypeEvents.ProfileComplete,t)}_addHeapSnapshotChunk(e){if(!this.profileBeingRecorded())return;const t=e.data;this.profileBeingRecorded().transferChunk(t)}_reportHeapSnapshotProgress(e){const t=this.profileBeingRecorded();if(!t)return;const i=e.data;t.updateStatus(Common.UIString.UIString("%.0f%%",i.done/i.total*100),!0),i.finished&&t._prepareToLoad()}_resetProfiles(e){const t=e.data;for(const e of this.getProfiles())e.heapProfilerModel()===t&&this.removeProfile(e)}_snapshotReceived(e){this.profileBeingRecorded()===e&&this.setProfileBeingRecorded(null),this.dispatchEventToListeners(HeapSnapshotProfileType.SnapshotReceived,e)}}HeapSnapshotProfileType.TypeId="HEAP",HeapSnapshotProfileType.SnapshotReceived="SnapshotReceived";export class TrackingHeapSnapshotProfileType extends HeapSnapshotProfileType{constructor(){super(TrackingHeapSnapshotProfileType.TypeId,ls`Allocation instrumentation on timeline`),this._recordAllocationStacksSetting=Common.Settings.Settings.instance().createSetting("recordAllocationStacks",!1),this._customContent=null}modelAdded(e){super.modelAdded(e),e.addEventListener(SDK.HeapProfilerModel.Events.HeapStatsUpdate,this._heapStatsUpdate,this),e.addEventListener(SDK.HeapProfilerModel.Events.LastSeenObjectId,this._lastSeenObjectId,this)}modelRemoved(e){super.modelRemoved(e),e.removeEventListener(SDK.HeapProfilerModel.Events.HeapStatsUpdate,this._heapStatsUpdate,this),e.removeEventListener(SDK.HeapProfilerModel.Events.LastSeenObjectId,this._lastSeenObjectId,this)}_heapStatsUpdate(e){if(!this._profileSamples)return;const t=e.data;let i;for(let e=0;e<t.length;e+=3){i=t[e];const s=t[e+2];this._profileSamples.sizes[i]=s,this._profileSamples.max[i]||(this._profileSamples.max[i]=s)}}_lastSeenObjectId(e){const t=this._profileSamples;if(!t)return;const i=e.data,s=Math.max(t.ids.length,t.max.length-1);t.ids[s]=i.lastSeenObjectId,t.max[s]||(t.max[s]=0,t.sizes[s]=0),t.timestamps[s]=i.timestamp,t.totalTime<i.timestamp-t.timestamps[0]&&(t.totalTime*=2),this.dispatchEventToListeners(TrackingHeapSnapshotProfileType.HeapStatsUpdate,this._profileSamples),this.profileBeingRecorded().updateStatus(null,!0)}hasTemporaryView(){return!0}get buttonTooltip(){return this._recording?ls`Stop recording heap profile`:ls`Start recording heap profile`}isInstantProfile(){return!1}buttonClicked(){return this._toggleRecording()}_startRecordingProfile(){if(this.profileBeingRecorded())return;const e=this._addNewProfile();e&&e.startTrackingHeapObjects(this._recordAllocationStacksSetting.get())}customContent(){const e=UI.SettingsUI.createSettingCheckbox(ls`Record allocation stacks (extra performance overhead)`,this._recordAllocationStacksSetting,!0);return this._customContent=e,e}setCustomContentEnabled(e){this._customContent.checkboxElement.disabled=!e}_addNewProfile(){const e=UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);return e?(this.setProfileBeingRecorded(new HeapProfileHeader(e,this,void 0)),this._profileSamples=new Samples,this.profileBeingRecorded()._profileSamples=this._profileSamples,this._recording=!0,this.addProfile(this.profileBeingRecorded()),this.profileBeingRecorded().updateStatus(Common.UIString.UIString("Recording…")),this.dispatchEventToListeners(TrackingHeapSnapshotProfileType.TrackingStarted),e):null}async _stopRecordingProfile(){this.profileBeingRecorded().updateStatus(Common.UIString.UIString("Snapshotting…"));const e=this.profileBeingRecorded().heapProfilerModel().stopTrackingHeapObjects(!0);this._recording=!1,this.dispatchEventToListeners(TrackingHeapSnapshotProfileType.TrackingStopped),await e;const t=this.profileBeingRecorded();t&&(t._finishLoad(),this._profileSamples=null,this.setProfileBeingRecorded(null),this.dispatchEventToListeners(ProfileTypeEvents.ProfileComplete,t))}_toggleRecording(){return this._recording?this._stopRecordingProfile():this._startRecordingProfile(),this._recording}fileExtension(){return".heaptimeline"}get treeItemTitle(){return ls`ALLOCATION TIMELINES`}get description(){return ls`
        Allocation timelines show instrumented JavaScript memory allocations over time.
        Once profile is recorded you can select a time interval to see objects that
        were allocated within it and still alive by the end of recording.
        Use this profile type to isolate memory leaks.`}_resetProfiles(e){const t=this._recording;this.setProfileBeingRecorded(null),super._resetProfiles(e),this._profileSamples=null,t&&this._addNewProfile()}profileBeingRecordedRemoved(){this._stopRecordingProfile(),this._profileSamples=null}}TrackingHeapSnapshotProfileType.TypeId="HEAP-RECORD",TrackingHeapSnapshotProfileType.HeapStatsUpdate="HeapStatsUpdate",TrackingHeapSnapshotProfileType.TrackingStarted="TrackingStarted",TrackingHeapSnapshotProfileType.TrackingStopped="TrackingStopped";export class HeapProfileHeader extends ProfileHeader{constructor(e,t,i){super(t,i||Common.UIString.UIString("Snapshot %d",t.nextProfileUid())),this._heapProfilerModel=e,this.maxJSObjectId=-1,this._workerProxy=null,this._receiver=null,this._snapshotProxy=null,this._loadPromise=new Promise(e=>{this._fulfillLoad=e}),this._totalNumberOfChunks=0,this._bufferedWriter=null,this._tempFile=null}heapProfilerModel(){return this._heapProfilerModel}getLocation(e){return this._snapshotProxy.getLocation(e)}createSidebarTreeElement(e){return new ProfileSidebarTreeElement(e,this,"heap-snapshot-sidebar-tree-item")}createView(e){return new HeapSnapshotView(e,this)}_prepareToLoad(){console.assert(!this._receiver,"Already loading"),this._setupWorker(),this.updateStatus(Common.UIString.UIString("Loading…"),!0)}_finishLoad(){this._wasDisposed||this._receiver.close(),this._bufferedWriter&&this._didWriteToTempFile(this._bufferedWriter)}_didWriteToTempFile(e){this._wasDisposed?e&&e.remove():(this._tempFile=e,e||(this._failedToCreateTempFile=!0),this._onTempFileReady&&(this._onTempFileReady(),this._onTempFileReady=null))}_setupWorker(){console.assert(!this._workerProxy,"HeapSnapshotWorkerProxy already exists"),this._workerProxy=new HeapSnapshotWorkerProxy(this._handleWorkerEvent.bind(this)),this._workerProxy.addEventListener(HeapSnapshotWorkerProxy.Events.Wait,(function(e){this.updateStatus(null,e.data)}),this),this._receiver=this._workerProxy.createLoader(this.uid,this._snapshotReceived.bind(this))}_handleWorkerEvent(e,t){if(HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.BrokenSnapshot===e){const e=t;return void Common.Console.Console.instance().error(e)}if(HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.Update!==e)return;const i=t,s=Common.UIString.deserializeUIString(i);this.updateStatus(ls(s.messageParts,s.values))}dispose(){this._workerProxy&&this._workerProxy.dispose(),this.removeTempFile(),this._wasDisposed=!0}_didCompleteSnapshotTransfer(){this._snapshotProxy&&this.updateStatus(Platform.NumberUtilities.bytesToString(this._snapshotProxy.totalSize),!1)}transferChunk(e){this._bufferedWriter||(this._bufferedWriter=new Bindings.TempFile.TempFile),this._bufferedWriter.write([e]),++this._totalNumberOfChunks,this._receiver.write(e)}_snapshotReceived(e){this._wasDisposed||(this._receiver=null,this._snapshotProxy=e,this.maxJSObjectId=e.maxJSObjectId(),this._didCompleteSnapshotTransfer(),this._workerProxy.startCheckingForLongRunningCalls(),this.notifySnapshotReceived())}notifySnapshotReceived(){this._fulfillLoad(this._snapshotProxy),this.profileType()._snapshotReceived(this),this.canSaveToFile()&&this.dispatchEventToListeners(ProfileHeaderEvents.ProfileReceived)}canSaveToFile(){return!this.fromFile()&&!!this._snapshotProxy}saveToFile(){const e=new Bindings.FileUtils.FileOutputStream;this._fileName=this._fileName||"Heap-"+Platform.DateUtilities.toISO8601Compact(new Date)+this.profileType().fileExtension(),e.open(this._fileName).then(async function t(i){if(!i)return;if(this._failedToCreateTempFile)return Common.Console.Console.instance().error("Failed to open temp file with heap snapshot"),void e.close();if(this._tempFile){const t=await this._tempFile.copyToOutputStream(e,this._onChunkTransferred.bind(this));return t&&Common.Console.Console.instance().error("Failed to read heap snapshot from temp file: "+t.message),void this._didCompleteSnapshotTransfer()}this._onTempFileReady=t.bind(this,i),this._updateSaveProgress(0,1)}.bind(this))}_onChunkTransferred(e){this._updateSaveProgress(e.loadedSize(),e.fileSize())}_updateSaveProgress(e,t){const i=(100*(t&&e/t)).toFixed(0);this.updateStatus(Common.UIString.UIString("Saving… %d%%",i))}async loadFromFile(e){this.updateStatus(Common.UIString.UIString("Loading…"),!0),this._setupWorker();const t=new Bindings.FileUtils.ChunkedFileReader(e,1e7),i=await t.read(this._receiver);return i||this.updateStatus(t.error().message),i?null:t.error()}}export class HeapSnapshotStatisticsView extends UI.Widget.VBox{constructor(){super(),this.element.classList.add("heap-snapshot-statistics-view"),this._pieChart=new PerfUI.PieChart.PieChart({chartName:ls`Heap memory usage`,size:150,formatter:HeapSnapshotStatisticsView._valueFormatter,showLegend:!0}),this._pieChart.element.classList.add("heap-snapshot-stats-pie-chart"),this.element.appendChild(this._pieChart.element)}static _valueFormatter(e){return Common.UIString.UIString("%s KB",Number.withThousandsSeparator(Math.round(e/1024)))}setTotal(e){this._pieChart.initializeWithTotal(e)}addRecord(e,t,i){this._pieChart.addSlice(e,i,t)}}export class HeapAllocationStackView extends UI.Widget.Widget{constructor(e){super(),this._heapProfilerModel=e,this._linkifier=new Components.Linkifier.Linkifier,this._frameElements=[]}_onContextMenu(e,t){const i=new UI.ContextMenu.ContextMenu(t);i.containsTarget(e)||i.appendApplicableItems(e),i.show(),t.consume(!0)}_onStackViewKeydown(e){const t=e.target;if(!t)return;if(isEnterKey(e)){const i=t._linkElement;if(!i)return;return void(Components.Linkifier.Linkifier.invokeFirstAction(i)&&e.consume(!0))}let i;if("ArrowUp"===e.key)i=!1;else{if("ArrowDown"!==e.key)return;i=!0}const s=this._frameElements.indexOf(t);if(-1===s)return;const r=i?s+1:s-1;if(r<0||r>=this._frameElements.length)return;const a=this._frameElements[r];a.tabIndex=0,t.tabIndex=-1,a.focus(),e.consume(!0)}async setAllocatedObject(e,t){this.clear();const i=await e.allocationStack(t);if(!i){return void this.element.createChild("div","no-heap-allocation-stack").createTextChild(Common.UIString.UIString("Stack was not recorded for this object because it had been allocated before this profile recording started."))}const s=this.element.createChild("div","heap-allocation-stack");s.addEventListener("keydown",this._onStackViewKeydown.bind(this),!1);for(const e of i){const t=s.createChild("div","stack-frame");this._frameElements.push(t),t.tabIndex=-1;if(t.createChild("div").textContent=UI.UIUtils.beautifyFunctionName(e.functionName),!e.scriptId)continue;const i=this._heapProfilerModel?this._heapProfilerModel.target():null,r={columnNumber:e.column-1},a=this._linkifier.linkifyScriptLocation(i,String(e.scriptId),e.scriptName,e.line-1,r);t.appendChild(a),t._linkElement=a,t.addEventListener("contextmenu",this._onContextMenu.bind(this,a))}this._frameElements[0].tabIndex=0}clear(){this.element.removeChildren(),this._frameElements=[],this._linkifier.reset()}}