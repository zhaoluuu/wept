import*as SDK from"../sdk/sdk.js";export class WebAudioModel extends SDK.SDKModel.SDKModel{constructor(e){super(e),this._enabled=!1,this._agent=e.webAudioAgent(),e.registerWebAudioDispatcher(this),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.ResourceTreeModel.ResourceTreeModel,SDK.ResourceTreeModel.Events.FrameNavigated,this._flushContexts,this)}_flushContexts(){this.dispatchEventToListeners(Events.ModelReset)}suspendModel(){return this.dispatchEventToListeners(Events.ModelSuspend),this._agent.disable()}resumeModel(){return this._enabled?this._agent.enable():Promise.resolve()}ensureEnabled(){this._enabled||(this._agent.enable(),this._enabled=!0)}contextCreated(e){this.dispatchEventToListeners(Events.ContextCreated,e)}contextWillBeDestroyed(e){this.dispatchEventToListeners(Events.ContextDestroyed,e)}contextChanged(e){this.dispatchEventToListeners(Events.ContextChanged,e)}audioListenerCreated(e){this.dispatchEventToListeners(Events.AudioListenerCreated,e)}audioListenerWillBeDestroyed(e,t){this.dispatchEventToListeners(Events.AudioListenerWillBeDestroyed,{contextId:e,listenerId:t})}audioNodeCreated(e){this.dispatchEventToListeners(Events.AudioNodeCreated,e)}audioNodeWillBeDestroyed(e,t){this.dispatchEventToListeners(Events.AudioNodeWillBeDestroyed,{contextId:e,nodeId:t})}audioParamCreated(e){this.dispatchEventToListeners(Events.AudioParamCreated,e)}audioParamWillBeDestroyed(e,t,d){this.dispatchEventToListeners(Events.AudioParamWillBeDestroyed,{contextId:e,paramId:d})}nodesConnected(e,t,d,o,s){this.dispatchEventToListeners(Events.NodesConnected,{contextId:e,sourceId:t,destinationId:d,sourceOutputIndex:o,destinationInputIndex:s})}nodesDisconnected(e,t,d,o,s){this.dispatchEventToListeners(Events.NodesDisconnected,{contextId:e,sourceId:t,destinationId:d,sourceOutputIndex:o,destinationInputIndex:s})}nodeParamConnected(e,t,d,o){this.dispatchEventToListeners(Events.NodeParamConnected,{contextId:e,sourceId:t,destinationId:d,sourceOutputIndex:o})}nodeParamDisconnected(e,t,d,o){this.dispatchEventToListeners(Events.NodeParamDisconnected,{contextId:e,sourceId:t,destinationId:d,sourceOutputIndex:o})}async requestRealtimeData(e){return await this._agent.getRealtimeData(e)}}SDK.SDKModel.SDKModel.register(WebAudioModel,SDK.SDKModel.Capability.DOM,!1);export const Events={ContextCreated:Symbol("ContextCreated"),ContextDestroyed:Symbol("ContextDestroyed"),ContextChanged:Symbol("ContextChanged"),ModelReset:Symbol("ModelReset"),ModelSuspend:Symbol("ModelSuspend"),AudioListenerCreated:Symbol("AudioListenerCreated"),AudioListenerWillBeDestroyed:Symbol("AudioListenerWillBeDestroyed"),AudioNodeCreated:Symbol("AudioNodeCreated"),AudioNodeWillBeDestroyed:Symbol("AudioNodeWillBeDestroyed"),AudioParamCreated:Symbol("AudioParamCreated"),AudioParamWillBeDestroyed:Symbol("AudioParamWillBeDestroyed"),NodesConnected:Symbol("NodesConnected"),NodesDisconnected:Symbol("NodesDisconnected"),NodeParamConnected:Symbol("NodeParamConnected"),NodeParamDisconnected:Symbol("NodeParamDisconnected")};