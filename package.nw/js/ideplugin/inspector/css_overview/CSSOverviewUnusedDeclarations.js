export class CSSOverviewUnusedDeclarations{static _add(t,e,i){const a=t.get(e)||[];a.push(i),t.set(e,a)}static checkForUnusedPositionValues(t,e,i,a,n,l,o,d){if("static"===i[a]){if("auto"!==i[n]){const a=ls`Top applied to a statically positioned element`;this._add(t,a,{declaration:"top: "+i[n],nodeId:e})}if("auto"!==i[l]){const a=ls`Left applied to a statically positioned element`;this._add(t,a,{declaration:"left: "+i[l],nodeId:e})}if("auto"!==i[o]){const a=ls`Right applied to a statically positioned element`;this._add(t,a,{declaration:"right: "+i[o],nodeId:e})}if("auto"!==i[d]){const a=ls`Bottom applied to a statically positioned element`;this._add(t,a,{declaration:"bottom: "+i[d],nodeId:e})}}}static checkForUnusedWidthAndHeightValues(t,e,i,a,n,l){if("inline"===i[a]){if("auto"!==i[n]){const a=ls`Width applied to an inline element`;this._add(t,a,{declaration:"width: "+i[n],nodeId:e})}if("auto"!==i[l]){const a=ls`Height applied to an inline element`;this._add(t,a,{declaration:"height: "+i[l],nodeId:e})}}}static checkForInvalidVerticalAlignment(t,e,i,a,n){if(i[a]&&"inline"!==i[a]&&!i[a].startsWith("table")&&"baseline"!==i[n]){const a=ls`Vertical alignment applied to element which is neither inline nor table-cell`;this._add(t,a,{declaration:"vertical-align: "+i[n],nodeId:e})}}}