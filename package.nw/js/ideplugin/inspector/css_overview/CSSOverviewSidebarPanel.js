import*as UI from"../ui/ui.js";export class CSSOverviewSidebarPanel extends UI.Widget.VBox{static get ITEM_CLASS_NAME(){return"overview-sidebar-panel-item"}static get SELECTED(){return"selected"}constructor(){super(!0),this.registerRequiredCSS("css_overview/cssOverviewSidebarPanel.css"),this.contentElement.classList.add("overview-sidebar-panel"),this.contentElement.addEventListener("click",this._onItemClick.bind(this));const e=new UI.Toolbar.ToolbarButton(ls`Clear overview`,"largeicon-clear");e.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._reset,this);const t=this.contentElement.createChild("div","overview-toolbar");new UI.Toolbar.Toolbar("",t).appendToolbarItem(e)}addItem(e,t){const s=this.contentElement.createChild("div",CSSOverviewSidebarPanel.ITEM_CLASS_NAME);s.textContent=e,s.dataset.id=t}_reset(){this.dispatchEventToListeners(SidebarEvents.Reset)}_deselectAllItems(){const e=this.contentElement.querySelectorAll("."+CSSOverviewSidebarPanel.ITEM_CLASS_NAME);for(const t of e)t.classList.remove(CSSOverviewSidebarPanel.SELECTED)}_onItemClick(e){const t=e.path[0];if(!t.classList.contains(CSSOverviewSidebarPanel.ITEM_CLASS_NAME))return;const{id:s}=t.dataset;this.select(s),this.dispatchEventToListeners(SidebarEvents.ItemSelected,s)}select(e){const t=this.contentElement.querySelector(`[data-id=${CSS.escape(e)}]`);t&&(t.classList.contains(CSSOverviewSidebarPanel.SELECTED)||(this._deselectAllItems(),t.classList.add(CSSOverviewSidebarPanel.SELECTED)))}}export const SidebarEvents={ItemSelected:Symbol("ItemSelected"),Reset:Symbol("Reset")};