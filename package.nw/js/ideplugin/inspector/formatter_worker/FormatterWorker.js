import*as Platform from"../platform/platform.js";import*as Root from"../root/root.js";import*as Acorn from"../third_party/acorn/acorn.js";import{AcornTokenizer,ECMA_VERSION}from"./AcornTokenizer.js";import{CSSFormatter}from"./CSSFormatter.js";import{parseCSS}from"./CSSRuleParser.js";import{ESTreeWalker}from"./ESTreeWalker.js";import{FormattedContentBuilder}from"./FormattedContentBuilder.js";import{HTMLFormatter}from"./HTMLFormatter.js";import{IdentityFormatter}from"./IdentityFormatter.js";import{JavaScriptFormatter}from"./JavaScriptFormatter.js";import{javaScriptOutline}from"./JavaScriptOutline.js";export function createTokenizer(e){const t=CodeMirror.getMode({indentUnit:2},e),r=CodeMirror.startState(t);if(!t)throw new Error("Could not find CodeMirror mode for MimeType: "+e);if(!t.token)throw new Error("Could not find CodeMirror mode with token method: "+e);return(e,n)=>{const o=new CodeMirror.StringStream([e],0);for(;!o.eol();){const e=t.token(o,r),s=o.current();if(n(s,e,o.start,o.start+s.length)===AbortTokenization)return;o.start=o.pos}}}export const AbortTokenization={};self.onmessage=function(e){const t=e.data.method,r=e.data.params;if(t)switch(t){case"format":format(r.mimeType,r.content,r.indentString);break;case"parseCSS":parseCSS(r.content);break;case"parseSCSS":FormatterWorkerContentParser.parse(r.content,"text/x-scss");break;case"javaScriptOutline":javaScriptOutline(r.content);break;case"javaScriptIdentifiers":javaScriptIdentifiers(r.content);break;case"evaluatableJavaScriptSubstring":evaluatableJavaScriptSubstring(r.content);break;case"findLastExpression":postMessage(findLastExpression(r.content));break;case"findLastFunctionCall":postMessage(findLastFunctionCall(r.content));break;case"argumentsList":postMessage(argumentsList(r.content));break;default:console.error("Unsupport method name: "+t)}};export function evaluatableJavaScriptSubstring(e){const t=Acorn.tokenizer(e,{ecmaVersion:ECMA_VERSION});let r="";try{let n=t.getToken();for(;n.type!==Acorn.tokTypes.eof&&AcornTokenizer.punctuator(n);)n=t.getToken();const o=n.start;let s=n.end,a=0;for(;n.type!==Acorn.tokTypes.eof;){const e=AcornTokenizer.identifier(n),r=AcornTokenizer.keyword(n,"this"),o=n.type===Acorn.tokTypes.string;if(!r&&!e&&!o)break;for(s=n.end,n=t.getToken();AcornTokenizer.punctuator(n,".[]");)AcornTokenizer.punctuator(n,"[")&&a++,AcornTokenizer.punctuator(n,"]")&&(s=a>0?n.end:s,a--),n=t.getToken()}r=e.substring(o,s)}catch(e){console.error(e)}postMessage(r)}export function javaScriptIdentifiers(e){let t=null;try{t=Acorn.parse(e,{ecmaVersion:ECMA_VERSION,ranges:!1})}catch(e){}const r=[],n=new ESTreeWalker((function(e){if(o(e))return e.id&&r.push(e.id),ESTreeWalker.SkipSubtree;if("Identifier"!==e.type)return;if(e.parent&&"MemberExpression"===e.parent.type){const t=e.parent;if(t.property===e&&!t.computed)return}return void r.push(e)}));function o(e){return"FunctionDeclaration"===e.type||"FunctionExpression"===e.type||"ArrowFunctionExpression"===e.type}if(!t||"Program"!==t.type||1!==t.body.length||!o(t.body[0]))return void postMessage([]);const s=t.body[0];for(const e of s.params)n.walk(e);n.walk(s.body);const a=r.map(e=>({name:"name"in e&&e.name,offset:e.start}));postMessage(a)}export function format(e,t,r){const n={},o=new FormattedContentBuilder(r=r||"    "),s=Platform.StringUtilities.findLineEndingIndexes(t);try{switch(e){case"text/html":new HTMLFormatter(o).format(t,s);break;case"text/css":new CSSFormatter(o).format(t,s,0,t.length);break;case"text/javascript":new JavaScriptFormatter(o).format(t,s,0,t.length);break;default:new IdentityFormatter(o).format(t,s,0,t.length)}n.mapping=o.mapping,n.content=o.content()}catch(e){console.error(e),n.mapping={original:[0],formatted:[0]},n.content=t}postMessage(n)}export function findLastFunctionCall(e){if(e.length>1e4)return null;try{const t=Acorn.tokenizer(e,{ecmaVersion:ECMA_VERSION});for(;t.getToken().type!==Acorn.tokTypes.eof;);}catch(e){return null}const t=_lastCompleteExpression(e,"000)",new Set(["CallExpression","NewExpression"]));if(!t)return null;if("CallExpression"!==t.baseNode.type&&"NewExpression"!==t.baseNode.type)return null;const r=t.baseNode.callee;let n="";const o="Identifier"===r.type?r:r.property;o&&("Identifier"===o.type?n=o.name:"Literal"===o.type&&(n=o.value));const s=t.baseNode.arguments.length-1,a=`(${t.baseExpression.substring(r.start-t.baseNode.start,r.end-t.baseNode.start)})`;let i="(function(){return this})()";if("MemberExpression"===r.type){const e=r.object;i=t.baseExpression.substring(e.start-t.baseNode.start,e.end-t.baseNode.start)}return{baseExpression:a,receiver:i,argumentIndex:s,functionName:n}}export function argumentsList(e){if(e.length>1e4)return[];let t=null;try{t=Acorn.parse(`(${e})`,{ecmaVersion:ECMA_VERSION})}catch(e){}if(!t)try{t=Acorn.parse(`({${e}})`,{ecmaVersion:ECMA_VERSION})}catch(e){}if(!(t&&"body"in t&&Array.isArray(t.body)&&t.body[0]&&"expression"in t.body[0]))return[];const r=t.body[0].expression;let n=null;switch(r.type){case"ClassExpression":{if(!r.body.body)break;const e=r.body.body.find(e=>"constructor"===e.kind);e&&(n=e.value.params);break}case"ObjectExpression":if(!r.properties[0]||!("value"in r.properties[0])||!("params"in r.properties[0].value))break;n=r.properties[0].value.params;break;case"FunctionExpression":case"ArrowFunctionExpression":n=r.params}return n?n.map((function e(t){switch(t.type){case"Identifier":return t.name;case"AssignmentPattern":return"?"+e(t.left);case"ObjectPattern":return"obj";case"ArrayPattern":return"arr";case"RestElement":return"..."+e(t.argument)}return"?"})):[]}export function findLastExpression(e){if(e.length>1e4)return null;try{const t=Acorn.tokenizer(e,{ecmaVersion:ECMA_VERSION});for(;t.getToken().type!==Acorn.tokTypes.eof;);}catch(e){return null}try{Acorn.parse(e+".DEVTOOLS",{ecmaVersion:ECMA_VERSION})}catch(t){if(t.message.startsWith("Unexpected token")&&t.pos===e.length)return null}const t=_lastCompleteExpression(e,".DEVTOOLS",new Set(["MemberExpression","Identifier"]));return t?t.baseExpression:null}export function _lastCompleteExpression(e,t,r){let n=null,o="";for(let r=0;r<e.length;r++)try{o="{"===e[r]?`(${e.substring(r)})${t}`:`${e.substring(r)}${t}`,n=Acorn.parse(o,{ecmaVersion:ECMA_VERSION});break}catch(e){}if(!n)return null;const s=n.end;let a=null;if(new ESTreeWalker(e=>{if(a||e.end<s)return ESTreeWalker.SkipSubtree;r.has(e.type)&&(a=e)}).walk(n),!a)return null;let i=o.substring(a.start,o.length-t.length);return i.startsWith("{")&&(i=`(${i})`),{baseNode:a,baseExpression:i}}export class FormatterWorkerContentParser{parse(e){throw new Error("Not implemented yet")}}FormatterWorkerContentParser.parse=function(e,t){const r=Root.Runtime.Runtime.instance().extensions(FormatterWorkerContentParser).find((function(e){const r=e.descriptor();return"mimeType"in r&&r.mimeType===t}));console.assert(!!r),r&&r.instance().then(t=>t.parse(e)).catch(e=>{console.error(e)}).then(postMessage)},Root.Runtime.Runtime.queryParam("test")&&(console.error=()=>{});