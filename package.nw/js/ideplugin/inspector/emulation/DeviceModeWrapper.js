import*as Common from"../common/common.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{DeviceModeModel}from"./DeviceModeModel.js";import{DeviceModeView}from"./DeviceModeView.js";import{InspectedPagePlaceholder}from"./InspectedPagePlaceholder.js";export class DeviceModeWrapper extends UI.Widget.VBox{constructor(e){super(),DeviceModeView.wrapperInstance=this,this._inspectedPagePlaceholder=e,this._deviceModeView=null,this._toggleDeviceModeAction=UI.ActionRegistry.ActionRegistry.instance().action("emulation.toggle-device-mode");const t=self.singleton(DeviceModeModel);this._showDeviceModeSetting=t.enabledSetting(),this._showDeviceModeSetting.setRequiresUserAction(!!Root.Runtime.queryParam("hasOtherClients")),this._showDeviceModeSetting.addChangeListener(this._update.bind(this,!1)),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.OverlayModel.OverlayModel,SDK.OverlayModel.Events.ScreenshotRequested,this._screenshotRequestedFromOverlay,this),this._update(!0)}_toggleDeviceMode(){this._showDeviceModeSetting.set(!this._showDeviceModeSetting.get())}_captureScreenshot(e,t){return this._deviceModeView||(this._deviceModeView=new DeviceModeView),this._deviceModeView.setNonEmulatedAvailableSize(this._inspectedPagePlaceholder.element),e?this._deviceModeView.captureFullSizeScreenshot():t?this._deviceModeView.captureAreaScreenshot(t):this._deviceModeView.captureScreenshot(),!0}_screenshotRequestedFromOverlay(e){const t=e.data;this._captureScreenshot(!1,t)}_update(e){if(this._toggleDeviceModeAction.setToggled(this._showDeviceModeSetting.get()),!e){const e=this._deviceModeView&&this._deviceModeView.isShowing();if(this._showDeviceModeSetting.get()===e)return}this._showDeviceModeSetting.get()?(this._deviceModeView||(this._deviceModeView=new DeviceModeView),this._deviceModeView.show(this.element),this._inspectedPagePlaceholder.clearMinimumSize(),this._inspectedPagePlaceholder.show(this._deviceModeView.element)):(this._deviceModeView&&(this._deviceModeView.exitHingeMode(),this._deviceModeView.detach()),this._inspectedPagePlaceholder.restoreMinimumSize(),this._inspectedPagePlaceholder.show(this.element))}}export class ActionDelegate{handleAction(e,t){if(DeviceModeView.wrapperInstance)switch(t){case"emulation.capture-screenshot":return DeviceModeView.wrapperInstance._captureScreenshot();case"emulation.capture-node-screenshot":{const e=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);if(!e)return!0;return async function(){const t=await e.resolveToObject(),i=await t.callFunction((function(){const e=this.getBoundingClientRect(),t=this.ownerDocument.documentElement.getBoundingClientRect();return JSON.stringify({x:e.left-t.left,y:e.top-t.top,width:e.width,height:e.height,scale:1})})),o=JSON.parse(i.object.value),s=await e.domModel().target().pageAgent().invoke_getLayoutMetrics({}),c=!s[ProtocolClient.InspectorBackend.ProtocolError]&&s.visualViewport.zoom||1;o.x*=c,o.y*=c,o.width*=c,o.height*=c,DeviceModeView.wrapperInstance._captureScreenshot(!1,o)}(),!0}case"emulation.capture-full-height-screenshot":return DeviceModeView.wrapperInstance._captureScreenshot(!0);case"emulation.toggle-device-mode":return DeviceModeView.wrapperInstance._toggleDeviceMode(),!0}return!1}}