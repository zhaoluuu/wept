import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{MaxDeviceSize,MinDeviceSize}from"./DeviceModeModel.js";export class EmulatedDevice{constructor(){this.title="",this.type=Type.Unknown,this.vertical={width:0,height:0,outlineInsets:null,outlineImage:null,hinge:null},this.horizontal={width:0,height:0,outlineInsets:null,outlineImage:null,hinge:null},this.deviceScaleFactor=1,this.capabilities=[Capability.Touch,Capability.Mobile],this.userAgent="",this.userAgentMetadata=null,this.modes=[],this.isDualScreen=!1,this.verticalSpanned={width:0,height:0,outlineInsets:null,outlineImage:null,hinge:null},this.horizontalSpanned={width:0,height:0,outlineInsets:null,outlineImage:null,hinge:null},this._show=_Show.Default,this._showByDefault=!0,this._extension=null}static fromJSONV1(e){try{function t(e,t,i,n){if("object"!=typeof e||null===e||!e.hasOwnProperty(t)){if(void 0!==n)return n;throw new Error("Emulated device is missing required property '"+t+"'")}const o=e[t];if(typeof o!==i||null===o)throw new Error("Emulated device property '"+t+"' has wrong type '"+typeof o+"'");return o}function i(e,i){const n=t(e,i,"number");if(n!==Math.abs(n))throw new Error("Emulated device value '"+i+"' must be integer");return n}function n(e){return new UI.Geometry.Insets(i(e,"left"),i(e,"top"),i(e,"right"),i(e,"bottom"))}function o(e){const n={};if(n.r=i(e,"r"),n.r<0||n.r>255)throw new Error("color has wrong r value: "+n.r);if(n.g=i(e,"g"),n.g<0||n.g>255)throw new Error("color has wrong g value: "+n.g);if(n.b=i(e,"b"),n.b<0||n.b>255)throw new Error("color has wrong b value: "+n.b);if(n.a=t(e,"a","number"),n.a<0||n.a>1)throw new Error("color has wrong a value: "+n.a);return n}function s(e){const s={};if(s.width=i(e,"width"),s.width<0||s.width>MaxDeviceSize||s.width<MinDeviceSize)throw new Error("Emulated device has wrong width: "+s.width);if(s.height=i(e,"height"),s.height<0||s.height>MaxDeviceSize||s.height<MinDeviceSize)throw new Error("Emulated device has wrong height: "+s.height);const r=t(e.outline,"insets","object",null);if(r){if(s.outlineInsets=n(r),s.outlineInsets.left<0||s.outlineInsets.top<0)throw new Error("Emulated device has wrong outline insets");s.outlineImage=t(e.outline,"image","string")}return e.hinge&&(s.hinge=function(e){const t={};if(t.width=i(e,"width"),t.width<0||t.width>MaxDeviceSize)throw new Error("Emulated device has wrong hinge width: "+t.width);if(t.height=i(e,"height"),t.height<0||t.height>MaxDeviceSize)throw new Error("Emulated device has wrong hinge height: "+t.height);if(t.x=i(e,"x"),t.x<0||t.x>MaxDeviceSize)throw new Error("Emulated device has wrong x offset: "+t.height);if(t.y=i(e,"y"),t.x<0||t.x>MaxDeviceSize)throw new Error("Emulated device has wrong y offset: "+t.height);return e.contentColor&&(t.contentColor=o(e.contentColor)),e.outlineColor&&(t.outlineColor=o(e.outlineColor)),t}(t(e,"hinge","object",void 0))),s}const r=new EmulatedDevice;r.title=t(e,"title","string"),r.type=t(e,"type","string");const a=t(e,"user-agent","string");r.userAgent=SDK.NetworkManager.MultitargetNetworkManager.patchUserAgentWithChromeVersion(a);const l=t(e,"user-agent-metadata","object",null);l&&(void 0===l.brands&&(l.brands=SDK.NetworkManager.MultitargetNetworkManager.getChromeBrands()),void 0===l.fullVersion&&(l.fullVersion=SDK.NetworkManager.MultitargetNetworkManager.getChromeVersion())),r.userAgentMetadata=l;const h=t(e,"capabilities","object",[]);if(!Array.isArray(h))throw new Error("Emulated device capabilities must be an array");r.capabilities=[];for(let e=0;e<h.length;++e){if("string"!=typeof h[e])throw new Error("Emulated device capability must be a string");r.capabilities.push(h[e])}if(r.deviceScaleFactor=t(e.screen,"device-pixel-ratio","number"),r.deviceScaleFactor<0||r.deviceScaleFactor>100)throw new Error("Emulated device has wrong deviceScaleFactor: "+r.deviceScaleFactor);if(r.vertical=s(t(e.screen,"vertical","object")),r.horizontal=s(t(e.screen,"horizontal","object")),r.isDualScreen=t(e,"dual-screen","boolean",!1),r.isDualScreen&&(r.verticalSpanned=s(t(e.screen,"vertical-spanned","object",null)),r.horizontalSpanned=s(t(e.screen,"horizontal-spanned","object",null))),r.isDualScreen&&(!r.verticalSpanned||!r.horizontalSpanned))throw new Error("Emulated device '"+r.title+"'has dual screen without spanned orientations");const c=t(e,"modes","object",[{title:"default",orientation:"vertical"},{title:"default",orientation:"horizontal"}]);if(!Array.isArray(c))throw new Error("Emulated device modes must be an array");r.modes=[];for(let e=0;e<c.length;++e){const i={};if(i.title=t(c[e],"title","string"),i.orientation=t(c[e],"orientation","string"),i.orientation!==Vertical&&i.orientation!==Horizontal&&i.orientation!==VerticalSpanned&&i.orientation!==HorizontalSpanned)throw new Error("Emulated device mode has wrong orientation '"+i.orientation+"'");const o=r.orientationByName(i.orientation);if(i.insets=n(t(c[e],"insets","object",{left:0,top:0,right:0,bottom:0})),i.insets.top<0||i.insets.left<0||i.insets.right<0||i.insets.bottom<0||i.insets.top+i.insets.bottom>o.height||i.insets.left+i.insets.right>o.width)throw new Error("Emulated device mode '"+i.title+"'has wrong mode insets");i.image=t(c[e],"image","string",null),r.modes.push(i)}return r._showByDefault=t(e,"show-by-default","boolean",void 0),r._show=t(e,"show","string",_Show.Default),r}catch(e){return null}}static deviceComparator(e,t){const i=e._extension&&e._extension.descriptor().order||-1,n=t._extension&&t._extension.descriptor().order||-1;return i>n?1:n>i||e.title<t.title?-1:e.title>t.title?1:0}extension(){return this._extension}setExtension(e){this._extension=e}modesForOrientation(e){const t=[];for(let i=0;i<this.modes.length;i++)this.modes[i].orientation===e&&t.push(this.modes[i]);return t}getSpanPartner(e){switch(e.orientation){case Vertical:return this.modesForOrientation(VerticalSpanned)[0];case Horizontal:return this.modesForOrientation(HorizontalSpanned)[0];case VerticalSpanned:return this.modesForOrientation(Vertical)[0];default:return this.modesForOrientation(Horizontal)[0]}}getRotationPartner(e){switch(e.orientation){case HorizontalSpanned:return this.modesForOrientation(VerticalSpanned)[0];case VerticalSpanned:return this.modesForOrientation(HorizontalSpanned)[0];case Horizontal:return this.modesForOrientation(Vertical)[0];default:return this.modesForOrientation(Horizontal)[0]}}_toJSON(){const e={};e.title=this.title,e.type=this.type,e["user-agent"]=this.userAgent,e.capabilities=this.capabilities,e.screen={},e.screen["device-pixel-ratio"]=this.deviceScaleFactor,e.screen.vertical=this._orientationToJSON(this.vertical),e.screen.horizontal=this._orientationToJSON(this.horizontal),this.isDualScreen&&(e.screen["vertical-spanned"]=this._orientationToJSON(this.verticalSpanned),e.screen["horizontal-spanned"]=this._orientationToJSON(this.horizontalSpanned)),e.modes=[];for(let t=0;t<this.modes.length;++t){const i={};i.title=this.modes[t].title,i.orientation=this.modes[t].orientation,i.insets={},i.insets.left=this.modes[t].insets.left,i.insets.top=this.modes[t].insets.top,i.insets.right=this.modes[t].insets.right,i.insets.bottom=this.modes[t].insets.bottom,this.modes[t].image&&(i.image=this.modes[t].image),e.modes.push(i)}return e["show-by-default"]=this._showByDefault,e["dual-screen"]=this.isDualScreen,e.show=this._show,e}_orientationToJSON(e){const t={};return t.width=e.width,t.height=e.height,e.outlineInsets&&(t.outline={},t.outline.insets={},t.outline.insets.left=e.outlineInsets.left,t.outline.insets.top=e.outlineInsets.top,t.outline.insets.right=e.outlineInsets.right,t.outline.insets.bottom=e.outlineInsets.bottom,t.outline.image=e.outlineImage),e.hinge&&(t.hinge={},t.hinge.width=e.hinge.width,t.hinge.height=e.hinge.height,t.hinge.x=e.hinge.x,t.hinge.y=e.hinge.y,e.hinge.contentColor&&(t.hinge.contentColor={},t.hinge.contentColor.r=e.hinge.contentColor.r,t.hinge.contentColor.g=e.hinge.contentColor.g,t.hinge.contentColor.b=e.hinge.contentColor.b,t.hinge.contentColor.a=e.hinge.contentColor.a),e.hinge.outlineColor&&(t.hinge.outlineColor={},t.hinge.outlineColor.r=e.hinge.outlineColor.r,t.hinge.outlineColor.g=e.hinge.outlineColor.g,t.hinge.outlineColor.b=e.hinge.outlineColor.b,t.hinge.outlineColor.a=e.hinge.outlineColor.a)),t}modeImage(e){return e.image?this._extension?this._extension.module().substituteURL(e.image):e.image:""}outlineImage(e){const t=this.orientationByName(e.orientation);return t.outlineImage?this._extension?this._extension.module().substituteURL(t.outlineImage):t.outlineImage:""}orientationByName(e){switch(e){case VerticalSpanned:return this.verticalSpanned;case HorizontalSpanned:return this.horizontalSpanned;case Vertical:return this.vertical;default:return this.horizontal}}show(){return this._show===_Show.Default?this._showByDefault:this._show===_Show.Always}setShow(e){this._show=e?_Show.Always:_Show.Never}copyShowFrom(e){this._show=e._show}touch(){return-1!==this.capabilities.indexOf(Capability.Touch)}mobile(){return-1!==this.capabilities.indexOf(Capability.Mobile)}}export const Horizontal="horizontal";export const Vertical="vertical";export const HorizontalSpanned="horizontal-spanned";export const VerticalSpanned="vertical-spanned";export const Type={Phone:"phone",Tablet:"tablet",Notebook:"notebook",Desktop:"desktop",Unknown:"unknown"};export const Capability={Touch:"touch",Mobile:"mobile"};export const _Show={Always:"Always",Default:"Default",Never:"Never"};let _instance;export class EmulatedDevicesList extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._standardSetting=Common.Settings.Settings.instance().createSetting("standardEmulatedDeviceList",[]),this._standard=new Set,this._listFromJSONV1(this._standardSetting.get(),this._standard),this._updateStandardDevices(),this._customSetting=Common.Settings.Settings.instance().createSetting("customEmulatedDeviceList",[]),this._custom=new Set,this._listFromJSONV1(this._customSetting.get(),this._custom)||this.saveCustomDevices()}static instance(){return _instance||(_instance=new EmulatedDevicesList),_instance}_updateStandardDevices(){const e=new Set,t=self.runtime.extensions("emulated-device");for(const i of t){const t=EmulatedDevice.fromJSONV1(i.descriptor().device);t.setExtension(i),e.add(t)}this._copyShowValues(this._standard,e),this._standard=e,this.saveStandardDevices()}_listFromJSONV1(e,t){if(!Array.isArray(e))return!1;let i=!0;for(let n=0;n<e.length;++n){const o=EmulatedDevice.fromJSONV1(e[n]);o?(t.add(o),o.modes.length||(o.modes.push({title:"",orientation:Horizontal,insets:new UI.Geometry.Insets(0,0,0,0),image:null}),o.modes.push({title:"",orientation:Vertical,insets:new UI.Geometry.Insets(0,0,0,0),image:null}))):i=!1}return i}standard(){return[...this._standard]}custom(){return[...this._custom]}revealCustomSetting(){Common.Revealer.reveal(this._customSetting)}addCustomDevice(e){this._custom.add(e),this.saveCustomDevices()}removeCustomDevice(e){this._custom.delete(e),this.saveCustomDevices()}saveCustomDevices(){const e=[];this._custom.forEach(t=>e.push(t._toJSON())),this._customSetting.set(e),this.dispatchEventToListeners(Events.CustomDevicesUpdated)}saveStandardDevices(){const e=[];this._standard.forEach(t=>e.push(t._toJSON())),this._standardSetting.set(e),this.dispatchEventToListeners(Events.StandardDevicesUpdated)}_copyShowValues(e,t){const i=new Map;for(const t of e)i.set(t.title,t);for(const e of t){const t=i.get(e.title);t&&e.copyShowFrom(t)}}}export const Events={CustomDevicesUpdated:Symbol("CustomDevicesUpdated"),StandardDevicesUpdated:Symbol("StandardDevicesUpdated")};export let Mode;export let Orientation;