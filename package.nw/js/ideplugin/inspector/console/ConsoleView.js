import*as Bindings from"../bindings/bindings.js";import*as BrowserSDK from"../browser_sdk/browser_sdk.js";import*as Common from"../common/common.js";import*as Components from"../components/components.js";import*as Host from"../host/host.js";import*as Platform from"../platform/platform.js";import*as Root from"../root/root.js";import*as SDK from"../sdk/sdk.js";import*as TextUtils from"../text_utils/text_utils.js";import*as UI from"../ui/ui.js";import{ConsoleContextSelector}from"./ConsoleContextSelector.js";import{ConsoleFilter,FilterType}from"./ConsoleFilter.js";import{ConsolePinPane}from"./ConsolePinPane.js";import{ConsolePrompt,Events as ConsolePromptEvents}from"./ConsolePrompt.js";import{ConsoleSidebar,Events}from"./ConsoleSidebar.js";import{ConsoleGroupViewMessage,ConsoleViewMessage,MaxLengthForLinks}from"./ConsoleViewMessage.js";import{ConsoleViewport,ConsoleViewportElement,ConsoleViewportProvider}from"./ConsoleViewport.js";let consoleViewInstance;export class ConsoleView extends UI.Widget.VBox{constructor(){super(),this.setMinimumSize(0,35),this.registerRequiredCSS("console/consoleView.css"),this.registerRequiredCSS("object_ui/objectValue.css"),this._searchableView=new UI.SearchableView.SearchableView(this),this._searchableView.element.classList.add("console-searchable-view"),this._searchableView.setPlaceholder(Common.UIString.UIString("Find string in logs")),this._searchableView.setMinimalSearchQuerySize(0),this._sidebar=new ConsoleSidebar,this._sidebar.addEventListener(Events.FilterSelected,this._onFilterChanged.bind(this)),this._isSidebarOpen=!1,this._filter=new ConsoleViewFilter(this._onFilterChanged.bind(this)),this._consoleToolbarContainer=this.element.createChild("div","console-toolbar-container"),this._splitWidget=new UI.SplitWidget.SplitWidget(!0,!1,"console.sidebar.width",100),this._splitWidget.setMainWidget(this._searchableView),this._splitWidget.setSidebarWidget(this._sidebar),this._splitWidget.show(this.element),this._splitWidget.hideSidebar(),this._splitWidget.enableShowModeSaving(),this._isSidebarOpen=this._splitWidget.showMode()===UI.SplitWidget.ShowMode.Both,this._isSidebarOpen&&this._filter._levelMenuButton.setEnabled(!1),this._splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged,e=>{this._isSidebarOpen=e.data===UI.SplitWidget.ShowMode.Both,this._filter._levelMenuButton.setEnabled(!this._isSidebarOpen),this._onFilterChanged()}),this._contentsElement=this._searchableView.element,this.element.classList.add("console-view"),this._visibleViewMessages=[],this._hiddenByFilterCount=0,this._shouldBeHiddenCache=new Set,this._lastShownHiddenByFilterCount,this._currentMatchRangeIndex,this._searchRegex,this._groupableMessages=new Map,this._groupableMessageTitle=new Map,this._shortcuts=new Map,this._regexMatchRanges=[],this._consoleContextSelector=new ConsoleContextSelector,this._filterStatusText=new UI.Toolbar.ToolbarText,this._filterStatusText.element.classList.add("dimmed"),this._showSettingsPaneSetting=Common.Settings.Settings.instance().createSetting("consoleShowSettingsToolbar",!1),this._showSettingsPaneButton=new UI.Toolbar.ToolbarSettingToggle(this._showSettingsPaneSetting,"largeicon-settings-gear",Common.UIString.UIString("Console settings")),this._progressToolbarItem=new UI.Toolbar.ToolbarItem(document.createElement("div")),this._groupSimilarSetting=Common.Settings.Settings.instance().moduleSetting("consoleGroupSimilar"),this._groupSimilarSetting.addChangeListener(()=>this._updateMessageList());const e=new UI.Toolbar.ToolbarSettingCheckbox(this._groupSimilarSetting,Common.UIString.UIString("Group similar")),t=new UI.Toolbar.Toolbar("console-main-toolbar",this._consoleToolbarContainer),s=new UI.Toolbar.Toolbar("",this._consoleToolbarContainer);t.appendToolbarItem(this._splitWidget.createShowHideSidebarButton(ls`console sidebar`)),t.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(UI.ActionRegistry.ActionRegistry.instance().action("console.clear"))),t.appendSeparator(),t.appendToolbarItem(this._consoleContextSelector.toolbarItem()),t.appendSeparator();const o=UI.Toolbar.Toolbar.createActionButton(UI.ActionRegistry.ActionRegistry.instance().action("console.create-pin"));t.appendToolbarItem(o),t.appendSeparator(),t.appendToolbarItem(this._filter._textFilterUI),t.appendToolbarItem(this._filter._levelMenuButton),t.appendToolbarItem(this._progressToolbarItem),s.appendSeparator(),s.appendToolbarItem(this._filterStatusText),s.appendToolbarItem(this._showSettingsPaneButton),this._preserveLogCheckbox=new UI.Toolbar.ToolbarSettingCheckbox(Common.Settings.Settings.instance().moduleSetting("preserveConsoleLog"),Common.UIString.UIString("Do not clear log on page reload / navigation"),Common.UIString.UIString("Preserve log")),this._hideNetworkMessagesCheckbox=new UI.Toolbar.ToolbarSettingCheckbox(this._filter._hideNetworkMessagesSetting,this._filter._hideNetworkMessagesSetting.title(),Common.UIString.UIString("Hide network"));const i=new UI.Toolbar.ToolbarSettingCheckbox(this._filter._filterByExecutionContextSetting,Common.UIString.UIString("Only show messages from the current context (top, iframe, worker, extension)"),Common.UIString.UIString("Selected context only")),n=Common.Settings.Settings.instance().moduleSetting("monitoringXHREnabled");this._timestampsSetting=Common.Settings.Settings.instance().moduleSetting("consoleTimestampsEnabled"),this._consoleHistoryAutocompleteSetting=Common.Settings.Settings.instance().moduleSetting("consoleHistoryAutocomplete");const r=new UI.Widget.HBox;r.show(this._contentsElement),r.element.classList.add("console-settings-pane"),UI.ARIAUtils.setAccessibleName(r.element,ls`Console settings`),UI.ARIAUtils.markAsGroup(r.element);const a=new UI.Toolbar.Toolbar("",r.element);if(a.makeVertical(),a.appendToolbarItem(this._hideNetworkMessagesCheckbox),a.appendToolbarItem(this._preserveLogCheckbox),a.appendToolbarItem(i),a.appendToolbarItem(e),wxMain.isFeatureEnabled("disableLog")){let e;const t=Common.Settings.Settings.instance().moduleSetting("consoleDisableSystemLog");function l(){if(!e)return;t.get()?e._logAgent.disable():(e._logAgent.enable(),e._logAgent.startViolationsReport([{name:"longTask",threshold:200},{name:"longLayout",threshold:30},{name:"blockedEvent",threshold:100},{name:"blockedParser",threshold:-1},{name:"handler",threshold:150},{name:"recurringHandler",threshold:50},{name:"discouragedAPIUse",threshold:-1}]))}SDK.SDKModel.TargetManager.instance().observeModels(SDK.LogModel.LogModel,{modelAdded(t){e=t,l()},modelRemoved(e){}}),t.addChangeListener(l);const s=new UI.Toolbar.ToolbarSettingCheckbox(t,Common.UIString.UIString("Disable system log"));a.appendToolbarItem(s)}const h=new UI.Toolbar.Toolbar("",r.element);h.makeVertical(),h.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(n));const d=new UI.Toolbar.ToolbarSettingCheckbox(Common.Settings.Settings.instance().moduleSetting("consoleEagerEval"),ls`Eagerly evaluate text in the prompt`);h.appendToolbarItem(d),h.appendToolbarItem(new UI.Toolbar.ToolbarSettingCheckbox(this._consoleHistoryAutocompleteSetting));const g=new UI.Toolbar.ToolbarSettingCheckbox(Common.Settings.Settings.instance().moduleSetting("consoleUserActivationEval"));h.appendToolbarItem(g),this._showSettingsPaneSetting.get()||r.element.classList.add("hidden"),this._showSettingsPaneSetting.addChangeListener(()=>r.element.classList.toggle("hidden",!this._showSettingsPaneSetting.get())),this._pinPane=new ConsolePinPane(o),this._pinPane.element.classList.add("console-view-pinpane"),this._pinPane.show(this._contentsElement),this._pinPane.element.addEventListener("keydown",e=>{("Enter"===e.key&&UI.KeyboardShortcut.KeyboardShortcut.eventHasCtrlOrMeta(e)||e.keyCode===UI.KeyboardShortcut.Keys.Esc.code)&&(this._prompt.focus(),e.consume())}),this._viewport=new ConsoleViewport(this),this._viewport.setStickToBottom(!0),this._viewport.contentElement().classList.add("console-group","console-group-messages"),this._contentsElement.appendChild(this._viewport.element),this._messagesElement=this._viewport.element,this._messagesElement.id="console-messages",this._messagesElement.classList.add("monospace"),this._messagesElement.addEventListener("click",this._messagesClicked.bind(this),!1),this._messagesElement.addEventListener("paste",this._messagesPasted.bind(this),!0),this._messagesElement.addEventListener("clipboard-paste",this._messagesPasted.bind(this),!0),UI.ARIAUtils.markAsGroup(this._messagesElement),this._viewportThrottler=new Common.Throttler.Throttler(50),this._pendingBatchResize=!1,this._onMessageResizedBound=this._onMessageResized.bind(this),this._topGroup=ConsoleGroup.createTopGroup(),this._currentGroup=this._topGroup,this._promptElement=this._messagesElement.createChild("div","source-code"),this._promptElement.id="console-prompt";const c=this._messagesElement.createChild("div","console-view-fix-select-all");c.textContent=".",UI.ARIAUtils.markAsHidden(c),this._registerShortcuts(),this._messagesElement.addEventListener("contextmenu",this._handleContextMenuEvent.bind(this),!1),this._linkifier=new Components.Linkifier.Linkifier(MaxLengthForLinks),this._consoleMessages=[],this._viewMessageSymbol=Symbol("viewMessage"),this._consoleHistorySetting=Common.Settings.Settings.instance().createLocalSetting("consoleHistory",[]),this._prompt=new ConsolePrompt,this._prompt.show(this._promptElement),this._prompt.element.addEventListener("keydown",this._promptKeyDown.bind(this),!0),this._prompt.addEventListener(ConsolePromptEvents.TextChanged,this._promptTextChanged,this),this._messagesElement.addEventListener("keydown",this._messagesKeyDown.bind(this),!1),this._prompt.element.addEventListener("focusin",()=>{this._isScrolledToBottom()&&this._viewport.setStickToBottom(!0)}),this._consoleHistoryAutocompleteSetting.addChangeListener(this._consoleHistoryAutocompleteChanged,this);const m=this._consoleHistorySetting.get();if(this._prompt.history().setHistoryData(m),this._consoleHistoryAutocompleteChanged(),this._updateFilterStatus(),this._timestampsSetting.addChangeListener(this._consoleTimestampsSettingChanged,this),this._registerWithMessageSink(),UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext,this._executionContextChanged,this),this._messagesElement.addEventListener("mousedown",e=>this._updateStickToBottomOnPointerDown(2===e.button),!1),this._messagesElement.addEventListener("mouseup",this._updateStickToBottomOnPointerUp.bind(this),!1),this._messagesElement.addEventListener("mouseleave",this._updateStickToBottomOnPointerUp.bind(this),!1),this._messagesElement.addEventListener("wheel",this._updateStickToBottomOnWheel.bind(this),!1),this._messagesElement.addEventListener("touchstart",this._updateStickToBottomOnPointerDown.bind(this,!1),!1),this._messagesElement.addEventListener("touchend",this._updateStickToBottomOnPointerUp.bind(this),!1),this._messagesElement.addEventListener("touchcancel",this._updateStickToBottomOnPointerUp.bind(this),!1),SDK.ConsoleModel.ConsoleModel.instance().addEventListener(SDK.ConsoleModel.Events.ConsoleCleared,this._consoleCleared,this),SDK.ConsoleModel.ConsoleModel.instance().addEventListener(SDK.ConsoleModel.Events.MessageAdded,this._onConsoleMessageAdded,this),SDK.ConsoleModel.ConsoleModel.instance().addEventListener(SDK.ConsoleModel.Events.MessageUpdated,this._onConsoleMessageUpdated,this),SDK.ConsoleModel.ConsoleModel.instance().addEventListener(SDK.ConsoleModel.Events.CommandEvaluated,this._commandEvaluated,this),SDK.ConsoleModel.ConsoleModel.instance().messages().forEach(this._addConsoleMessage,this),Root.Runtime.experiments.isEnabled("issuesPane")){const e=BrowserSDK.IssuesManager.IssuesManager.instance();e.addEventListener(BrowserSDK.IssuesManager.Events.IssuesCountUpdated,this._onIssuesCountChanged.bind(this)),e.numberOfIssues()&&this._onIssuesCountChanged()}}_onIssuesCountChanged(){if(0===BrowserSDK.IssuesManager.IssuesManager.instance().numberOfIssues())this._issueBarDiv&&(this._issueBarDiv.element().remove(),this._issueBarDiv=null,this._scheduleViewportRefresh());else if(!this._issueBarDiv){const e={text:ls`View issues`,highlight:!1,delegate:()=>{Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.ConsoleInfoBar),UI.ViewManager.ViewManager.instance().showView("issues-pane")},dismiss:!1},t=new UI.Infobar.Infobar(UI.Infobar.Type.Issue,ls`Some messages have been moved to the Issues panel.`,[e]);t.element.tabIndex=-1,t.element.classList.add("console-message-wrapper"),this._issueBarDiv={willHide(){this._cachedIssueBarHeight=t.element.offsetHeight},wasShown(){},element:()=>t.element,focusLastChildOrSelf:()=>t.element.focus(),fastHeight(){return this._cachedIssueBarHeight||37},toExportString:()=>ls`Some messages have been moved to the Issues panel.`,_cachedIssueBarHeight:0},this._scheduleViewportRefresh()}}static instance(){return consoleViewInstance||(consoleViewInstance=new ConsoleView),consoleViewInstance}static clearConsole(){const e=ConsoleView.instance();e._issueBarDiv&&(e._issueBarDiv.element().remove(),e._issueBarDiv=null,e._scheduleViewportRefresh()),SDK.ConsoleModel.ConsoleModel.instance().requestClearMessages()}_onFilterChanged(){if(this._filter._currentFilter.levelsMask=this._isSidebarOpen?ConsoleFilter.allLevelsFilterValue():this._filter._messageLevelFiltersSetting.get(),this._cancelBuildHiddenCache(),this._immediatelyFilterMessagesForTest){for(const e of this._consoleMessages)this._computeShouldMessageBeVisible(e);this._updateMessageList()}else this._buildHiddenCache(0,this._consoleMessages.slice())}_setImmediatelyFilterMessagesForTest(){this._immediatelyFilterMessagesForTest=!0}searchableView(){return this._searchableView}_clearHistory(){this._consoleHistorySetting.set([]),this._prompt.history().setHistoryData([])}_consoleHistoryAutocompleteChanged(){this._prompt.setAddCompletionsFromHistory(this._consoleHistoryAutocompleteSetting.get())}itemCount(){return this._issueBarDiv?this._visibleViewMessages.length+1:this._visibleViewMessages.length}itemElement(e){const t=this._issueBarDiv;return t?0===e?t:this._visibleViewMessages[e-1]:this._visibleViewMessages[e]}fastHeight(e){const t=this._issueBarDiv;return t?0===e?t.fastHeight()||37:this._visibleViewMessages[e-1].fastHeight():this._visibleViewMessages[e].fastHeight()}minimumRowHeight(){return 16}_registerWithMessageSink(){Common.Console.Console.instance().messages().forEach(this._addSinkMessage,this),Common.Console.Console.instance().addEventListener(Common.Console.Events.MessageAdded,(function(e){this._addSinkMessage(e.data)}),this)}_addSinkMessage(e){let t=SDK.ConsoleModel.MessageLevel.Verbose;switch(e.level){case Common.Console.MessageLevel.Info:t=SDK.ConsoleModel.MessageLevel.Info;break;case Common.Console.MessageLevel.Error:t=SDK.ConsoleModel.MessageLevel.Error;break;case Common.Console.MessageLevel.Warning:t=SDK.ConsoleModel.MessageLevel.Warning}const s=new SDK.ConsoleModel.ConsoleMessage(null,SDK.ConsoleModel.MessageSource.Other,t,e.text,SDK.ConsoleModel.MessageType.System,void 0,void 0,void 0,void 0,void 0,e.timestamp);this._addConsoleMessage(s)}_consoleTimestampsSettingChanged(){this._updateMessageList(),this._consoleMessages.forEach(e=>e.updateTimestamp()),this._groupableMessageTitle.forEach(e=>e.updateTimestamp())}_executionContextChanged(){this._prompt.clearAutocomplete()}willHide(){this._hidePromptSuggestBox()}wasShown(){this._viewport.refresh()}focus(){this._viewport.hasVirtualSelection()?this._viewport.contentElement().focus():this._focusPrompt()}_focusPrompt(){if(!this._prompt.hasFocus()){const e=this._viewport.stickToBottom(),t=this._viewport.element.scrollTop;this._prompt.focus(),this._viewport.setStickToBottom(e),this._viewport.element.scrollTop=t}}restoreScrollPositions(){this._viewport.stickToBottom()?this._immediatelyScrollToBottom():super.restoreScrollPositions()}onResize(){this._scheduleViewportRefresh(),this._hidePromptSuggestBox(),this._viewport.stickToBottom()&&this._immediatelyScrollToBottom();for(let e=0;e<this._visibleViewMessages.length;++e)this._visibleViewMessages[e].onResize()}_hidePromptSuggestBox(){this._prompt.clearAutocomplete()}_invalidateViewport(){return this._muteViewportUpdates?(this._maybeDirtyWhileMuted=!0,Promise.resolve()):(this._needsFullUpdate?(this._updateMessageList(),delete this._needsFullUpdate):this._viewport.invalidate(),Promise.resolve())}_scheduleViewportRefresh(){if(this._muteViewportUpdates)return this._maybeDirtyWhileMuted=!0,void this._scheduleViewportRefreshForTest(!0);this._scheduleViewportRefreshForTest(!1),this._scheduledRefreshPromiseForTest=this._viewportThrottler.schedule(this._invalidateViewport.bind(this))}_scheduleViewportRefreshForTest(e){}_immediatelyScrollToBottom(){this._viewport.setStickToBottom(!0),this._promptElement.scrollIntoView(!0)}_updateFilterStatus(){this._hiddenByFilterCount!==this._lastShownHiddenByFilterCount&&(this._filterStatusText.setText(ls`${this._hiddenByFilterCount} hidden`),this._filterStatusText.setVisible(!!this._hiddenByFilterCount),this._lastShownHiddenByFilterCount=this._hiddenByFilterCount)}_onConsoleMessageAdded(e){const t=e.data;this._addConsoleMessage(t)}_addConsoleMessage(e){const t=this._createViewMessage(e);if(consoleMessageToViewMessage.set(e,t),e.type===SDK.ConsoleModel.MessageType.Command||e.type===SDK.ConsoleModel.MessageType.Result){const e=this._consoleMessages.peekLast(),s=e&&messagesSortedBySymbol.get(e)||0;messagesSortedBySymbol.set(t,s)}else messagesSortedBySymbol.set(t,t.consoleMessage().timestamp);let s;s=!this._consoleMessages.length||r(t,this._consoleMessages[this._consoleMessages.length-1])>0?this._consoleMessages.length:this._consoleMessages.upperBound(t,r);const o=s<this._consoleMessages.length;this._consoleMessages.splice(s,0,t),this._filter.onMessageAdded(e),this._sidebar.onMessageAdded(t);let i=!1;const n=this._groupSimilarSetting.get();if(e.isGroupable()){const e=t.groupKey();i=n&&this._groupableMessages.has(e);let s=this._groupableMessages.get(e);s||(s=[],this._groupableMessages.set(e,s)),s.push(t)}function r(e,t){return(messagesSortedBySymbol.get(e)||0)-(messagesSortedBySymbol.get(t)||0)}this._computeShouldMessageBeVisible(t),i||o?this._needsFullUpdate=!0:(this._appendMessageToEnd(t,!n),this._updateFilterStatus(),this._searchableView.updateSearchMatchesCount(this._regexMatchRanges.length)),this._scheduleViewportRefresh(),this._consoleMessageAddedForTest(t)}_onConsoleMessageUpdated(e){const t=e.data,s=consoleMessageToViewMessage.get(t);s&&(s.updateMessageElement(),this._computeShouldMessageBeVisible(s),this._updateMessageList())}_consoleMessageAddedForTest(e){}_shouldMessageBeVisible(e){return!this._shouldBeHiddenCache.has(e)}_computeShouldMessageBeVisible(e){!this._filter.shouldBeVisible(e)||this._isSidebarOpen&&!this._sidebar.shouldBeVisible(e)?this._shouldBeHiddenCache.add(e):this._shouldBeHiddenCache.delete(e)}_appendMessageToEnd(e,t){if(!this._shouldMessageBeVisible(e))return void this._hiddenByFilterCount++;if(!t&&this._tryToCollapseMessages(e,this._visibleViewMessages.peekLast()))return;const s=this._visibleViewMessages.peekLast();if(e.consoleMessage().type===SDK.ConsoleModel.MessageType.EndGroup)return s&&!this._currentGroup.messagesHidden()&&s.incrementCloseGroupDecorationCount(),void(this._currentGroup=this._currentGroup.parentGroup()||this._currentGroup);if(!this._currentGroup.messagesHidden()){const t=e.consoleMessage().originatingMessage();s&&t&&s.consoleMessage()===t&&e.toMessageElement().classList.add("console-adjacent-user-command-result"),this._visibleViewMessages.push(e),this._searchMessage(this._visibleViewMessages.length-1)}e.consoleMessage().isGroupStartMessage()&&(this._currentGroup=new ConsoleGroup(this._currentGroup,e)),this._messageAppendedForTests()}_messageAppendedForTests(){}_createViewMessage(e){const t=this._currentGroup.nestingLevel();switch(e.type){case SDK.ConsoleModel.MessageType.Command:return new ConsoleCommand(e,this._linkifier,t,this._onMessageResizedBound);case SDK.ConsoleModel.MessageType.Result:return new ConsoleCommandResult(e,this._linkifier,t,this._onMessageResizedBound);case SDK.ConsoleModel.MessageType.StartGroupCollapsed:case SDK.ConsoleModel.MessageType.StartGroup:return new ConsoleGroupViewMessage(e,this._linkifier,t,this._updateMessageList.bind(this),this._onMessageResizedBound);default:return new ConsoleViewMessage(e,this._linkifier,t,this._onMessageResizedBound)}}async _onMessageResized(e){const t=e.data;if(this._pendingBatchResize||!t.treeOutline)return;this._pendingBatchResize=!0,await Promise.resolve();const s=t.treeOutline.element;this._viewport.setStickToBottom(this._isScrolledToBottom()),s.offsetHeight<=this._messagesElement.offsetHeight&&s.scrollIntoViewIfNeeded(),this._pendingBatchResize=!1}_consoleCleared(){const e=this._viewport.element.hasFocus();this._cancelBuildHiddenCache(),this._currentMatchRangeIndex=-1,this._consoleMessages=[],this._groupableMessages.clear(),this._groupableMessageTitle.clear(),this._sidebar.clear(),this._updateMessageList(),this._hidePromptSuggestBox(),this._viewport.setStickToBottom(!0),this._linkifier.reset(),this._filter.clear(),e&&this._prompt.focus()}_handleContextMenuEvent(e){const t=new UI.ContextMenu.ContextMenu(e),s=e.target;if(s.isSelfOrDescendant(this._promptElement))return void t.show();const o=s.enclosingNodeOrSelfWithClass("console-message-wrapper"),i=o&&"message"in o?o.message.consoleMessage():null;if(i&&i.url){const e=ls`Hide messages from ${new Common.ParsedURL.ParsedURL(i.url).displayName}`;t.headerSection().appendItem(e,this._filter.addMessageURLFilter.bind(this._filter,i.url))}if(t.defaultSection().appendAction("console.clear"),t.defaultSection().appendAction("console.clear.history"),t.saveSection().appendItem(Common.UIString.UIString("Save as..."),this._saveConsole.bind(this)),this.element.hasSelection()&&t.clipboardSection().appendItem(Common.UIString.UIString("Copy visible styled selection"),this._viewport.copyWithStyles.bind(this._viewport)),i){const e=SDK.NetworkLog.NetworkLog.requestForConsoleMessage(i);e&&SDK.NetworkManager.NetworkManager.canReplayRequest(e)&&t.debugSection().appendItem(ls`Replay XHR`,SDK.NetworkManager.NetworkManager.replayRequest.bind(null,e))}t.show()}async _saveConsole(){const e=SDK.SDKModel.TargetManager.instance().mainTarget().inspectedURL(),t=Common.ParsedURL.ParsedURL.fromString(e),s=Platform.StringUtilities.sprintf("%s-%d.log",t?t.host:"console",Date.now()),o=new Bindings.FileUtils.FileOutputStream,i=new UI.ProgressIndicator.ProgressIndicator;i.setTitle(Common.UIString.UIString("Writing file…")),i.setTotalWork(this.itemCount());if(!await o.open(s))return;this._progressToolbarItem.element.appendChild(i.element);let n=0;for(;n<this.itemCount()&&!i.isCanceled();){const e=[];let t;for(t=0;t<350&&t+n<this.itemCount();++t){const s=this.itemElement(n+t);e.push(s.toExportString())}n+=t,await o.write(e.join("\n")+"\n"),i.setWorked(n)}o.close(),i.done()}_tryToCollapseMessages(e,t){return!(this._timestampsSetting.get()||!t||e.consoleMessage().isGroupMessage()||e.consoleMessage().type===SDK.ConsoleModel.MessageType.Command||e.consoleMessage().type===SDK.ConsoleModel.MessageType.Result||!e.consoleMessage().isEqual(t.consoleMessage()))&&(t.incrementRepeatCount(),e.isLastInSimilarGroup()&&t.setInSimilarGroup(!0,!0),!0)}_buildHiddenCache(e,t){const s=Date.now();let o;for(o=e;o<t.length&&(this._computeShouldMessageBeVisible(t[o]),!(o%10==0&&Date.now()-s>12));++o);o!==t.length?this._buildHiddenCacheTimeout=this.element.window().requestAnimationFrame(this._buildHiddenCache.bind(this,o,t)):this._updateMessageList()}_cancelBuildHiddenCache(){this._shouldBeHiddenCache.clear(),this._buildHiddenCacheTimeout&&(this.element.window().cancelAnimationFrame(this._buildHiddenCacheTimeout),delete this._buildHiddenCacheTimeout)}_updateMessageList(){this._topGroup=ConsoleGroup.createTopGroup(),this._currentGroup=this._topGroup,this._regexMatchRanges=[],this._hiddenByFilterCount=0;for(let e=0;e<this._visibleViewMessages.length;++e)this._visibleViewMessages[e].resetCloseGroupDecorationCount(),this._visibleViewMessages[e].resetIncrementRepeatCount();if(this._visibleViewMessages=[],this._groupSimilarSetting.get())this._addGroupableMessagesToEnd();else for(let e=0;e<this._consoleMessages.length;++e)this._consoleMessages[e].setInSimilarGroup(!1),this._appendMessageToEnd(this._consoleMessages[e],!0);this._updateFilterStatus(),this._searchableView.updateSearchMatchesCount(this._regexMatchRanges.length),this._viewport.invalidate()}_addGroupableMessagesToEnd(){const e=new Set,t=new Set;for(let s=0;s<this._consoleMessages.length;++s){const o=this._consoleMessages[s],i=o.consoleMessage();if(e.has(i))continue;if(!i.isGroupable()){this._appendMessageToEnd(o),e.add(i);continue}const n=o.groupKey(),r=this._groupableMessages.get(n);if(!r||r.length<5){o.setInSimilarGroup(!1),this._appendMessageToEnd(o),e.add(i);continue}if(t.has(n))continue;if(!r.find(e=>this._shouldMessageBeVisible(e))){Platform.SetUtilities.addAll(e,r),t.add(n);continue}let a=this._groupableMessageTitle.get(n);if(!a){const e=new SDK.ConsoleModel.ConsoleMessage(null,i.source,i.level,o.groupTitle(),SDK.ConsoleModel.MessageType.StartGroupCollapsed);a=this._createViewMessage(e),this._groupableMessageTitle.set(n,a)}a.setRepeatCount(r.length),this._appendMessageToEnd(a);for(const t of r)t.setInSimilarGroup(!0,r.peekLast()===t),this._appendMessageToEnd(t,!0),e.add(t.consoleMessage());const l=new SDK.ConsoleModel.ConsoleMessage(null,i.source,i.level,i.messageText,SDK.ConsoleModel.MessageType.EndGroup);this._appendMessageToEnd(this._createViewMessage(l))}}_messagesClicked(e){const t=e.target;if(!this._messagesElement.hasSelection()){(t===this._messagesElement||this._prompt.belowEditorElement().isSelfOrAncestor(t))&&(this._prompt.moveCaretToEndOfPrompt(),this._focusPrompt())}}_messagesKeyDown(e){const t=e;t.ctrlKey||t.altKey||t.metaKey||1!==t.key.length||UI.UIUtils.isEditing()||this._messagesElement.hasSelection()||(this._prompt.moveCaretToEndOfPrompt(),this._focusPrompt())}_messagesPasted(e){UI.UIUtils.isEditing()||this._prompt.focus()}_registerShortcuts(){this._shortcuts.set(UI.KeyboardShortcut.KeyboardShortcut.makeKey("u",UI.KeyboardShortcut.Modifiers.Ctrl),this._clearPromptBackwards.bind(this))}_clearPromptBackwards(){this._prompt.setText("")}_promptKeyDown(e){const t=e;if("PageUp"===t.key)return void this._updateStickToBottomOnWheel();const s=UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEvent(t),o=this._shortcuts.get(s);o&&(o(),t.preventDefault())}_printResult(e,t,s){if(!e)return;const o=s?SDK.ConsoleModel.MessageLevel.Error:SDK.ConsoleModel.MessageLevel.Info;let i;i=s?SDK.ConsoleModel.ConsoleMessage.fromException(e.runtimeModel(),s,SDK.ConsoleModel.MessageType.Result,void 0,void 0):new SDK.ConsoleModel.ConsoleMessage(e.runtimeModel(),SDK.ConsoleModel.MessageSource.JS,o,"",SDK.ConsoleModel.MessageType.Result,void 0,void 0,void 0,[e]),i.setOriginatingMessage(t),SDK.ConsoleModel.ConsoleModel.instance().addMessage(i)}_commandEvaluated(e){const t=e.data;this._prompt.history().pushHistoryItem(t.commandMessage.messageText),this._consoleHistorySetting.set(this._prompt.history().historyData().slice(-persistedHistorySize)),this._printResult(t.result,t.commandMessage,t.exceptionDetails)}elementsToRestoreScrollPositionsFor(){return[this._messagesElement]}searchCanceled(){this._cleanupAfterSearch();for(let e=0;e<this._visibleViewMessages.length;++e){this._visibleViewMessages[e].setSearchRegex(null)}this._currentMatchRangeIndex=-1,this._regexMatchRanges=[],this._searchRegex=null,this._viewport.refresh()}performSearch(e,t,s){this.searchCanceled(),this._searchableView.updateSearchMatchesCount(0),this._searchRegex=e.toSearchRegex(!0),this._regexMatchRanges=[],this._currentMatchRangeIndex=-1,t&&(this._searchShouldJumpBackwards=!!s),this._searchProgressIndicator=new UI.ProgressIndicator.ProgressIndicator,this._searchProgressIndicator.setTitle(Common.UIString.UIString("Searching…")),this._searchProgressIndicator.setTotalWork(this._visibleViewMessages.length),this._progressToolbarItem.element.appendChild(this._searchProgressIndicator.element),this._innerSearch(0)}_cleanupAfterSearch(){delete this._searchShouldJumpBackwards,this._innerSearchTimeoutId&&(clearTimeout(this._innerSearchTimeoutId),delete this._innerSearchTimeoutId),this._searchProgressIndicator&&(this._searchProgressIndicator.done(),delete this._searchProgressIndicator)}_searchFinishedForTests(){}_innerSearch(e){if(delete this._innerSearchTimeoutId,this._searchProgressIndicator&&this._searchProgressIndicator.isCanceled())return void this._cleanupAfterSearch();const t=Date.now();for(;e<this._visibleViewMessages.length&&Date.now()-t<100;++e)this._searchMessage(e);if(this._searchableView.updateSearchMatchesCount(this._regexMatchRanges.length),void 0!==this._searchShouldJumpBackwards&&this._regexMatchRanges.length&&(this._jumpToMatch(this._searchShouldJumpBackwards?-1:0),delete this._searchShouldJumpBackwards),e===this._visibleViewMessages.length)return this._cleanupAfterSearch(),void setTimeout(this._searchFinishedForTests.bind(this),0);this._innerSearchTimeoutId=setTimeout(this._innerSearch.bind(this,e),100),this._searchProgressIndicator&&this._searchProgressIndicator.setWorked(e)}_searchMessage(e){const t=this._visibleViewMessages[e];t.setSearchRegex(this._searchRegex);for(let s=0;s<t.searchCount();++s)this._regexMatchRanges.push({messageIndex:e,matchIndex:s})}jumpToNextSearchResult(){this._jumpToMatch(this._currentMatchRangeIndex+1)}jumpToPreviousSearchResult(){this._jumpToMatch(this._currentMatchRangeIndex-1)}supportsCaseSensitiveSearch(){return!0}supportsRegexSearch(){return!0}_jumpToMatch(e){if(!this._regexMatchRanges.length)return;let t;if(this._currentMatchRangeIndex>=0){t=this._regexMatchRanges[this._currentMatchRangeIndex];this._visibleViewMessages[t.messageIndex].searchHighlightNode(t.matchIndex).classList.remove(UI.UIUtils.highlightedCurrentSearchResultClassName)}e=Platform.NumberUtilities.mod(e,this._regexMatchRanges.length),this._currentMatchRangeIndex=e,this._searchableView.updateCurrentMatchIndex(e),t=this._regexMatchRanges[e];const s=this._visibleViewMessages[t.messageIndex].searchHighlightNode(t.matchIndex);s.classList.add(UI.UIUtils.highlightedCurrentSearchResultClassName);const o=this._issueBarDiv?1:0;this._viewport.scrollItemIntoView(t.messageIndex+o),s.scrollIntoViewIfNeeded()}_updateStickToBottomOnPointerDown(e){this._muteViewportUpdates=!e,this._viewport.setStickToBottom(!1),this._waitForScrollTimeout&&(clearTimeout(this._waitForScrollTimeout),delete this._waitForScrollTimeout)}_updateStickToBottomOnPointerUp(){this._muteViewportUpdates&&(this._waitForScrollTimeout=setTimeout(function(){this._muteViewportUpdates=!1,this.isShowing()&&this._viewport.setStickToBottom(this._isScrolledToBottom());this._maybeDirtyWhileMuted&&(this._scheduleViewportRefresh(),delete this._maybeDirtyWhileMuted);delete this._waitForScrollTimeout,this._updateViewportStickinessForTest()}.bind(this),200))}_updateViewportStickinessForTest(){}_updateStickToBottomOnWheel(){this._updateStickToBottomOnPointerDown(),this._updateStickToBottomOnPointerUp()}_promptTextChanged(){const e=this._viewport.stickToBottom(),t=this._isScrolledToBottom();this._viewport.setStickToBottom(t),t&&!e&&this._scheduleViewportRefresh(),this._promptTextChangedForTest()}_promptTextChangedForTest(){}_isScrolledToBottom(){return this._messagesElement.scrollHeight-this._messagesElement.scrollTop-this._messagesElement.clientHeight-this._prompt.belowEditorElement().offsetHeight<=2}}const persistedHistorySize=300;export class ConsoleViewFilter{constructor(e){this._filterChanged=e,this._messageLevelFiltersSetting=ConsoleViewFilter.levelFilterSetting(),this._hideNetworkMessagesSetting=Common.Settings.Settings.instance().moduleSetting("hideNetworkMessages"),this._filterByExecutionContextSetting=Common.Settings.Settings.instance().moduleSetting("selectedContextFilterEnabled"),this._messageLevelFiltersSetting.addChangeListener(this._onFilterChanged.bind(this)),this._hideNetworkMessagesSetting.addChangeListener(this._onFilterChanged.bind(this)),this._filterByExecutionContextSetting.addChangeListener(this._onFilterChanged.bind(this)),UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext,this._onFilterChanged,this);const t=Object.values(FilterType);this._suggestionBuilder=new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(t),this._textFilterUI=new UI.Toolbar.ToolbarInput(Common.UIString.UIString("Filter"),"",.2,1,Common.UIString.UIString("e.g. /event\\d/ -cdn url:a.com"),this._suggestionBuilder.completions.bind(this._suggestionBuilder)),this._textFilterSetting=Common.Settings.Settings.instance().createSetting("console.textFilter",""),this._textFilterSetting.get()&&this._textFilterUI.setValue(this._textFilterSetting.get()),this._textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged,()=>{this._textFilterSetting.set(this._textFilterUI.value()),this._onFilterChanged()}),this._filterParser=new TextUtils.TextUtils.FilterParser(t),this._currentFilter=new ConsoleFilter("",[],null,this._messageLevelFiltersSetting.get()),this._updateCurrentFilter(),this._levelLabels=new Map([[SDK.ConsoleModel.MessageLevel.Verbose,Common.UIString.UIString("Verbose")],[SDK.ConsoleModel.MessageLevel.Info,Common.UIString.UIString("Info")],[SDK.ConsoleModel.MessageLevel.Warning,Common.UIString.UIString("Warnings")],[SDK.ConsoleModel.MessageLevel.Error,Common.UIString.UIString("Errors")]]),this._levelMenuButton=new UI.Toolbar.ToolbarButton(ls`Log levels`),this._levelMenuButton.turnIntoSelect(),this._levelMenuButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._showLevelContextMenu.bind(this)),UI.ARIAUtils.markAsMenuButton(this._levelMenuButton.element),this._updateLevelMenuButtonText(),this._messageLevelFiltersSetting.addChangeListener(this._updateLevelMenuButtonText.bind(this))}onMessageAdded(e){e.type===SDK.ConsoleModel.MessageType.Command||e.type===SDK.ConsoleModel.MessageType.Result||e.isGroupMessage()||(e.context&&this._suggestionBuilder.addItem(FilterType.Context,e.context),e.source&&this._suggestionBuilder.addItem(FilterType.Source,e.source),e.url&&this._suggestionBuilder.addItem(FilterType.Url,e.url))}static levelFilterSetting(){return Common.Settings.Settings.instance().createSetting("messageLevelFilters",ConsoleFilter.defaultLevelsFilterValue())}_updateCurrentFilter(){const e=this._filterParser.parse(this._textFilterUI.value());this._hideNetworkMessagesSetting.get()&&e.push({key:FilterType.Source,text:SDK.ConsoleModel.MessageSource.Network,negative:!0,regex:void 0}),this._currentFilter.executionContext=this._filterByExecutionContextSetting.get()?UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext):null,this._currentFilter.parsedFilters=e,this._currentFilter.levelsMask=this._messageLevelFiltersSetting.get()}_onFilterChanged(){this._updateCurrentFilter(),this._filterChanged()}_updateLevelMenuButtonText(){let e=!0,t=!0;const s=ConsoleFilter.allLevelsFilterValue(),o=ConsoleFilter.defaultLevelsFilterValue();let i=null;const n=this._messageLevelFiltersSetting.get();for(const r of Object.values(SDK.ConsoleModel.MessageLevel))e=e&&n[r]===s[r],t=t&&n[r]===o[r],n[r]&&(i=i?Common.UIString.UIString("Custom levels"):Common.UIString.UIString("%s only",this._levelLabels.get(r)));i=e?Common.UIString.UIString("All levels"):t?Common.UIString.UIString("Default levels"):i||Common.UIString.UIString("Hide all"),this._levelMenuButton.element.classList.toggle("warning",!e&&!t),this._levelMenuButton.setText(i),this._levelMenuButton.setTitle(ls`Log level: ${i}`)}_showLevelContextMenu(e){const t=e.data,s=this._messageLevelFiltersSetting,o=s.get(),i=new UI.ContextMenu.ContextMenu(t,!0,this._levelMenuButton.element.totalOffsetLeft(),this._levelMenuButton.element.totalOffsetTop()+this._levelMenuButton.element.offsetHeight);i.headerSection().appendItem(Common.UIString.UIString("Default"),()=>s.set(ConsoleFilter.defaultLevelsFilterValue()));for(const[e,t]of this._levelLabels.entries())i.defaultSection().appendCheckboxItem(t,n.bind(null,e),o[e]);function n(e){o[e]=!o[e],s.set(o)}i.show()}addMessageURLFilter(e){if(!e)return;const t=this._textFilterUI.value()?" "+this._textFilterUI.value():"";this._textFilterUI.setValue(`-url:${e}${t}`),this._textFilterSetting.set(this._textFilterUI.value()),this._onFilterChanged()}shouldBeVisible(e){return this._currentFilter.shouldBeVisible(e)}clear(){this._suggestionBuilder.clear()}reset(){this._messageLevelFiltersSetting.set(ConsoleFilter.defaultLevelsFilterValue()),this._filterByExecutionContextSetting.set(!1),this._hideNetworkMessagesSetting.set(!1),this._textFilterUI.setValue(""),this._onFilterChanged()}}export class ConsoleCommand extends ConsoleViewMessage{contentElement(){if(!this._contentElement){this._contentElement=document.createElement("div"),this._contentElement.classList.add("console-user-command");const e=UI.Icon.Icon.create("smallicon-user-command","command-result-icon");if(this._contentElement.appendChild(e),this._contentElement.message=this,this._formattedCommand=document.createElement("span"),this._formattedCommand.classList.add("source-code"),this._formattedCommand.textContent=Platform.StringUtilities.replaceControlCharacters(this.text),this._contentElement.appendChild(this._formattedCommand),this._formattedCommand.textContent.length<MaxLengthToIgnoreHighlighter){new UI.SyntaxHighlighter.SyntaxHighlighter("text/javascript",!0).syntaxHighlightNode(this._formattedCommand).then(this._updateSearch.bind(this))}else this._updateSearch();this.updateTimestamp()}return this._contentElement}_updateSearch(){this.setSearchRegex(this.searchRegex())}}class ConsoleCommandResult extends ConsoleViewMessage{contentElement(){const e=super.contentElement();if(!e.classList.contains("console-user-command-result")&&(e.classList.add("console-user-command-result"),this.consoleMessage().level===SDK.ConsoleModel.MessageLevel.Info)){const t=UI.Icon.Icon.create("smallicon-command-result","command-result-icon");e.insertBefore(t,e.firstChild)}return e}}export class ConsoleGroup{constructor(e,t){this._parentGroup=e,this._nestingLevel=e?e.nestingLevel()+1:0,this._messagesHidden=t&&t.collapsed()||this._parentGroup&&this._parentGroup.messagesHidden()||!1}static createTopGroup(){return new ConsoleGroup(null,null)}messagesHidden(){return this._messagesHidden}nestingLevel(){return this._nestingLevel}parentGroup(){return this._parentGroup}}export class ActionDelegate{handleAction(e,t){switch(t){case"console.show":return Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront(),Common.Console.Console.instance().show(),ConsoleView.instance()._focusPrompt(),!0;case"console.clear":return ConsoleView.clearConsole(),!0;case"console.clear.history":return ConsoleView.instance()._clearHistory(),!0;case"console.create-pin":return ConsoleView.instance()._pinPane.addPin("",!0),!0}return!1}}const messagesSortedBySymbol=new WeakMap,consoleMessageToViewMessage=new WeakMap,MaxLengthToIgnoreHighlighter=1e4;export let RegexMatchRange;