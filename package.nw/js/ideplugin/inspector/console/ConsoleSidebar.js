import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as TextUtils from"../text_utils/text_utils.js";import*as UI from"../ui/ui.js";import{ConsoleFilter,FilterType}from"./ConsoleFilter.js";import{ConsoleViewMessage}from"./ConsoleViewMessage.js";export class ConsoleSidebar extends UI.Widget.VBox{constructor(){super(!0),this.setMinimumSize(125,0),this._tree=new UI.TreeOutline.TreeOutlineInShadow,this._tree.registerRequiredCSS("console/consoleSidebar.css"),this._tree.addEventListener(UI.TreeOutline.Events.ElementSelected,this._selectionChanged.bind(this)),this.contentElement.appendChild(this._tree.element),this._selectedTreeElement=null,this._treeElements=[];const e=Common.Settings.Settings.instance().createSetting("console.sidebarSelectedFilter",null),t=SDK.ConsoleModel.MessageLevel,s=[{key:FilterType.Source,text:SDK.ConsoleModel.MessageSource.ConsoleAPI,negative:!1}];this._appendGroup(_groupName.All,[],ConsoleFilter.allLevelsFilterValue(),UI.Icon.Icon.create("mediumicon-list"),e),this._appendGroup(_groupName.ConsoleAPI,s,ConsoleFilter.allLevelsFilterValue(),UI.Icon.Icon.create("mediumicon-account-circle"),e),this._appendGroup(_groupName.Error,[],ConsoleFilter.singleLevelMask(t.Error),UI.Icon.Icon.create("mediumicon-error-circle"),e),this._appendGroup(_groupName.Warning,[],ConsoleFilter.singleLevelMask(t.Warning),UI.Icon.Icon.create("mediumicon-warning-triangle"),e),this._appendGroup(_groupName.Info,[],ConsoleFilter.singleLevelMask(t.Info),UI.Icon.Icon.create("mediumicon-info-circle"),e),this._appendGroup(_groupName.Verbose,[],ConsoleFilter.singleLevelMask(t.Verbose),UI.Icon.Icon.create("mediumicon-bug"),e);const r=e.get();(this._treeElements.find(e=>e.name()===r)||this._treeElements[0]).select()}_appendGroup(e,t,s,r,o){const n=new ConsoleFilter(e,t,null,s),l=new FilterTreeElement(n,r,o);this._tree.appendChild(l),this._treeElements.push(l)}clear(){for(const e of this._treeElements)e.clear()}onMessageAdded(e){for(const t of this._treeElements)t.onMessageAdded(e)}shouldBeVisible(e){return!this._selectedTreeElement||this._selectedTreeElement._filter.shouldBeVisible(e)}_selectionChanged(e){this._selectedTreeElement=e.data,this.dispatchEventToListeners(Events.FilterSelected)}}export const Events={FilterSelected:Symbol("FilterSelected")};export class URLGroupTreeElement extends UI.TreeOutline.TreeElement{constructor(e){super(e.name),this._filter=e,this._countElement=this.listItemElement.createChild("span","count");const t=[UI.Icon.Icon.create("largeicon-navigator-file")];this.setLeadingIcons(t),this._messageCount=0}incrementAndUpdateCounter(){this._messageCount++,this._countElement.textContent=this._messageCount}}export class FilterTreeElement extends UI.TreeOutline.TreeElement{constructor(e,t,s){super(e.name),this._filter=e,this._selectedFilterSetting=s,this._urlTreeElements=new Map,this.setLeadingIcons([t]),this._messageCount=0,this._updateCounter()}clear(){this._urlTreeElements.clear(),this.removeChildren(),this._messageCount=0,this._updateCounter()}name(){return this._filter.name}onselect(e){return this._selectedFilterSetting.set(this._filter.name),super.onselect(e)}_updateCounter(){this._messageCount?1===this._messageCount?this.title=_groupSingularTitleMap.get(this._filter.name):this.title=Platform.StringUtilities.sprintf(_groupPluralTitleMap.get(this._filter.name),this._messageCount):this.title=_groupNoMessageTitleMap.get(this._filter.name),this.setExpandable(!!this.childCount())}onMessageAdded(e){const t=e.consoleMessage(),s=t.type!==SDK.ConsoleModel.MessageType.Command&&t.type!==SDK.ConsoleModel.MessageType.Result&&!t.isGroupMessage();if(!this._filter.shouldBeVisible(e)||!s)return;this._childElement(t.url).incrementAndUpdateCounter(),this._messageCount++,this._updateCounter()}_childElement(e){const t=e||null;let s=this._urlTreeElements.get(t);if(s)return s;const r=this._filter.clone(),o=t?Common.ParsedURL.ParsedURL.fromString(t):null;return r.name=t?o?o.displayName:t:Common.UIString.UIString("<other>"),r.parsedFilters.push({key:FilterType.Url,text:t,negative:!1}),s=new URLGroupTreeElement(r),t&&(s.tooltip=t),this._urlTreeElements.set(t,s),this.appendChild(s),s}}const _groupName={ConsoleAPI:"user message",All:"message",Error:"error",Warning:"warning",Info:"info",Verbose:"verbose"},_groupSingularTitleMap=new Map([[_groupName.ConsoleAPI,ls`1 user message`],[_groupName.All,ls`1 message`],[_groupName.Error,ls`1 error`],[_groupName.Warning,ls`1 warning`],[_groupName.Info,ls`1 info`],[_groupName.Verbose,ls`1 verbose`]]),_groupPluralTitleMap=new Map([[_groupName.ConsoleAPI,ls`%d user messages`],[_groupName.All,ls`%d messages`],[_groupName.Error,ls`%d errors`],[_groupName.Warning,ls`%d warnings`],[_groupName.Info,ls`%d info`],[_groupName.Verbose,ls`%d verbose`]]),_groupNoMessageTitleMap=new Map([[_groupName.ConsoleAPI,ls`No user messages`],[_groupName.All,ls`No messages`],[_groupName.Error,ls`No errors`],[_groupName.Warning,ls`No warnings`],[_groupName.Info,ls`No info`],[_groupName.Verbose,ls`No verbose`]]);