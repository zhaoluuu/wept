import*as Common from"../common/common.js";import*as UI from"../ui/ui.js";import{ConsoleView}from"./ConsoleView.js";export class ConsolePanel extends UI.Panel.Panel{constructor(){super("console"),this._view=ConsoleView.instance()}static instance(){return self.runtime.sharedInstance(ConsolePanel)}static _updateContextFlavor(){const e=ConsolePanel.instance()._view;UI.Context.Context.instance().setFlavor(ConsoleView,e.isShowing()?e:null)}wasShown(){super.wasShown();const e=WrapperView._instance;e&&e.isShowing()&&self.UI.inspectorView.setDrawerMinimized(!0),this._view.show(this.element),ConsolePanel._updateContextFlavor()}willHide(){super.willHide(),self.UI.inspectorView.setDrawerMinimized(!1),WrapperView._instance&&WrapperView._instance._showViewInWrapper(),ConsolePanel._updateContextFlavor()}searchableView(){return ConsoleView.instance().searchableView()}}export class WrapperView extends UI.Widget.VBox{constructor(){super(),this.element.classList.add("console-view-wrapper"),WrapperView._instance=this,this._view=ConsoleView.instance()}wasShown(){ConsolePanel.instance().isShowing()?self.UI.inspectorView.setDrawerMinimized(!0):this._showViewInWrapper(),ConsolePanel._updateContextFlavor()}willHide(){self.UI.inspectorView.setDrawerMinimized(!1),ConsolePanel._updateContextFlavor()}_showViewInWrapper(){this._view.show(this.element)}}export class ConsoleRevealer{reveal(e){const s=ConsoleView.instance();return s.isShowing()?(s.focus(),Promise.resolve()):(UI.ViewManager.ViewManager.instance().showView("console-view"),Promise.resolve())}}