const LighthousePort=class{on(e,s){}send(e){}close(){}};class LighthouseService{setNotify(e){this._notify=e}start(e){return Root.Runtime.queryParam("isUnderTest")&&(this._disableLoggingForTest(),e.flags.maxWaitForLoad=2e3),self.listenForStatus(e=>{this.statusUpdate(e[1])}),Promise.resolve().then(s=>{const t=e.flags;t.logLevel=t.logLevel||"info",t.channel="devtools";const o=self.setUpWorkerConnection(this),a=self.createConfig(e.categoryIDs,t.emulatedFormFactor),l=e.url;return self.runLighthouse(l,t,a,o)}).then(e=>e).catch(e=>({fatal:!0,message:e.message,stack:e.stack}))}stop(){return this.close(),Promise.resolve()}dispatchProtocolMessage(e){return this._onMessage(e.message),Promise.resolve()}dispose(){return Promise.resolve()}statusUpdate(e){this._notify("statusUpdate",{message:e})}send(e){this._notify("sendProtocolMessage",{message:e})}close(){}on(e,s){"message"===e&&(this._onMessage=s),"close"===e&&(this._onClose=s)}_disableLoggingForTest(){console.log=()=>{}}}global=self,global.isVinn=!0,global.document={},global.document.documentElement={},global.document.documentElement.style={WebkitAppearance:"WebkitAppearance"},global.LighthouseService=LighthouseService;