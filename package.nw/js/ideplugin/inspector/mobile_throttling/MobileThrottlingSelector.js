import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import{Events,throttlingManager}from"./ThrottlingManager.js";import{advancedMobilePresets,Conditions,ConditionsList,CustomConditions,mobilePresets,MobileThrottlingConditionsGroup,NoThrottlingConditions}from"./ThrottlingPresets.js";export class MobileThrottlingSelector{constructor(t,o){this._populateCallback=t,this._selectCallback=o,throttlingManager().addEventListener(Events.RateChanged,this._conditionsChanged,this),SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged,this._conditionsChanged,this),this._options=this._populateOptions(),this._conditionsChanged()}optionSelected(t){SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(t.network),throttlingManager().setCPUThrottlingRate(t.cpuThrottlingRate)}_populateOptions(){const t={title:Common.UIString.UIString("Disabled"),items:[NoThrottlingConditions]},o={title:Common.UIString.UIString("Presets"),items:mobilePresets},n={title:Common.UIString.UIString("Advanced"),items:advancedMobilePresets};return this._populateCallback([t,o,n])}_conditionsChanged(){const t=SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions(),o=throttlingManager().cpuThrottlingRate();for(let n=0;n<this._options.length;++n){const e=this._options[n];if(e&&e.network===t&&e.cpuThrottlingRate===o)return void this._selectCallback(n)}this._selectCallback(this._options.indexOf(CustomConditions))}}