import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import{networkPresets,NetworkThrottlingConditionsGroup}from"./ThrottlingPresets.js";export class NetworkThrottlingSelector{constructor(t,o,e){this._populateCallback=t,this._selectCallback=o,this._customNetworkConditionsSetting=e,this._customNetworkConditionsSetting.addChangeListener(this._populateOptions,this),SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged,()=>{this._networkConditionsChanged()},this),this._options,this._populateOptions()}revealAndUpdate(){Common.Revealer.reveal(this._customNetworkConditionsSetting),this._networkConditionsChanged()}optionSelected(t){SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(t)}_populateOptions(){const t={title:Common.UIString.UIString("Disabled"),items:[SDK.NetworkManager.NoThrottlingConditions]},o={title:Common.UIString.UIString("Presets"),items:networkPresets},e={title:Common.UIString.UIString("Custom"),items:this._customNetworkConditionsSetting.get()};if(this._options=this._populateCallback([t,o,e]),!this._networkConditionsChanged())for(let t=this._options.length-1;t>=0;t--)if(this._options[t]){this.optionSelected(this._options[t]);break}}_networkConditionsChanged(){const t=SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();for(let o=0;o<this._options.length;++o){const e=this._options[o];if(e&&e.download===t.download&&e.upload===t.upload&&e.latency===t.latency&&e.title===t.title)return this._selectCallback(o),!0}return!1}}