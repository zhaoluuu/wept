import*as Common from"../common/common.js";import*as Host from"../host/host.js";export class FileManager extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._saveCallbacks=new Map,Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.SavedURL,this._savedURL,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.CanceledSaveURL,this._canceledSavedURL,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.AppendedToURL,this._appendedToURL,this)}save(e,t,s){const n=new Promise(t=>this._saveCallbacks.set(e,t));return Host.InspectorFrontendHost.InspectorFrontendHostInstance.save(e,t,s),n}_savedURL(e){const t=e.data.url,s=this._saveCallbacks.get(t);this._saveCallbacks.delete(t),s&&s({fileSystemPath:e.data.fileSystemPath})}_canceledSavedURL(e){const t=e.data,s=this._saveCallbacks.get(t);this._saveCallbacks.delete(t),s&&s(null)}append(e,t){Host.InspectorFrontendHost.InspectorFrontendHostInstance.append(e,t)}close(e){Host.InspectorFrontendHost.InspectorFrontendHostInstance.close(e)}_appendedToURL(e){const t=e.data;this.dispatchEventToListeners(Events.AppendedToURL,t)}}export const Events={AppendedToURL:Symbol("AppendedToURL")};