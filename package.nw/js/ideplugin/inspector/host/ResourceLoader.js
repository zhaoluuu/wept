import*as Common from"../common/common.js";import{InspectorFrontendHostInstance}from"./InspectorFrontendHost.js";import{LoadNetworkResourceResult}from"./InspectorFrontendHostAPI.js";export const ResourceLoader={};let _lastStreamId=0;const _boundStreams={},_bindOutputStream=function(e){return _boundStreams[++_lastStreamId]=e,_lastStreamId},_discardOutputStream=function(e){_boundStreams[e].close(),delete _boundStreams[e]};export const streamWrite=function(e,r){_boundStreams[e].write(r)};export let LoadErrorDescription;export let load=function(e,r,t){const o=new Common.StringOutputStream.StringOutputStream;loadAsStream(e,r,o,(function(e,r,n){t(e,r,o.data(),n)}))};export function setLoadForTest(e){load=e}function getNetErrorCategory(e){return e>-100?ls`System error`:e>-200?ls`Connection error`:e>-300?ls`Certificate error`:e>-400?ls`HTTP error`:e>-500?ls`Cache error`:e>-600?ls`Signed Exchange error`:e>-700?ls`FTP error`:e>-800?ls`Certificate manager error`:e>-900?ls`DNS resolver error`:ls`Unknown error`}function isHTTPError(e){return e<=-300&&e>-400}function createErrorMessageFromResponse(e){const{statusCode:r,netError:t,netErrorName:o,urlValid:n,messageOverride:s}=e;let a="";const i=r>=200&&r<300;if("string"==typeof s)a=s;else if(!i)if(void 0===t)a=!1===n?ls`Invalid URL`:ls`Unknown error`;else if(0!==t)if(isHTTPError(t))a+=ls`HTTP error: status code ${r}, ${o}`;else{a=`${getNetErrorCategory(t)}: ${o}`}return console.assert(i===(0===a.length)),{success:i,description:{statusCode:r,netError:t,netErrorName:o,urlValid:n,message:a}}}const loadXHR=e=>new Promise((r,t)=>{const o=new XMLHttpRequest;o.withCredentials=!1,o.open("GET",e,!0),o.onreadystatechange=function(){if(o.readyState===XMLHttpRequest.DONE){if(200!==o.status)return o.onreadystatechange=null,void t(new Error(String(o.status)));o.onreadystatechange=null,r(o.responseText)}},o.send(null)});export const loadAsStream=function(e,r,t,o){const n=_bindOutputStream(t);if(new Common.ParsedURL.ParsedURL(e).isDataURL())return void loadXHR(e).then((function(e){r=n,t=e,_boundStreams[r].write(t),a({statusCode:200});var r,t})).catch((function(e){a({statusCode:404,messageOverride:ls`Decoding Data URL failed`})}));const s=[];if(r)for(const e in r)s.push(e+": "+r[e]);function a(e){if(o){const{success:r,description:t}=createErrorMessageFromResponse(e);o(r,e.headers||{},t)}var r;_boundStreams[r=n].close(),delete _boundStreams[r]}InspectorFrontendHostInstance.loadNetworkResource(e,s.join("\r\n"),n,a)};