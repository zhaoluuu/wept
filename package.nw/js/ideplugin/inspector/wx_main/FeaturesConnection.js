import{contain,nextTick,startWith}from"../third_party/licia.js";import{getProxyPort,getPort,isRemoteDebugGame}from"./util.js";const shadowRootParentIdSet=new Set,pageFrameIdSet=new Set;export function setTimestampOffset(e){const{method:t,params:a}=e;if("Network.requestWillBeSent"===t&&contain(a.request.url,`http://127.0.0.1:${getProxyPort()}/calibration`))return WxMain.networkManager.setTimestampOffset(a.wallTime-a.timestamp),!0}export function monitorDebugger(e){"Debugger.paused"===e.method?alert("debugger:paused"):"Debugger.resumed"===e.method&&alert("debugger:resumed")}let showAllRequests=!1;nextTick(()=>{wxMain.on(WxMain.Events.showAllRequests,()=>{showAllRequests=!0})});export function hideWebdebuggerRequest(e){const{method:t,params:a}=e;if("Network.requestWillBeSent"===t&&contain(a.request.url,`http://127.0.0.1:${getProxyPort()}/__webdebugger__`))return!0}export function hideOpenTagResources(e,t){const a=`http://127.0.0.1:${getProxyPort()}/__webdebugger__`,{method:r,params:s}=e;if("string"==typeof r&&r.startsWith("Page"))switch(r){case"Page.frameAttached":if(s&&s.stack&&s.stack.callFrames&&Array.isArray(s.stack.callFrames)&&s.stack.callFrames.some(e=>e&&e.url.includes(a)))return pageFrameIdSet.add(s.frameId),!0;break;case"Page.frameStartedLoading":if(s&&s.frameId&&pageFrameIdSet.has(s.frameId))return!0;break;case"Page.frameNavigated":if(s&&s.frame&&s.frame.id&&pageFrameIdSet.has(s.frame.id))return!0}if("string"==typeof r&&r.startsWith("Runtime")&&"Runtime.executionContextCreated"===r&&s&&s.context&&s.context.auxData&&s.context.auxData.frameId&&pageFrameIdSet.has(s.context.auxData.frameId))return!0;if("string"==typeof r&&r.startsWith("Debugger")&&"Debugger.scriptParsed"===r&&s&&s.url&&s.url.includes(a))return!0;if("string"==typeof r&&r.startsWith("DOM")){let o=!1,n=!1,i=void 0;switch(r){case"DOM.childNodeInserted":if(s&&s.node&&s.node.attributes&&"SCRIPT"===s.node.nodeName)for(const e of s.node.attributes)e.includes(a)&&(o=!0);break;case"DOM.documentUpdated":shadowRootParentIdSet.clear(),pageFrameIdSet.clear();break;case"DOM.shadowRootPushed":s&&s.root&&shadowRootParentIdSet.has(s.hostId)&&(o=!0);break;case"DOM.setChildNodes":s&&s.nodes&&s.nodes.forEach((e,t)=>{if(e.nodeName.startsWith("WX-OPEN-"))shadowRootParentIdSet.add(e.nodeId),e.shadowRoots&&(delete e.shadowRoots,n=!0);else if("SCRIPT"===e.nodeName&&e.attributes)for(const r of e.attributes)r.includes(a)&&(i=t,n=!0)}),void 0!==i&&s.nodes.splice(i,1)}if(o)return o;if(n)return t(e),!0}}export function hideRemoteDebugResources(e){if(isRemoteDebugGame)return;const{method:t,params:a}=e,r=["WAServiceMainContext.js","https://lib/","wasm://"];if("string"==typeof t&&t.startsWith("Debugger")&&"Debugger.scriptParsed"===t&&a&&a.url){const e=a.url;if(r.some(t=>e.startsWith(t))||!/^(http|https|weapp)/.test(e))return!0}}export function hideWebSocket(e){if(!showAllRequests&&"Network.webSocketCreated"===e.method){const t=e.params.url||"";if(contain(t,"ws://127.0.0.1:"+getPort()))return!0}}export function addDebuggee(e){if("Network.requestWillBeSent"===e.method){const t=e.params;!!t.frompageframe&&WxMain.networkManager.addDebuggee(t.requestId,t.debuggee)}}export function addCustomRequest(e,t=!1){const{method:a,params:r}=e;if(/^Network\./.test(a)){let a=t||r.frompageframe;a||e.custom&&e.timestampOffsetRequired&&(a=!0),a&&WxMain.networkManager.addCustomRequest(r.requestId)}}export function transTimestamp(e,t){const{method:a,params:r}=e;if(e.custom&&e.timestampOffsetRequired)switch(a){case"Network.requestWillBeSent":case"Network.dataReceived":case"Network.loadingFailed":case"Network.loadingFinished":return r.wallTime=r.timestamp,r.timestamp-=WxMain.networkManager.getTimestampOffset(),t(JSON.stringify(e)),!0;case"Network.responseReceived":return r.timestamp-=WxMain.networkManager.getTimestampOffset(),r.response.timing&&(r.response.timing.requestTime-=WxMain.networkManager.getTimestampOffset()),t(JSON.stringify(e)),!0}}export function getResponseBody(e){const{method:t,params:a}=e;if("Network.getResponseBody"===t){const t=a.requestId;if(WxMain.networkManager.isCustomRequest(t)){const r=WxMain.networkManager.getDebuggee(t);return r&&(a.debuggee=r),wxMain.getMessenger().send({command:"Network.getResponseBody",data:e}),!0}}}export function disableTouchWhenInspect(e){"Overlay.setInspectMode"===e.method&&("searchForNode"===e.params.mode?(wxMain.emit(WxMain.Events.enableTouchEmulation,!1),wxMain.emit(WxMain.Events.lockTouchEmulation,!0)):(wxMain.emit(WxMain.Events.lockTouchEmulation,!1),wxMain.emit(WxMain.Events.enableTouchEmulation,!0)))}export function correctLogStack(e,t){if("Runtime.consoleAPICalled"===e.method){const{type:a,stackTrace:r}=e.params;if("error"!==a&&"warning"!==a)return;const{callFrames:s}=r;if(startWith(s[0].functionName,"console."))return s.shift(),t(JSON.stringify(e)),!0}}export const disableMsgToCrashedWebView={disable:!1,send(){if(this.disable)return!0},on(e){"Inspector.targetCrashed"===e.method?this.disable=!0:"Inspector.targetReloadedAfterCrash"===e.medthod&&(this.disable=!1)}};