import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as ARIAUtils from"./ARIAUtils.js";import{Icon}from"./Icon.js";import{KeyboardShortcut,Modifiers}from"./KeyboardShortcut.js";import{bindCheckbox}from"./SettingsUI.js";import{Suggestions}from"./SuggestBox.js";import{Events,TextPrompt}from"./TextPrompt.js";import{ToolbarButton,ToolbarSettingToggle}from"./Toolbar.js";import{CheckboxLabel}from"./UIUtils.js";import{HBox}from"./Widget.js";export class FilterBar extends HBox{constructor(t,e){super(),this.registerRequiredCSS("ui/filter.css"),this._enabled=!0,this.element.classList.add("filter-bar"),this._stateSetting=Common.Settings.Settings.instance().createSetting("filterBar-"+t+"-toggled",!!e),this._filterButton=new ToolbarSettingToggle(this._stateSetting,"largeicon-filter",Common.UIString.UIString("Filter")),this._filters=[],this._updateFilterBar(),this._stateSetting.addChangeListener(this._updateFilterBar.bind(this))}filterButton(){return this._filterButton}addFilter(t){this._filters.push(t),this.element.appendChild(t.element()),t.addEventListener(FilterUI.Events.FilterChanged,this._filterChanged,this),this._updateFilterButton()}setEnabled(t){this._enabled=t,this._filterButton.setEnabled(t),this._updateFilterBar()}forceShowFilterBar(){this._alwaysShowFilters=!0,this._updateFilterBar()}showOnce(){this._stateSetting.set(!0)}_filterChanged(t){this._updateFilterButton(),this.dispatchEventToListeners(FilterBar.Events.Changed)}wasShown(){super.wasShown(),this._updateFilterBar()}_updateFilterBar(){this.parentWidget()&&!this._showingWidget&&(this.visible()?(this._showingWidget=!0,this.showWidget(),this._showingWidget=!1):this.hideWidget())}focus(){for(let t=0;t<this._filters.length;++t)if(this._filters[t]instanceof TextFilterUI){this._filters[t].focus();break}}_updateFilterButton(){let t=!1;for(const e of this._filters)t=t||e.isActive();this._filterButton.setDefaultWithRedColor(t),this._filterButton.setToggleWithRedColor(t)}clear(){this.element.removeChildren(),this._filters=[],this._updateFilterButton()}setting(){return this._stateSetting}visible(){return this._alwaysShowFilters||this._stateSetting.get()&&this._enabled}}FilterBar.Events={Changed:Symbol("Changed")};export class FilterUI extends Common.EventTarget.EventTarget{isActive(){}element(){}}FilterUI.Events={FilterChanged:Symbol("FilterChanged")};export class TextFilterUI extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._filterElement=createElement("div"),this._filterElement.className="filter-text-filter";const t=this._filterElement.createChild("div","filter-input-container");this._filterInputElement=t.createChild("span","filter-input-field"),this._prompt=new TextPrompt,this._prompt.initialize(this._completions.bind(this)," "),this._proxyElement=this._prompt.attach(this._filterInputElement),this._proxyElement.title=Common.UIString.UIString("e.g. /small[\\d]+/ url:a.com/b"),this._prompt.setPlaceholder(Common.UIString.UIString("Filter")),this._prompt.addEventListener(Events.TextChanged,this._valueChanged.bind(this)),this._suggestionProvider=null;const e=t.createChild("div","filter-input-clear-button");e.appendChild(Icon.create("mediumicon-gray-cross-hover","filter-cancel-button")),e.addEventListener("click",()=>{this.clear(),this.focus()}),this._updateEmptyStyles()}_completions(t,e,i){return this._suggestionProvider?this._suggestionProvider(t,e,i):Promise.resolve([])}isActive(){return!!this._prompt.text()}element(){return this._filterElement}value(){return this._prompt.textWithCurrentSuggestion()}setValue(t){this._prompt.setText(t),this._valueChanged()}focus(){this._filterInputElement.focus()}setSuggestionProvider(t){this._prompt.clearAutocomplete(),this._suggestionProvider=t}_valueChanged(){this.dispatchEventToListeners(FilterUI.Events.FilterChanged,null),this._updateEmptyStyles()}_updateEmptyStyles(){this._filterElement.classList.toggle("filter-text-empty",!this._prompt.text())}clear(){this.setValue("")}}export class NamedBitSetFilterUI extends Common.ObjectWrapper.ObjectWrapper{constructor(t,e){super(),this._filtersElement=document.createElement("div"),this._filtersElement.classList.add("filter-bitset-filter"),ARIAUtils.markAsListBox(this._filtersElement),ARIAUtils.markAsMultiSelectable(this._filtersElement),this._filtersElement.title=Common.UIString.UIString("%sClick to select multiple types",KeyboardShortcut.shortcutToString("",Modifiers.CtrlOrMeta)),this._allowedTypes={},this._typeFilterElements=[],this._addBit(NamedBitSetFilterUI.ALL_TYPES,Common.UIString.UIString("All")),this._typeFilterElements[0].tabIndex=0,this._filtersElement.createChild("div","filter-bitset-filter-divider");for(let e=0;e<t.length;++e)this._addBit(t[e].name,t[e].label,t[e].title);e?(this._setting=e,e.addChangeListener(this._settingChanged.bind(this)),this._settingChanged()):this._toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES,!1)}reset(){this._toggleTypeFilter(NamedBitSetFilterUI.ALL_TYPES,!1)}isActive(){return!this._allowedTypes[NamedBitSetFilterUI.ALL_TYPES]}element(){return this._filtersElement}accept(t){return!!this._allowedTypes[NamedBitSetFilterUI.ALL_TYPES]||!!this._allowedTypes[t]}_settingChanged(){const t=this._setting.get();this._allowedTypes={};for(const e of this._typeFilterElements)t[e.typeName]&&(this._allowedTypes[e.typeName]=!0);this._update()}_update(){(0===Object.keys(this._allowedTypes).length||this._allowedTypes[NamedBitSetFilterUI.ALL_TYPES])&&(this._allowedTypes={},this._allowedTypes[NamedBitSetFilterUI.ALL_TYPES]=!0);for(const t of this._typeFilterElements){const e=t.typeName,i=!!this._allowedTypes[e];t.classList.toggle("selected",i),ARIAUtils.setSelected(t,i)}this.dispatchEventToListeners(FilterUI.Events.FilterChanged,null)}_addBit(t,e,i){const s=this._filtersElement.createChild("span",t);s.tabIndex=-1,s.typeName=t,s.createTextChild(e),ARIAUtils.markAsOption(s),i&&(s.title=i),s.addEventListener("click",this._onTypeFilterClicked.bind(this),!1),s.addEventListener("keydown",this._onTypeFilterKeydown.bind(this),!1),this._typeFilterElements.push(s)}_onTypeFilterClicked(t){let e;e=Host.Platform.isMac()?t.metaKey&&!t.ctrlKey&&!t.altKey&&!t.shiftKey:t.ctrlKey&&!t.metaKey&&!t.altKey&&!t.shiftKey,this._toggleTypeFilter(t.target.typeName,e)}_onTypeFilterKeydown(t){const e=t.target;e&&("ArrowLeft"===t.key||"ArrowUp"===t.key?this._keyFocusNextBit(e,!0)&&t.consume(!0):"ArrowRight"===t.key||"ArrowDown"===t.key?this._keyFocusNextBit(e,!1)&&t.consume(!0):isEnterOrSpaceKey(t)&&this._onTypeFilterClicked(t))}_keyFocusNextBit(t,e){const i=this._typeFilterElements.indexOf(t);if(-1===i)return!1;const s=e?i-1:i+1;if(s<0||s>=this._typeFilterElements.length)return!1;const r=this._typeFilterElements[s];return r.tabIndex=0,t.tabIndex=-1,r.focus(),!0}_toggleTypeFilter(t,e){e&&t!==NamedBitSetFilterUI.ALL_TYPES?this._allowedTypes[NamedBitSetFilterUI.ALL_TYPES]=!1:this._allowedTypes={},this._allowedTypes[t]=!this._allowedTypes[t],this._setting?this._setting.set(this._allowedTypes):this._update()}}NamedBitSetFilterUI.ALL_TYPES="all";export class CheckboxFilterUI extends Common.ObjectWrapper.ObjectWrapper{constructor(t,e,i,s){super(),this._filterElement=document.createElement("div"),this._filterElement.classList.add("filter-checkbox-filter"),this._activeWhenChecked=!!i,this._label=CheckboxLabel.create(e),this._filterElement.appendChild(this._label),this._checkboxElement=this._label.checkboxElement,s?bindCheckbox(this._checkboxElement,s):this._checkboxElement.checked=!0,this._checkboxElement.addEventListener("change",this._fireUpdated.bind(this),!1)}isActive(){return this._activeWhenChecked===this._checkboxElement.checked}checked(){return this._checkboxElement.checked}setChecked(t){this._checkboxElement.checked=t}element(){return this._filterElement}labelElement(){return this._label}_fireUpdated(){this.dispatchEventToListeners(FilterUI.Events.FilterChanged,null)}setColor(t,e){this._label.backgroundColor=t,this._label.borderColor=e}}export let Item;