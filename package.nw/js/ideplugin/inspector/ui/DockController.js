import*as Common from"../common/common.js";import*as Host from"../host/host.js";import{ActionDelegate}from"./ActionDelegate.js";import{Context}from"./Context.js";import{Provider,ToolbarButton,ToolbarItem}from"./Toolbar.js";export class DockController extends Common.ObjectWrapper.ObjectWrapper{constructor(t){if(super(),this._canDock=t,this._closeButton=new ToolbarButton(Common.UIString.UIString("Close"),"largeicon-delete"),this._closeButton.addEventListener(ToolbarButton.Events.Click,Host.InspectorFrontendHost.InspectorFrontendHostInstance.closeWindow.bind(Host.InspectorFrontendHost.InspectorFrontendHostInstance)),!t)return this._dockSide=State.Undocked,void this._closeButton.setVisible(!1);this._states=[State.DockedToRight,State.DockedToBottom,State.DockedToLeft,State.Undocked],this._currentDockStateSetting=Common.Settings.Settings.instance().moduleSetting("currentDockState"),this._currentDockStateSetting.addChangeListener(this._dockSideChanged,this),this._lastDockStateSetting=Common.Settings.Settings.instance().createSetting("lastDockState","bottom"),-1===this._states.indexOf(this._currentDockStateSetting.get())&&this._currentDockStateSetting.set("right"),-1===this._states.indexOf(this._lastDockStateSetting.get())&&this._currentDockStateSetting.set("bottom")}initialize(){this._canDock&&(this._titles=[Common.UIString.UIString("Dock to right"),Common.UIString.UIString("Dock to bottom"),Common.UIString.UIString("Dock to left"),Common.UIString.UIString("Undock into separate window")],this._dockSideChanged())}_dockSideChanged(){this.setDockSide(this._currentDockStateSetting.get())}dockSide(){return this._dockSide}canDock(){return this._canDock}isVertical(){return this._dockSide===State.DockedToRight||this._dockSide===State.DockedToLeft}setDockSide(t){if(-1===this._states.indexOf(t)&&(t=this._states[0]),this._dockSide===t)return;this._dockSide&&this._lastDockStateSetting.set(this._dockSide),this._savedFocus=document.deepActiveElement();const e={from:this._dockSide,to:t};this.dispatchEventToListeners(Events.BeforeDockSideChanged,e),console.timeStamp("DockController.setIsDocked"),this._dockSide=t,this._currentDockStateSetting.set(t),Host.InspectorFrontendHost.InspectorFrontendHostInstance.setIsDocked(t!==State.Undocked,this._setIsDockedResponse.bind(this,e)),this._closeButton.setVisible(this._dockSide!==State.Undocked),this.dispatchEventToListeners(Events.DockSideChanged,e)}_setIsDockedResponse(t){this.dispatchEventToListeners(Events.AfterDockSideChanged,t),this._savedFocus&&(this._savedFocus.focus(),this._savedFocus=null)}_toggleDockSide(){if(this._lastDockStateSetting.get()===this._currentDockStateSetting.get()){const t=this._states.indexOf(this._currentDockStateSetting.get())||0;this._lastDockStateSetting.set(this._states[(t+1)%this._states.length])}this.setDockSide(this._lastDockStateSetting.get())}}export const State={DockedToBottom:"bottom",DockedToRight:"right",DockedToLeft:"left",Undocked:"undocked"};export const Events={BeforeDockSideChanged:Symbol("BeforeDockSideChanged"),DockSideChanged:Symbol("DockSideChanged"),AfterDockSideChanged:Symbol("AfterDockSideChanged")};export class ToggleDockActionDelegate{handleAction(t,e){return self.UI.dockController._toggleDockSide(),!0}}export class CloseButtonProvider{item(){return self.UI.dockController._closeButton}}