import*as ARIAUtils from"./ARIAUtils.js";import{Keys}from"./KeyboardShortcut.js";import{ElementFocusRestorer,markBeingEdited}from"./UIUtils.js";export class InplaceEditor{static startEditing(e,t){return InplaceEditor._defaultInstance||(InplaceEditor._defaultInstance=new InplaceEditor),InplaceEditor._defaultInstance.startEditing(e,t)}editorContent(e){const t=e.element;return"INPUT"===t.tagName&&"text"===t.type?t.value:t.textContent}setUpEditor(e){const t=e.element;t.classList.add("editing"),t.setAttribute("contenteditable","plaintext-only");const n=t.getAttribute("role");ARIAUtils.markAsTextBox(t),e.oldRole=n;const o=t.getAttribute("tabIndex");("number"!=typeof o||o<0)&&(t.tabIndex=0),this._focusRestorer=new ElementFocusRestorer(t),e.oldTabIndex=o}closeEditor(e){const t=e.element;t.classList.remove("editing"),t.removeAttribute("contenteditable"),"string"!=typeof e.oldRole?t.removeAttribute("role"):t.role=e.oldRole,"number"!=typeof e.oldTabIndex?t.removeAttribute("tabIndex"):t.tabIndex=e.oldTabIndex,t.scrollTop=0,t.scrollLeft=0}cancelEditing(e){const t=e.element;"INPUT"===t.tagName&&"text"===t.type?t.value=e.oldText:t.textContent=e.oldText}augmentEditingHandle(e,t){}startEditing(e,t){if(!markBeingEdited(e,!0))return null;t=t||new Config((function(){}),(function(){}));const n={element:e,config:t},o=t.commitHandler,i=t.cancelHandler,r=t.pasteHandler,s=t.context;let l="";const d=this;function a(n){t.blurHandler&&!t.blurHandler(e,n)||m.call(e)}function c(){markBeingEdited(e,!1),e.removeEventListener("blur",a,!1),e.removeEventListener("keydown",b,!0),r&&e.removeEventListener("paste",E,!0),d._focusRestorer&&d._focusRestorer.restore(),d.closeEditor(n)}function u(){d.cancelEditing(n),c(),i(this,s)}function m(){c(),o(this,d.editorContent(n),n.oldText,s,l)}function p(t,n){"commit"===t?(m.call(e),n.consume(!0)):"cancel"===t?(u.call(e),n.consume(!0)):t&&t.startsWith("move-")&&(l=t.substring(5),"Tab"===n.key&&n.consume(!0),a())}function E(e){p(r(e),e)}function b(e){let n=function(e){return isEnterKey(e)?"commit":e.keyCode===Keys.Esc.code||"Escape"===e.key?"cancel":"Tab"===e.key?"move-"+(e.shiftKey?"backward":"forward"):""}(e);!n&&t.postKeydownFinishHandler&&(n=t.postKeydownFinishHandler(e)),p(n,e)}this.setUpEditor(n),n.oldText=this.editorContent(n),e.addEventListener("blur",a,!1),e.addEventListener("keydown",b,!0),r&&e.addEventListener("paste",E,!0);const f={cancel:u.bind(e),commit:m.bind(e)};return this.augmentEditingHandle(n,f),f}}export class Config{constructor(e,t,n,o){this.commitHandler=e,this.cancelHandler=t,this.context=n,this.blurHandler=o,this.pasteHandler,this.postKeydownFinishHandler}setPasteHandler(e){this.pasteHandler=e}setPostKeydownFinishHandler(e){this.postKeydownFinishHandler=e}}export let Controller;