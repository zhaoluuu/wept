import*as Common from"../common/common.js";import*as ARIAUtils from"./ARIAUtils.js";import{Toolbar,ToolbarButton}from"./Toolbar.js";import{createInput,createTextButton,ElementFocusRestorer}from"./UIUtils.js";import{VBox}from"./Widget.js";export class ListWidget extends VBox{constructor(t,e=!0){super(!0,e),this.registerRequiredCSS("ui/listWidget.css"),this._delegate=t,this._list=this.contentElement.createChild("div","list"),this._lastSeparator=!1,this._focusRestorer=null,this._items=[],this._editable=[],this._elements=[],this._editor=null,this._editItem=null,this._editElement=null,this._emptyPlaceholder=null,this._updatePlaceholder()}clear(){this._items=[],this._editable=[],this._elements=[],this._lastSeparator=!1,this._list.removeChildren(),this._updatePlaceholder(),this._stopEditing()}appendItem(t,e){if(this._lastSeparator&&this._items.length){const t=document.createElement("div");t.classList.add("list-separator"),this._list.appendChild(t)}this._lastSeparator=!1,this._items.push(t),this._editable.push(e);const i=this._list.createChild("div","list-item");i.appendChild(this._delegate.renderItem(t,e)),e&&(i.classList.add("editable"),i.tabIndex=0,i.appendChild(this._createControls(t,i))),this._elements.push(i),this._updatePlaceholder()}appendSeparator(){this._lastSeparator=!0}removeItem(t){this._editItem===this._items[t]&&this._stopEditing();const e=this._elements[t],i=e.previousElementSibling,s=i&&i.classList.contains("list-separator"),n=e.nextElementSibling,l=n&&n.classList.contains("list-separator");!s||!l&&n||i.remove(),l&&!i&&n.remove(),e.remove(),this._elements.splice(t,1),this._items.splice(t,1),this._editable.splice(t,1),this._updatePlaceholder()}addNewItem(t,e){this._startEditing(e,null,this._elements[t]||null)}setEmptyPlaceholder(t){this._emptyPlaceholder=t,this._updatePlaceholder()}_createControls(t,e){const i=document.createElement("div");i.classList.add("controls-container"),i.classList.add("fill"),i.createChild("div","controls-gradient");const s=i.createChild("div","controls-buttons"),n=new Toolbar("",s),l=new ToolbarButton(Common.UIString.UIString("Edit"),"largeicon-edit");l.addEventListener(ToolbarButton.Events.Click,function(){const i=this._elements.indexOf(e),s=this._elements[i+1]||null;this._startEditing(t,e,s)}.bind(this)),n.appendToolbarItem(l);const o=new ToolbarButton(Common.UIString.UIString("Remove"),"largeicon-trash-bin");return o.addEventListener(ToolbarButton.Events.Click,function(){const t=this._elements.indexOf(e);this.element.focus(),this._delegate.removeItemRequested(this._items[t],t)}.bind(this)),n.appendToolbarItem(o),i}wasShown(){super.wasShown(),this._stopEditing()}_updatePlaceholder(){this._emptyPlaceholder&&(this._elements.length||this._editor?this._emptyPlaceholder.remove():this._list.appendChild(this._emptyPlaceholder))}_startEditing(t,e,i){if(e&&this._editElement===e)return;this._stopEditing(),this._focusRestorer=new ElementFocusRestorer(this.element),this._list.classList.add("list-editing"),this._editItem=t,this._editElement=e,e&&e.classList.add("hidden");const s=e?this._elements.indexOf(e):-1;this._editor=this._delegate.beginEdit(t),this._updatePlaceholder(),this._list.insertBefore(this._editor.element,i),this._editor.beginEdit(t,s,e?Common.UIString.UIString("Save"):Common.UIString.UIString("Add"),this._commitEditing.bind(this),this._stopEditing.bind(this))}_commitEditing(){const t=this._editItem,e=!this._editElement,i=this._editor;this._stopEditing(),this._delegate.commitEdit(t,i,e)}_stopEditing(){this._list.classList.remove("list-editing"),this._focusRestorer&&this._focusRestorer.restore(),this._editElement&&this._editElement.classList.remove("hidden"),this._editor&&this._editor.element.parentElement&&this._editor.element.remove(),this._editor=null,this._editItem=null,this._editElement=null,this._updatePlaceholder()}}export class Delegate{renderItem(t,e){}removeItemRequested(t,e){}beginEdit(t){}commitEdit(t,e,i){}}export class Editor{constructor(){this.element=document.createElement("div"),this.element.classList.add("editor-container"),this.element.addEventListener("keydown",e.bind(null,isEscKey,this._cancelClicked.bind(this)),!1),this.element.addEventListener("keydown",e.bind(null,isEnterKey,this._commitClicked.bind(this)),!1),this._contentElement=this.element.createChild("div","editor-content");const t=this.element.createChild("div","editor-buttons");function e(t,e,i){t(i)&&(i.consume(!0),e())}this._commitButton=createTextButton("",this._commitClicked.bind(this),"",!0),t.appendChild(this._commitButton),this._cancelButton=createTextButton(Common.UIString.UIString("Cancel"),this._cancelClicked.bind(this)),this._cancelButton.addEventListener("keydown",e.bind(null,isEnterKey,this._cancelClicked.bind(this)),!1),t.appendChild(this._cancelButton),this._errorMessageContainer=this.element.createChild("div","list-widget-input-validation-error"),ARIAUtils.markAsAlert(this._errorMessageContainer),this._controls=[],this._controlByName=new Map,this._validators=[],this._commit=null,this._cancel=null,this._item=null,this._index=-1}contentElement(){return this._contentElement}createInput(t,e,i,s){const n=createInput("",e);return n.placeholder=i,n.addEventListener("input",this._validateControls.bind(this,!1),!1),n.addEventListener("blur",this._validateControls.bind(this,!1),!1),ARIAUtils.setAccessibleName(n,i),this._controlByName.set(t,n),this._controls.push(n),this._validators.push(s),n}createSelect(t,e,i,s){const n=document.createElement("select");n.classList.add("chrome-select");for(let t=0;t<e.length;++t){const i=n.createChild("option");i.value=e[t],i.textContent=e[t]}return s&&(n.title=s,ARIAUtils.setAccessibleName(n,s)),n.addEventListener("input",this._validateControls.bind(this,!1),!1),n.addEventListener("blur",this._validateControls.bind(this,!1),!1),this._controlByName.set(t,n),this._controls.push(n),this._validators.push(i),n}control(t){return this._controlByName.get(t)}_validateControls(t){let e=!0;this._errorMessageContainer.textContent="";for(let i=0;i<this._controls.length;++i){const s=this._controls[i],{valid:n,errorMessage:l}=this._validators[i].call(null,this._item,this._index,s);s.classList.toggle("error-input",!n&&!t),n||t?ARIAUtils.setInvalid(s,!1):ARIAUtils.setInvalid(s,!0),t||!l||this._errorMessageContainer.textContent||(this._errorMessageContainer.textContent=l),e&=n}this._commitButton.disabled=!e}beginEdit(t,e,i,s,n){this._commit=s,this._cancel=n,this._item=t,this._index=e,this._commitButton.textContent=i,this.element.scrollIntoViewIfNeeded(!1),this._controls.length&&this._controls[0].focus(),this._validateControls(!0)}_commitClicked(){if(this._commitButton.disabled)return;const t=this._commit;this._commit=null,this._cancel=null,this._item=null,this._index=-1,t()}_cancelClicked(){const t=this._cancel;this._commit=null,this._cancel=null,this._item=null,this._index=-1,t()}}export let ValidatorResult;