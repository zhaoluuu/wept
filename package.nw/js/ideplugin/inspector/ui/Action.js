import*as Common from"../common/common.js";import*as Root from"../root/root.js";import{ActionDelegate}from"./ActionDelegate.js";import{Context}from"./Context.js";class ActionRuntimeExtensionDescriptor extends Root.Runtime.RuntimeExtensionDescriptor{constructor(){super(),this.iconClass,this.toggledIconClass,this.toggleWithRedColor,this.category,this.tags,this.toggleable,this.options}}export class Action extends Common.ObjectWrapper.ObjectWrapper{constructor(t){super(),this._extension=t,this._enabled=!0,this._toggled=!1}id(){return this._actionDescriptor().actionId||""}extension(){return this._extension}async execute(){if(!this._extension.canInstantiate())return!1;const t=await this._extension.instance(),e=this.id();return t.handleAction(Context.instance(),e)}icon(){return this._actionDescriptor().iconClass||""}toggledIcon(){return this._actionDescriptor().toggledIconClass||""}toggleWithRedColor(){return!!this._actionDescriptor().toggleWithRedColor}setEnabled(t){this._enabled!==t&&(this._enabled=t,this.dispatchEventToListeners(Events.Enabled,t))}enabled(){return this._enabled}category(){return ls`${this._actionDescriptor().category||""}`}tags(){return this._actionDescriptor().tags||""}toggleable(){return!!this._actionDescriptor().toggleable}title(){let t=this._extension.title()||"";const e=this._actionDescriptor().options;if(e)for(const o of e)o.value!==this._toggled&&(t=ls`${o.title}`);return t}toggled(){return this._toggled}setToggled(t){console.assert(this.toggleable(),"Shouldn't be toggling an untoggleable action",this.id()),this._toggled!==t&&(this._toggled=t,this.dispatchEventToListeners(Events.Toggled,t))}_actionDescriptor(){return this._extension.descriptor()}}export const Events={Enabled:Symbol("Enabled"),Toggled:Symbol("Toggled")};