import*as Common from"../common/common.js";import*as Root from"../root/root.js";import*as ARIAUtils from"./ARIAUtils.js";import{InspectorView}from"./InspectorView.js";import{CheckboxLabel}from"./UIUtils.js";export const createSettingCheckbox=function(e,t,n,o){const r=CheckboxLabel.create(e);o&&(r.title=o);const i=r.checkboxElement;if(i.name=e,bindCheckbox(i,t),n)return r;const c=document.createElement("p");return c.appendChild(r),c};const createSettingSelect=function(e,t,n,o,r){const i=document.createElement("p"),c=i.createChild("label"),s=i.createChild("select","chrome-select");c.textContent=e,r&&(i.classList.add("chrome-select-label"),c.createChild("p").textContent=r),ARIAUtils.bindLabelToControl(c,s);for(const e of t){const t=e.raw?e.text:Common.UIString.UIString(e.text);s.add(new Option(t,e.value))}let l=null;return n&&(l=i.createChild("span","reload-warning hidden"),l.textContent=ls`${"*"}Requires reload`,ARIAUtils.markAsAlert(l)),o.addChangeListener(a),a(),s.addEventListener("change",(function(){o.set(t[s.selectedIndex].value),l&&(l.classList.remove("hidden"),InspectorView.instance().displayReloadRequiredWarning(ls`One or more settings have changed which requires a reload to take effect.`))}),!1),i;function a(){const e=o.get();for(let n=0;n<t.length;n++)t[n].value===e&&(s.selectedIndex=n)}};export const bindCheckbox=function(e,t){const n=e,o=t;function r(){n.checked!==o.get()&&(n.checked=o.get())}o.addChangeListener(r),r(),n.addEventListener("change",(function(){o.get()!==n.checked&&o.set(n.checked)}),!1)};export const createCustomSetting=function(e,t){const n=document.createElement("p"),o=n.createChild("fieldset"),r=o.createChild("label");return r.textContent=e,ARIAUtils.bindLabelToControl(r,t),o.appendChild(t),n};class SettingsRuntimeExtensionDescriptor extends Root.Runtime.RuntimeExtensionDescriptor{constructor(){super(),this.options,this.reloadRequired}}export const createControlForSetting=function(e,t){const n=e.extension();if(!n)return null;const o=n.descriptor(),r=Common.UIString.UIString(e.title()||"");switch(o.settingType){case"boolean":return createSettingCheckbox(r,e);case"enum":return Array.isArray(o.options)?createSettingSelect(r,o.options,o.reloadRequired,e,t):(console.error("Enum setting defined without options"),null);default:return console.error("Invalid setting type: "+o.settingType),null}};export class SettingUI{settingElement(){throw new Error("not implemented")}}