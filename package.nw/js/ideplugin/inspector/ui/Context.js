import*as Common from"../common/common.js";import*as Root from"../root/root.js";import{ContextFlavorListener}from"./ContextFlavorListener.js";let contextInstance,ConstructorFn;export class Context{constructor(){this._flavors=new Map,this._eventDispatchers=new Map}static instance(e={forceNew:null}){const{forceNew:t}=e;return contextInstance&&!t||(contextInstance=new Context),contextInstance}setFlavor(e,t){(this._flavors.get(e)||null)!==t&&(t?this._flavors.set(e,t):this._flavors.delete(e),this._dispatchFlavorChange(e,t))}_dispatchFlavorChange(e,t){const n=self.runtime;for(const s of n.extensions(ContextFlavorListener))s.hasContextType(e)&&s.instance().then(e=>e.flavorChanged(t));const s=this._eventDispatchers.get(e);s&&s.dispatchEventToListeners(Events.FlavorChanged,t)}addFlavorChangeListener(e,t,n){let s=this._eventDispatchers.get(e);s||(s=new Common.ObjectWrapper.ObjectWrapper,this._eventDispatchers.set(e,s)),s.addEventListener(Events.FlavorChanged,t,n)}removeFlavorChangeListener(e,t,n){const s=this._eventDispatchers.get(e);s&&(s.removeEventListener(Events.FlavorChanged,t,n),s.hasEventListeners(Events.FlavorChanged)||this._eventDispatchers.delete(e))}flavor(e){return this._flavors.get(e)||null}flavors(){return new Set(this._flavors.keys())}applicableExtensions(e){const t=new Set,n=this.flavors();for(const s of e)self.runtime.isExtensionApplicableToContextTypes(s,n)&&t.add(s);return t}}const Events={FlavorChanged:Symbol("FlavorChanged")};