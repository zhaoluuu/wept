import*as Host from"../host/host.js";import*as ARIAUtils from"./ARIAUtils.js";import{ContextMenu,Provider}from"./ContextMenu.js";import{html}from"./Fragment.js";import{addReferrerToURLIfNecessary,copyLinkAddressLabel,MaxLengthForDisplayedURLs,openLinkExternallyLabel}from"./UIUtils.js";import{XElement}from"./XElement.js";export class XLink extends XElement{static create(e,t,n,s){return t||(t=e),n=n||"",e=addReferrerToURLIfNecessary(e),html`
        <x-link href='${e}' class='${n} devtools-link' ${s?"no-click":""}
        >${t.trimMiddle(MaxLengthForDisplayedURLs)}</x-link>`}constructor(){super(),this.style.setProperty("display","inline"),ARIAUtils.markAsLink(this),this.tabIndex=0,this.target="_blank",this.rel="noopener",this._href=null,this._clickable=!0,this._onClick=e=>{e.consume(!0),Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this._href)},this._onKeyDown=e=>{isEnterOrSpaceKey(e)&&(e.consume(!0),Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this._href))}}static get observedAttributes(){return XElement.observedAttributes.concat(["href","no-click"])}attributeChangedCallback(e,t,n){if("no-click"===e)return this._clickable=!n,void this._updateClick();if("href"===e){n||(n="");let e=null,t=null;try{t=new URL(n),e=t.toString()}catch(e){}return t&&"javascript:"===t.protocol&&(e=null),this._href=e,this.title=n,void this._updateClick()}super.attributeChangedCallback(e,t,n)}_updateClick(){null!==this._href&&this._clickable?(this.addEventListener("click",this._onClick,!1),this.addEventListener("keydown",this._onKeyDown,!1),this.style.setProperty("cursor","pointer")):(this.removeEventListener("click",this._onClick,!1),this.removeEventListener("keydown",this._onKeyDown,!1),this.style.removeProperty("cursor"))}}export class ContextMenuProvider{appendApplicableItems(e,t,n){let s=n;for(;s&&!(s instanceof XLink);)s=s.parentNodeOrShadowHost();if(!s||!s._href)return;const r=s;t.revealSection().appendItem(openLinkExternallyLabel(),()=>{r._href&&Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(r._href)}),t.revealSection().appendItem(copyLinkAddressLabel(),()=>{r._href&&Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(r._href)})}}self.customElements.define("x-link",XLink);