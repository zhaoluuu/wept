import*as Root from"../root/root.js";import{Action}from"./Action.js";import{Context}from"./Context.js";let actionRegistryInstance;export class ActionRegistry{constructor(){this._actionsById=new Map,this._registerActions()}static instance(t={forceNew:null}){const{forceNew:n}=t;return actionRegistryInstance&&!n||(actionRegistryInstance=new ActionRegistry),actionRegistryInstance}_registerActions(){self.runtime.extensions("action").forEach((function(t){const n=t.descriptor().actionId;if(!n)return void console.error("No actionId provided for extension "+t.descriptor().name);console.assert(!this._actionsById.get(n));const o=new Action(t);!o.category()||o.title()?this._actionsById.set(n,o):console.error("Category actions require a title for command menu: "+n);t.canInstantiate()||o.setEnabled(!1)}),this)}availableActions(){return this.applicableActions([...this._actionsById.keys()],Context.instance())}actions(){return[...this._actionsById.values()]}applicableActions(t,n){const o=[];for(const n of t){const t=this._actionsById.get(n);t&&t.enabled()&&o.push(t.extension())}return[...n.applicableExtensions(o)].map(function(t){const n=t.descriptor().actionId;return this.action(n)}.bind(this))}action(t){return this._actionsById.get(t)||null}}