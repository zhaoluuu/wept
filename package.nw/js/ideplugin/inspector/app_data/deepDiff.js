function inherits(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function Diff(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function DiffEdit(e,t,a){DiffEdit.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:a,enumerable:!0})}function DiffNew(e,t){DiffNew.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function DiffDeleted(e,t){DiffDeleted.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function DiffArray(e,t,a){DiffArray.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:a,enumerable:!0})}function arrayRemove(e,t,a){const i=e.slice((a||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push(...i),e}function realTypeOf(e){const t=typeof e;return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function deepDiff(e,t,a,i,r,n,f){f=f||[];const l=(r=r||[]).slice(0);if(void 0!==n){if(i){if("function"==typeof i&&i(l,n))return;if("object"==typeof i){if(i.prefilter&&i.prefilter(l,n))return;if(i.normalize){const a=i.normalize(l,n,e,t);a&&(e=a[0],t=a[1])}}}l.push(n)}"regexp"===realTypeOf(e)&&"regexp"===realTypeOf(t)&&(e=e.toString(),t=t.toString());const h=typeof e,p=typeof t,s="undefined"!==h||f&&f[f.length-1].lhs&&f[f.length-1].lhs.hasOwnProperty(n),c="undefined"!==p||f&&f[f.length-1].rhs&&f[f.length-1].rhs.hasOwnProperty(n);if(!s&&c)a(new DiffNew(l,t));else if(!c&&s)a(new DiffDeleted(l,e));else if(realTypeOf(e)!==realTypeOf(t))a(new DiffEdit(l,e,t));else if("date"===realTypeOf(e)&&e-t!=0)a(new DiffEdit(l,e,t));else if("object"===h&&null!==e&&null!==t)if(f.filter((function(t){return t.lhs===e})).length)e!==t&&a(new DiffEdit(l,e,t));else{if(f.push({lhs:e,rhs:t}),Array.isArray(e)){let r;for(r=0;r<e.length;r++)r>=t.length?a(new DiffArray(l,r,new DiffDeleted(void 0,e[r]))):deepDiff(e[r],t[r],a,i,l,r,f);for(;r<t.length;)a(new DiffArray(l,r,new DiffNew(void 0,t[r++])))}else{const r=Object.keys(e);let n=Object.keys(t);r.forEach((function(r,h){const p=n.indexOf(r);p>=0?(deepDiff(e[r],t[r],a,i,l,r,f),n=arrayRemove(n,p)):deepDiff(e[r],void 0,a,i,l,r,f)})),n.forEach((function(e){deepDiff(void 0,t[e],a,i,l,e,f)}))}f.length-=1}else e!==t&&("number"===h&&isNaN(e)&&isNaN(t)||a(new DiffEdit(l,e,t)))}function accumulateDiff(e,t,a,i){return i=i||[],deepDiff(e,t,(function(e){e&&i.push(e)}),a),i.length?i:void 0}function applyArrayChange(e,t,a){if(a.path&&a.path.length){let i,r=e[t];const n=a.path.length-1;for(i=0;i<n;i++)r=r[a.path[i]];switch(a.kind){case"A":applyArrayChange(r[a.path[i]],a.index,a.item);break;case"D":delete r[a.path[i]];break;case"E":case"N":r[a.path[i]]=a.rhs}}else switch(a.kind){case"A":applyArrayChange(e[t],a.index,a.item);break;case"D":e=arrayRemove(e,t);break;case"E":case"N":e[t]=a.rhs}return e}function applyChange(e,t,a){if(e&&t&&a&&a.kind){let t=e,i=-1;const r=a.path?a.path.length-1:0;for(;++i<r;)void 0===t[a.path[i]]&&(t[a.path[i]]="number"==typeof a.path[i]?[]:{}),t=t[a.path[i]];switch(a.kind){case"A":applyArrayChange(a.path?t[a.path[i]]:t,a.index,a.item);break;case"D":delete t[a.path[i]];break;case"E":case"N":t[a.path[i]]=a.rhs}}}function revertArrayChange(e,t,a){if(a.path&&a.path.length){let i,r=e[t];const n=a.path.length-1;for(i=0;i<n;i++)r=r[a.path[i]];switch(a.kind){case"A":revertArrayChange(r[a.path[i]],a.index,a.item);break;case"D":case"E":r[a.path[i]]=a.lhs;break;case"N":delete r[a.path[i]]}}else switch(a.kind){case"A":revertArrayChange(e[t],a.index,a.item);break;case"D":case"E":e[t]=a.lhs;break;case"N":e=arrayRemove(e,t)}return e}function revertChange(e,t,a){if(e&&t&&a&&a.kind){let t,i=e;const r=a.path.length-1;for(t=0;t<r;t++)void 0===i[a.path[t]]&&(i[a.path[t]]={}),i=i[a.path[t]];switch(a.kind){case"A":revertArrayChange(i[a.path[t]],a.index,a.item);break;case"D":case"E":i[a.path[t]]=a.lhs;break;case"N":delete i[a.path[t]]}}}function applyDiff(e,t,a){if(e&&t){deepDiff(e,t,(function(i){a&&!a(e,t,i)||applyChange(e,t,i)}))}}inherits(DiffEdit,Diff),inherits(DiffNew,Diff),inherits(DiffDeleted,Diff),inherits(DiffArray,Diff),Object.defineProperties(accumulateDiff,{diff:{value:accumulateDiff,enumerable:!0},observableDiff:{value:deepDiff,enumerable:!0},applyDiff:{value:applyDiff,enumerable:!0},applyChange:{value:applyChange,enumerable:!0},revertChange:{value:revertChange,enumerable:!0}});export default accumulateDiff;