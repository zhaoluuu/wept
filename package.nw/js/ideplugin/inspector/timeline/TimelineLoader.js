import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as SDK from"../sdk/sdk.js";import*as TextUtils from"../text_utils/text_utils.js";import*as TimelineModel from"../timeline_model/timeline_model.js";export class TimelineLoader{constructor(t){this._client=t,this._backingStorage=new Bindings.TempFile.TempFileBackingStorage,this._tracingModel=new SDK.TracingModel.TracingModel(this._backingStorage),this._canceledCallback=null,this._state=State.Initial,this._buffer="",this._firstRawChunk=!0,this._firstChunk=!0,this._loadedBytes=0,this._totalSize,this._jsonTokenizer=new TextUtils.TextUtils.BalancedJSONTokenizer(this._writeBalancedJSON.bind(this),!0)}static loadFromFile(t,e){const i=new TimelineLoader(e),n=new Bindings.FileUtils.ChunkedFileReader(t,TransferChunkLengthBytes);return i._canceledCallback=n.cancel.bind(n),i._totalSize=t.size,n.read(i).then(t=>{t||i._reportErrorAndCancelLoading(n.error().message)}),i}static loadFromEvents(t,e){const i=new TimelineLoader(e);return setTimeout(async()=>{e.loadingStarted();for(let n=0;n<t.length;n+=5e3){const r=t.slice(n,n+5e3);i._tracingModel.addEvents(r),e.loadingProgress((n+r.length)/t.length),await new Promise(t=>setTimeout(t))}i.close()}),i}static loadFromURL(t,e){const i=new TimelineLoader(e);return Host.ResourceLoader.loadAsStream(t,null,i),i}cancel(){this._tracingModel=null,this._backingStorage.reset(),this._client.loadingComplete(null),this._client=null,this._canceledCallback&&this._canceledCallback()}write(t){if(!this._client)return Promise.resolve();if(this._loadedBytes+=t.length,this._firstRawChunk?this._client.loadingStarted():this._client.loadingProgress(this._totalSize?this._loadedBytes/this._totalSize:void 0),this._firstRawChunk=!1,this._state===State.Initial)if(t.startsWith('{"nodes":['))this._state=State.LoadingCPUProfileFormat;else if("{"===t[0])this._state=State.LookingForEvents;else{if("["!==t[0])return this._reportErrorAndCancelLoading(Common.UIString.UIString("Malformed timeline data: Unknown JSON format")),Promise.resolve();this._state=State.ReadingEvents}if(this._state===State.LoadingCPUProfileFormat)return this._buffer+=t,Promise.resolve();if(this._state===State.LookingForEvents){const e='"traceEvents":',i=this._buffer.length-e.length;this._buffer+=t;const n=this._buffer.indexOf(e,i);if(-1===n)return Promise.resolve();t=this._buffer.slice(n+e.length),this._state=State.ReadingEvents}return this._state!==State.ReadingEvents||this._jsonTokenizer.write(t)||(this._state=State.SkippingTail,this._firstChunk&&this._reportErrorAndCancelLoading(Common.UIString.UIString("Malformed timeline input, wrong JSON brackets balance"))),Promise.resolve()}_writeBalancedJSON(t){let e,i=t+"]";if(!this._firstChunk){const t=i.indexOf(",");-1!==t&&(i=i.slice(t+1)),i="["+i}try{e=JSON.parse(i)}catch(t){return void this._reportErrorAndCancelLoading(Common.UIString.UIString("Malformed timeline data: %s",t.toString()))}if(this._firstChunk&&(this._firstChunk=!1,this._looksLikeAppVersion(e[0])))this._reportErrorAndCancelLoading(Common.UIString.UIString("Legacy Timeline format is not supported."));else try{this._tracingModel.addEvents(e)}catch(t){this._reportErrorAndCancelLoading(Common.UIString.UIString("Malformed timeline data: %s",t.toString()))}}_reportErrorAndCancelLoading(t){t&&Common.Console.Console.instance().error(t),this.cancel()}_looksLikeAppVersion(t){return"string"==typeof t&&-1!==t.indexOf("Chrome")}async close(){this._client&&(this._client.processingStarted(),setTimeout(()=>this._finalizeTrace(),0))}_finalizeTrace(){this._state===State.LoadingCPUProfileFormat&&(this._parseCPUProfileFormat(this._buffer),this._buffer=""),this._tracingModel.tracingComplete(),this._client.loadingComplete(this._tracingModel)}_parseCPUProfileFormat(t){let e;try{const i=JSON.parse(t);e=TimelineModel.TimelineJSProfile.TimelineJSProfileProcessor.buildTraceProfileFromCpuProfile(i,1,!0)}catch(t){return void this._reportErrorAndCancelLoading(Common.UIString.UIString("Malformed CPU profile format"))}this._tracingModel.addEvents(e)}}export const TransferChunkLengthBytes=5e6;export class Client{loadingStarted(){}loadingProgress(t){}processingStarted(){}loadingComplete(t){}}export const State={Initial:Symbol("Initial"),LookingForEvents:Symbol("LookingForEvents"),ReadingEvents:Symbol("ReadingEvents"),SkippingTail:Symbol("SkippingTail"),LoadingCPUProfileFormat:Symbol("LoadingCPUProfileFormat")};