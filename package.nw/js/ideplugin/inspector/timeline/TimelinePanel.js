import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as Extensions from"../extensions/extensions.js";import*as Host from"../host/host.js";import*as MobileThrottling from"../mobile_throttling/mobile_throttling.js";import*as PerfUI from"../perf_ui/perf_ui.js";import*as Platform from"../platform/platform.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";import*as TimelineModel from"../timeline_model/timeline_model.js";import*as UI from"../ui/ui.js";import{Events,PerformanceModel,Window}from"./PerformanceModel.js";import{Client,TimelineController}from"./TimelineController.js";import{TimelineEventOverview,TimelineEventOverviewCoverage,TimelineEventOverviewCPUActivity,TimelineEventOverviewFrames,TimelineEventOverviewInput,TimelineEventOverviewMemory,TimelineEventOverviewNetwork,TimelineEventOverviewResponsiveness,TimelineFilmStripOverview}from"./TimelineEventOverview.js";import{TimelineFlameChartView}from"./TimelineFlameChartView.js";import{TimelineHistoryManager}from"./TimelineHistoryManager.js";import{TimelineLoader}from"./TimelineLoader.js";import{TimelineUIUtils}from"./TimelineUIUtils.js";import{UIDevtoolsController}from"./UIDevtoolsController.js";import{UIDevtoolsUtils}from"./UIDevtoolsUtils.js";export class TimelinePanel extends UI.Panel.Panel{constructor(){super("timeline"),this.registerRequiredCSS("timeline/timelinePanel.css"),this.element.addEventListener("contextmenu",this._contextMenu.bind(this),!1),this._dropTarget=new UI.DropTarget.DropTarget(this.element,[UI.DropTarget.Type.File,UI.DropTarget.Type.URI],Common.UIString.UIString("Drop timeline file or URL here"),this._handleDrop.bind(this)),this._recordingOptionUIControls=[],this._state=State.Idle,this._recordingPageReload=!1,this._millisecondsToRecordAfterLoadEvent=5e3,this._toggleRecordAction=UI.ActionRegistry.ActionRegistry.instance().action("timeline.toggle-recording"),this._recordReloadAction=UI.ActionRegistry.ActionRegistry.instance().action("timeline.record-reload"),this._historyManager=new TimelineHistoryManager,this._performanceModel=null,this._viewModeSetting=Common.Settings.Settings.instance().createSetting("timelineViewMode",ViewMode.FlameChart),this._disableCaptureJSProfileSetting=Common.Settings.Settings.instance().createSetting("timelineDisableJSSampling",!1),this._disableCaptureJSProfileSetting.setTitle(Common.UIString.UIString("Disable JavaScript samples")),this._captureLayersAndPicturesSetting=Common.Settings.Settings.instance().createSetting("timelineCaptureLayersAndPictures",!1),this._captureLayersAndPicturesSetting.setTitle(Common.UIString.UIString("Enable advanced paint instrumentation (slow)")),this._showScreenshotsSetting=Common.Settings.Settings.instance().createSetting("timelineShowScreenshots",!0),this._showScreenshotsSetting.setTitle(Common.UIString.UIString("Screenshots")),this._showScreenshotsSetting.addChangeListener(this._updateOverviewControls,this),this._startCoverage=Common.Settings.Settings.instance().createSetting("timelineStartCoverage",!1),this._startCoverage.setTitle(ls`Coverage`),Root.Runtime.experiments.isEnabled("recordCoverageWithPerformanceTracing")||this._startCoverage.set(!1),this._showMemorySetting=Common.Settings.Settings.instance().createSetting("timelineShowMemory",!1),this._showMemorySetting.setTitle(Common.UIString.UIString("Memory")),this._showMemorySetting.addChangeListener(this._onModeChanged,this);const e=this.element.createChild("div","timeline-toolbar-container");this._panelToolbar=new UI.Toolbar.Toolbar("timeline-main-toolbar",e),this._panelRightToolbar=new UI.Toolbar.Toolbar("",e),this._createSettingsPane(),this._updateShowSettingsToolbarButton(),this._timelinePane=new UI.Widget.VBox,this._timelinePane.show(this.element);const t=this._timelinePane.element.createChild("div","hbox");t.id="timeline-overview-panel",this._overviewPane=new PerfUI.TimelineOverviewPane.TimelineOverviewPane("timeline"),this._overviewPane.addEventListener(PerfUI.TimelineOverviewPane.Events.WindowChanged,this._onOverviewWindowChanged.bind(this)),this._overviewPane.show(t),this._overviewControls=[],this._statusPaneContainer=this._timelinePane.element.createChild("div","status-pane-container fill"),this._createFileSelector(),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.ResourceTreeModel.ResourceTreeModel,SDK.ResourceTreeModel.Events.Load,this._loadEventFired,this),this._flameChart=new TimelineFlameChartView(this),this._searchableView=new UI.SearchableView.SearchableView(this._flameChart),this._searchableView.setMinimumSize(0,100),this._searchableView.element.classList.add("searchable-view"),this._searchableView.show(this._timelinePane.element),this._flameChart.show(this._searchableView.element),this._flameChart.setSearchableView(this._searchableView),this._searchableView.hideWidget(),this._onModeChanged(),this._populateToolbar(),this._showLandingPage(),this._updateTimelineControls(),self.Extensions.extensionServer.addEventListener(Extensions.ExtensionServer.Events.TraceProviderAdded,this._appendExtensionsToToolbar,this),SDK.SDKModel.TargetManager.instance().addEventListener(SDK.SDKModel.Events.SuspendStateChanged,this._onSuspendStateChanged,this)}static instance(){return self.runtime.sharedInstance(TimelinePanel)}searchableView(){return this._searchableView}wasShown(){UI.Context.Context.instance().setFlavor(TimelinePanel,this),Host.userMetrics.panelLoaded("timeline","DevTools.Launch.Timeline")}willHide(){UI.Context.Context.instance().setFlavor(TimelinePanel,null),this._historyManager.cancelIfShowing()}loadFromEvents(e){this._state===State.Idle&&(this._prepareToLoadTimeline(),this._loader=TimelineLoader.loadFromEvents(e,this))}_onOverviewWindowChanged(e){const t=e.data.startTime,i=e.data.endTime;this._performanceModel.setWindow({left:t,right:i},!0)}_onModelWindowChanged(e){const t=e.data.window;this._overviewPane.setWindowTimes(t.left,t.right)}_setState(e){this._state=e,this._updateTimelineControls()}_createSettingCheckbox(e,t){const i=new UI.Toolbar.ToolbarSettingCheckbox(e,t);return this._recordingOptionUIControls.push(i),i}_populateToolbar(){this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this._toggleRecordAction)),this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this._recordReloadAction)),this._clearButton=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Clear"),"largeicon-clear"),this._clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>this._onClearButton()),this._panelToolbar.appendToolbarItem(this._clearButton),this._loadButton=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Load profile…"),"largeicon-load"),this._loadButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>this._selectFileToLoad()),this._saveButton=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Save profile…"),"largeicon-download"),this._saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,e=>{this._saveToFile()}),this._panelToolbar.appendSeparator(),this._panelToolbar.appendToolbarItem(this._loadButton),this._panelToolbar.appendToolbarItem(this._saveButton),this._panelToolbar.appendSeparator(),this._panelToolbar.appendToolbarItem(this._historyManager.button()),this._panelToolbar.appendSeparator(),this._panelToolbar.appendSeparator(),this._showScreenshotsToolbarCheckbox=this._createSettingCheckbox(this._showScreenshotsSetting,Common.UIString.UIString("Capture screenshots")),this._panelToolbar.appendToolbarItem(this._showScreenshotsToolbarCheckbox),this._showMemoryToolbarCheckbox=this._createSettingCheckbox(this._showMemorySetting,Common.UIString.UIString("Show memory timeline")),this._panelToolbar.appendToolbarItem(this._showMemoryToolbarCheckbox),Root.Runtime.experiments.isEnabled("recordCoverageWithPerformanceTracing")&&(this._startCoverageCheckbox=this._createSettingCheckbox(this._startCoverage,ls`Record coverage with performance trace`),this._panelToolbar.appendToolbarItem(this._startCoverageCheckbox)),this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId("components.collect-garbage")),this._panelRightToolbar.appendSeparator(),this._panelRightToolbar.appendToolbarItem(this._showSettingsPaneButton)}_createSettingsPane(){this._showSettingsPaneSetting=Common.Settings.Settings.instance().createSetting("timelineShowSettingsToolbar",!1),this._showSettingsPaneButton=new UI.Toolbar.ToolbarSettingToggle(this._showSettingsPaneSetting,"largeicon-settings-gear",Common.UIString.UIString("Capture settings")),SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged,this._updateShowSettingsToolbarButton,this),MobileThrottling.ThrottlingManager.throttlingManager().addEventListener(MobileThrottling.ThrottlingManager.Events.RateChanged,this._updateShowSettingsToolbarButton,this),this._disableCaptureJSProfileSetting.addChangeListener(this._updateShowSettingsToolbarButton,this),this._captureLayersAndPicturesSetting.addChangeListener(this._updateShowSettingsToolbarButton,this),this._settingsPane=new UI.Widget.HBox,this._settingsPane.element.classList.add("timeline-settings-pane"),this._settingsPane.show(this.element);const e=new UI.Toolbar.Toolbar("",this._settingsPane.element);e.element.classList.add("flex-auto"),e.makeVertical(),e.appendToolbarItem(this._createSettingCheckbox(this._disableCaptureJSProfileSetting,Common.UIString.UIString("Disables JavaScript sampling, reduces overhead when running against mobile devices"))),e.appendToolbarItem(this._createSettingCheckbox(this._captureLayersAndPicturesSetting,Common.UIString.UIString("Captures advanced paint instrumentation, introduces significant performance overhead")));const t=new UI.Widget.VBox;t.element.classList.add("flex-auto"),t.show(this._settingsPane.element);const i=new UI.Toolbar.Toolbar("",t.element);i.appendText(Common.UIString.UIString("Network:")),this._networkThrottlingSelect=this._createNetworkConditionsSelect(),i.appendToolbarItem(this._networkThrottlingSelect);const n=new UI.Toolbar.Toolbar("",t.element);n.appendText(Common.UIString.UIString("CPU:")),this._cpuThrottlingSelect=MobileThrottling.ThrottlingManager.throttlingManager().createCPUThrottlingSelector(),n.appendToolbarItem(this._cpuThrottlingSelect),this._showSettingsPaneSetting.addChangeListener(this._updateSettingsPaneVisibility.bind(this)),this._updateSettingsPaneVisibility()}_appendExtensionsToToolbar(e){const t=e.data,i=TimelinePanel._settingForTraceProvider(t),n=this._createSettingCheckbox(i,t.longDisplayName());this._panelToolbar.appendToolbarItem(n)}static _settingForTraceProvider(e){let t=e[traceProviderSettingSymbol];if(!t){const i=e.persistentIdentifier();t=Common.Settings.Settings.instance().createSetting(i,!1),t.setTitle(e.shortDisplayName()),e[traceProviderSettingSymbol]=t}return t}_createNetworkConditionsSelect(){const e=new UI.Toolbar.ToolbarComboBox(null,ls`Network conditions`);return e.setMaxWidth(140),MobileThrottling.ThrottlingManager.throttlingManager().decorateSelectWithNetworkThrottling(e.selectElement()),e}_prepareToLoadTimeline(){console.assert(this._state===State.Idle),this._setState(State.Loading),this._performanceModel&&(this._performanceModel.dispose(),this._performanceModel=null)}_createFileSelector(){this._fileSelectorElement&&this._fileSelectorElement.remove(),this._fileSelectorElement=UI.UIUtils.createFileSelectorElement(this._loadFromFile.bind(this)),this._timelinePane.element.appendChild(this._fileSelectorElement)}_contextMenu(e){const t=new UI.ContextMenu.ContextMenu(e);t.appendItemsAtLocation("timelineMenu"),t.show()}async _saveToFile(){if(this._state!==State.Idle)return;const e=this._performanceModel;if(!e)return;const t=new Date,i="Profile-"+Platform.DateUtilities.toISO8601Compact(t)+".json",n=new Bindings.FileUtils.FileOutputStream;if(!await n.open(i))return;const o=await e.save(n);o&&Common.Console.Console.instance().error(Common.UIString.UIString("Failed to save timeline: %s (%s, %s)",o.message,o.name,o.code))}async _showHistory(){const e=await this._historyManager.showHistoryDropDown();e&&e!==this._performanceModel&&this._setModel(e)}_navigateHistory(e){const t=this._historyManager.navigate(e);return t&&t!==this._performanceModel&&this._setModel(t),!0}_selectFileToLoad(){this._fileSelectorElement.click()}_loadFromFile(e){this._state===State.Idle&&(this._prepareToLoadTimeline(),this._loader=TimelineLoader.loadFromFile(e,this),this._createFileSelector())}_loadFromURL(e){this._state===State.Idle&&(this._prepareToLoadTimeline(),this._loader=TimelineLoader.loadFromURL(e,this))}_updateOverviewControls(){this._overviewControls=[],this._overviewControls.push(new TimelineEventOverviewResponsiveness),Root.Runtime.experiments.isEnabled("inputEventsOnTimelineOverview")&&this._overviewControls.push(new TimelineEventOverviewInput),this._overviewControls.push(new TimelineEventOverviewFrames),this._overviewControls.push(new TimelineEventOverviewCPUActivity),this._overviewControls.push(new TimelineEventOverviewNetwork),this._showScreenshotsSetting.get()&&this._performanceModel&&this._performanceModel.filmStripModel().frames().length&&this._overviewControls.push(new TimelineFilmStripOverview),this._showMemorySetting.get()&&this._overviewControls.push(new TimelineEventOverviewMemory),this._startCoverage.get()&&this._overviewControls.push(new TimelineEventOverviewCoverage);for(const e of this._overviewControls)e.setModel(this._performanceModel);this._overviewPane.setOverviewControls(this._overviewControls)}_onModeChanged(){this._updateOverviewControls(),this.doResize(),this.select(null)}_updateSettingsPaneVisibility(){this._showSettingsPaneSetting.get()?this._settingsPane.showWidget():this._settingsPane.hideWidget()}_updateShowSettingsToolbarButton(){const e=[];if(1!==MobileThrottling.ThrottlingManager.throttlingManager().cpuThrottlingRate()&&e.push(Common.UIString.UIString("- CPU throttling is enabled")),SDK.NetworkManager.MultitargetNetworkManager.instance().isThrottling()&&e.push(Common.UIString.UIString("- Network throttling is enabled")),this._captureLayersAndPicturesSetting.get()&&e.push(Common.UIString.UIString("- Significant overhead due to paint instrumentation")),this._disableCaptureJSProfileSetting.get()&&e.push(Common.UIString.UIString("- JavaScript sampling is disabled")),this._showSettingsPaneButton.setDefaultWithRedColor(e.length),this._showSettingsPaneButton.setToggleWithRedColor(e.length),e.length){const t=createElement("div");e.forEach(e=>{t.createChild("div").textContent=e}),this._showSettingsPaneButton.setTitle(t)}else this._showSettingsPaneButton.setTitle(Common.UIString.UIString("Capture settings"))}_setUIControlsEnabled(e){this._recordingOptionUIControls.forEach(t=>t.setEnabled(e))}async _startRecording(){console.assert(!this._statusPane,"Status pane is already opened."),this._setState(State.StartPending);const e={enableJSSampling:!this._disableCaptureJSProfileSetting.get(),capturePictures:this._captureLayersAndPicturesSetting.get(),captureFilmStrip:this._showScreenshotsSetting.get(),startCoverage:this._startCoverage.get()};e.startCoverage&&await UI.ViewManager.ViewManager.instance().showView("coverage").then(()=>UI.ViewManager.ViewManager.instance().view("coverage").widget()).then(e=>e.ensureRecordingStarted()),this._showRecordingStarted();const t=self.Extensions.extensionServer.traceProviders().filter(e=>TimelinePanel._settingForTraceProvider(e).get()),i=SDK.SDKModel.TargetManager.instance().mainTarget();UIDevtoolsUtils.isUiDevTools()?this._controller=new UIDevtoolsController(i,this):this._controller=new TimelineController(i,this),this._setUIControlsEnabled(!1),this._hideLandingPage();const n=await this._controller.startRecording(e,t);n[ProtocolClient.InspectorBackend.ProtocolError]?this._recordingFailed(n[ProtocolClient.InspectorBackend.ProtocolError]):this._recordingStarted()}async _stopRecording(){this._statusPane&&(this._statusPane.finish(),this._statusPane.updateStatus(Common.UIString.UIString("Stopping timeline…")),this._statusPane.updateProgressBar(Common.UIString.UIString("Received"),0)),this._setState(State.StopPending),this._startCoverage.get()&&await UI.ViewManager.ViewManager.instance().showView("coverage").then(()=>UI.ViewManager.ViewManager.instance().view("coverage").widget()).then(e=>e.stopRecording());const e=await this._controller.stopRecording();this._performanceModel=e,this._setUIControlsEnabled(!0),this._controller.dispose(),this._controller=null}_recordingFailed(e){this._statusPane&&this._statusPane.hide(),this._statusPane=new StatusPane({description:e,buttonText:ls`Close`,buttonDisabled:!1},()=>this.loadingComplete(null)),this._statusPane.showPane(this._statusPaneContainer),this._statusPane.updateStatus(ls`Recording failed`),this._setState(State.RecordingFailed),this._performanceModel=null,this._setUIControlsEnabled(!0),this._controller.dispose(),this._controller=null}_onSuspendStateChanged(){this._updateTimelineControls()}_updateTimelineControls(){const e=State;this._toggleRecordAction.setToggled(this._state===e.Recording),this._toggleRecordAction.setEnabled(this._state===e.Recording||this._state===e.Idle),this._recordReloadAction.setEnabled(this._state===e.Idle),this._historyManager.setEnabled(this._state===e.Idle),this._clearButton.setEnabled(this._state===e.Idle),this._panelToolbar.setEnabled(this._state!==e.Loading),this._panelRightToolbar.setEnabled(this._state!==e.Loading),this._dropTarget.setEnabled(this._state===e.Idle),this._loadButton.setEnabled(this._state===e.Idle),this._saveButton.setEnabled(this._state===e.Idle&&!!this._performanceModel)}_toggleRecording(){this._state===State.Idle?(this._recordingPageReload=!1,this._startRecording(),Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelineStarted)):this._state===State.Recording&&this._stopRecording()}_recordReload(){this._state===State.Idle&&(this._recordingPageReload=!0,this._startRecording(),Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelinePageReloadStarted))}_onClearButton(){this._historyManager.clear(),this._clear()}_clear(){this._showLandingPage(),this._reset()}_reset(){self.runtime.sharedInstance(PerfUI.LineLevelProfile.Performance).reset(),this._setModel(null)}_applyFilters(e){e.timelineModel().isGenericTrace()||Root.Runtime.experiments.isEnabled("timelineShowAllEvents")||e.setFilters([TimelineUIUtils.visibleEventsFilter()])}_setModel(e){if(this._performanceModel&&this._performanceModel.removeEventListener(Events.WindowChanged,this._onModelWindowChanged,this),this._performanceModel=e,e?(this._searchableView.showWidget(),this._applyFilters(e)):this._searchableView.hideWidget(),this._flameChart.setModel(e),this._updateOverviewControls(),this._overviewPane.reset(),e){this._performanceModel.addEventListener(Events.WindowChanged,this._onModelWindowChanged,this),this._overviewPane.setNavStartTimes(e.timelineModel().navStartTimes()),this._overviewPane.setBounds(e.timelineModel().minimumRecordTime(),e.timelineModel().maximumRecordTime());const t=self.runtime.sharedInstance(PerfUI.LineLevelProfile.Performance);t.reset();for(const i of e.timelineModel().cpuProfiles())t.appendCPUProfile(i);this._setMarkers(e.timelineModel()),this._flameChart.setSelection(null),this._overviewPane.setWindowTimes(e.window().left,e.window().right)}for(const t of this._overviewControls)t.setModel(e);this._flameChart&&this._flameChart.resizeToPreferredHeights(),this._updateTimelineControls()}_recordingStarted(){if(this._recordingPageReload){const e=this._controller.mainTarget().model(SDK.ResourceTreeModel.ResourceTreeModel);e&&e.reloadPage()}this._reset(),this._setState(State.Recording),this._showRecordingStarted(),this._statusPane.enableAndFocusButton(),this._statusPane.updateStatus(Common.UIString.UIString("Profiling…")),this._statusPane.updateProgressBar(Common.UIString.UIString("Buffer usage"),0),this._statusPane.startTimer(),this._hideLandingPage()}recordingProgress(e){this._statusPane.updateProgressBar(Common.UIString.UIString("Buffer usage"),100*e)}_showLandingPage(){if(this._landingPage)return void this._landingPage.show(this._statusPaneContainer);function e(e,t){const i=createElement(e);return i.textContent=t,i}const t=UI.XLink.XLink.create("https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/",Common.UIString.UIString("Learn more")),i=e("b",self.UI.shortcutRegistry.shortcutsForAction("timeline.toggle-recording")[0].title()),n=e("b",self.UI.shortcutRegistry.shortcutsForAction("timeline.record-reload")[0].title()),o=e("b",Common.UIString.UIString("WASD"));this._landingPage=new UI.Widget.VBox,this._landingPage.contentElement.classList.add("timeline-landing-page","fill");const s=this._landingPage.contentElement.createChild("div"),r=UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButton(this._toggleRecordAction)),a=UI.UIUtils.createInlineButton(UI.Toolbar.Toolbar.createActionButtonForId("timeline.record-reload"));s.createChild("p").appendChild(UI.UIUtils.formatLocalized("Click the record button %s or hit %s to start a new recording.\nClick the reload button %s or hit %s to record the page load.",[r,i,a,n])),s.createChild("p").appendChild(UI.UIUtils.formatLocalized("After recording, select an area of interest in the overview by dragging.\nThen, zoom and pan the timeline with the mousewheel or %s keys.\n%s",[o,t])),this._landingPage.show(this._statusPaneContainer)}_hideLandingPage(){this._landingPage.detach()}loadingStarted(){this._hideLandingPage(),this._statusPane&&this._statusPane.hide(),this._statusPane=new StatusPane({showProgress:!0},this._cancelLoading.bind(this)),this._statusPane.showPane(this._statusPaneContainer),this._statusPane.updateStatus(Common.UIString.UIString("Loading profile…")),this._loader||this._statusPane.finish(),this.loadingProgress(0)}loadingProgress(e){"number"==typeof e&&this._statusPane.updateProgressBar(Common.UIString.UIString("Received"),100*e)}processingStarted(){this._statusPane.updateStatus(Common.UIString.UIString("Processing profile…"))}loadingComplete(e){delete this._loader,this._setState(State.Idle),this._statusPane&&this._statusPane.hide(),delete this._statusPane,e?(this._performanceModel||(this._performanceModel=new PerformanceModel),this._performanceModel.setTracingModel(e),this._setModel(this._performanceModel),this._historyManager.addRecording(this._performanceModel),this._startCoverage.get()&&UI.ViewManager.ViewManager.instance().showView("coverage").then(()=>UI.ViewManager.ViewManager.instance().view("coverage").widget()).then(e=>e.processBacklog()).then(()=>this._updateOverviewControls())):this._clear()}_showRecordingStarted(){this._statusPane||(this._statusPane=new StatusPane({showTimer:!0,showProgress:!0,buttonDisabled:!0},this._stopRecording.bind(this)),this._statusPane.showPane(this._statusPaneContainer),this._statusPane.updateStatus(Common.UIString.UIString("Initializing profiler…")))}_cancelLoading(){this._loader&&this._loader.cancel()}_setMarkers(e){const t=new Map,i=TimelineModel.TimelineModel.RecordType,n=e.minimumRecordTime();for(const o of e.timeMarkerEvents())o.name!==i.TimeStamp&&o.name!==i.ConsoleTime&&t.set(o.startTime,TimelineUIUtils.createEventDivider(o,n));for(const i of e.navStartTimes().values())t.set(i.startTime,TimelineUIUtils.createEventDivider(i,n));this._overviewPane.setMarkers(t)}async _loadEventFired(e){if(this._state!==State.Recording||!this._recordingPageReload||this._controller.mainTarget()!==e.data.resourceTreeModel.target())return;const t=this._controller;await new Promise(e=>setTimeout(e,this._millisecondsToRecordAfterLoadEvent)),t===this._controller&&this._state===State.Recording&&this._stopRecording()}_frameForSelection(e){switch(e.type()){case TimelineSelection.Type.Frame:return e.object();case TimelineSelection.Type.Range:return null;case TimelineSelection.Type.TraceEvent:return this._performanceModel.frameModel().frames(e._endTime,e._endTime)[0];default:return console.assert(!1,"Should never be reached"),null}}_jumpToFrame(e){const t=this._selection&&this._frameForSelection(this._selection);if(!t)return;const i=this._performanceModel.frames();let n=i.indexOf(t);console.assert(n>=0,"Can't find current frame in the frame list"),n=Platform.NumberUtilities.clamp(n+e,0,i.length-1);const o=i[n];return this._revealTimeRange(o.startTime,o.endTime),this.select(TimelineSelection.fromFrame(o)),!0}select(e){this._selection=e,this._flameChart.setSelection(e)}selectEntryAtTime(e,t){if(e){for(let i=e.upperBound(t,(e,t)=>e-t.startTime)-1;i>=0;--i){const n=e[i],o=n.endTime||n.startTime;if(SDK.TracingModel.TracingModel.isTopLevelEvent(n)&&o<t)break;if(this._performanceModel.isVisible(n)&&o>=t)return void this.select(TimelineSelection.fromTraceEvent(n))}this.select(null)}}highlightEvent(e){this._flameChart.highlightEvent(e)}_revealTimeRange(e,t){const i=this._performanceModel.window();let n=0;i.right<t?n=t-i.right:i.left>e&&(n=e-i.left),this._performanceModel.setWindow({left:i.left+n,right:i.right+n},!0)}_handleDrop(e){const t=e.items;if(!t.length)return;const i=t[0];if("string"===i.kind){const t=e.getData("text/uri-list");new Common.ParsedURL.ParsedURL(t).isValid&&this._loadFromURL(t)}else if("file"===i.kind){const e=t[0].webkitGetAsEntry();if(!e.isFile)return;e.file(this._loadFromFile.bind(this))}}}export const State={Idle:Symbol("Idle"),StartPending:Symbol("StartPending"),Recording:Symbol("Recording"),StopPending:Symbol("StopPending"),Loading:Symbol("Loading"),RecordingFailed:Symbol("RecordingFailed")};export const ViewMode={FlameChart:"FlameChart",BottomUp:"BottomUp",CallTree:"CallTree",EventLog:"EventLog"};export const rowHeight=18;export const headerHeight=20;export class TimelineSelection{constructor(e,t,i,n){this._type=e,this._startTime=t,this._endTime=i,this._object=n||null}static fromFrame(e){return new TimelineSelection(TimelineSelection.Type.Frame,e.startTime,e.endTime,e)}static fromNetworkRequest(e){return new TimelineSelection(TimelineSelection.Type.NetworkRequest,e.startTime,e.endTime||e.startTime,e)}static fromTraceEvent(e){return new TimelineSelection(TimelineSelection.Type.TraceEvent,e.startTime,e.endTime||e.startTime+1,e)}static fromRange(e,t){return new TimelineSelection(TimelineSelection.Type.Range,e,t)}type(){return this._type}object(){return this._object}startTime(){return this._startTime}endTime(){return this._endTime}}TimelineSelection.Type={Frame:"Frame",NetworkRequest:"NetworkRequest",TraceEvent:"TraceEvent",Range:"Range"};export class TimelineModeViewDelegate{select(e){}selectEntryAtTime(e,t){}highlightEvent(e){}}export class StatusPane extends UI.Widget.VBox{constructor(e,t){super(!0),this.registerRequiredCSS("timeline/timelineStatusDialog.css"),this.contentElement.classList.add("timeline-status-dialog");const i=this.contentElement.createChild("div","status-dialog-line status");if(i.createChild("div","label").textContent=Common.UIString.UIString("Status"),this._status=i.createChild("div","content"),UI.ARIAUtils.markAsStatus(this._status),e.showTimer){const e=this.contentElement.createChild("div","status-dialog-line time");e.createChild("div","label").textContent=Common.UIString.UIString("Time"),this._time=e.createChild("div","content")}if(e.showProgress){const e=this.contentElement.createChild("div","status-dialog-line progress");this._progressLabel=e.createChild("div","label"),this._progressBar=e.createChild("div","indicator-container").createChild("div","indicator"),UI.ARIAUtils.markAsProgressBar(this._progressBar)}if("string"==typeof e.description){const t=this.contentElement.createChild("div","status-dialog-line description");t.createChild("div","label").textContent=ls`Description`,this._description=t.createChild("div","content"),this._description.innerText=e.description}const n=e.buttonText||ls`Stop`;this._button=UI.UIUtils.createTextButton(n,t,"",!0),this._button.disabled=!1==!e.buttonDisabled,this.contentElement.createChild("div","stop-button").appendChild(this._button)}finish(){this._stopTimer(),this._button.disabled=!0}hide(){this.element.parentNode.classList.remove("tinted"),this.element.remove()}showPane(e){this.show(e),e.classList.add("tinted")}enableAndFocusButton(){this._button.disabled=!1,this._button.focus()}updateStatus(e){this._status.textContent=e}updateProgressBar(e,t){this._progressLabel.textContent=e,this._progressBar.style.width=t.toFixed(1)+"%",UI.ARIAUtils.setValueNow(this._progressBar,t),this._updateTimer()}startTimer(){this._startTime=Date.now(),this._timeUpdateTimer=setInterval(this._updateTimer.bind(this,!1),1e3),this._updateTimer()}_stopTimer(){this._timeUpdateTimer&&(clearInterval(this._timeUpdateTimer),this._updateTimer(!0),delete this._timeUpdateTimer)}_updateTimer(e){if(!this._timeUpdateTimer)return;const t=(Date.now()-this._startTime)/1e3;this._time.textContent=Common.UIString.UIString("%s sec",t.toFixed(e?1:0))}}export class LoadTimelineHandler{handleQueryParam(e){UI.ViewManager.ViewManager.instance().showView("timeline").then(()=>{TimelinePanel.instance()._loadFromURL(window.decodeURIComponent(e))})}}export class ActionDelegate{handleAction(e,t){const i=UI.Context.Context.instance().flavor(TimelinePanel);switch(console.assert(i&&i instanceof TimelinePanel),t){case"timeline.toggle-recording":return i._toggleRecording(),!0;case"timeline.record-reload":return i._recordReload(),!0;case"timeline.save-to-file":return i._saveToFile(),!0;case"timeline.load-from-file":return i._selectFileToLoad(),!0;case"timeline.jump-to-previous-frame":return i._jumpToFrame(-1),!0;case"timeline.jump-to-next-frame":return i._jumpToFrame(1),!0;case"timeline.show-history":return i._showHistory(),!0;case"timeline.previous-recording":return i._navigateHistory(1),!0;case"timeline.next-recording":return i._navigateHistory(-1),!0}return!1}}export const traceProviderSettingSymbol=Symbol("traceProviderSetting");