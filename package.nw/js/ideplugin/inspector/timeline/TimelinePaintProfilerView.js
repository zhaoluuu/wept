import*as LayerViewer from"../layer_viewer/layer_viewer.js";import*as SDK from"../sdk/sdk.js";import*as TimelineModel from"../timeline_model/timeline_model.js";import*as UI from"../ui/ui.js";export class TimelinePaintProfilerView extends UI.SplitWidget.SplitWidget{constructor(e){super(!1,!1),this.element.classList.add("timeline-paint-profiler-view"),this.setSidebarSize(60),this.setResizable(!1),this._frameModel=e,this._logAndImageSplitWidget=new UI.SplitWidget.SplitWidget(!0,!1),this._logAndImageSplitWidget.element.classList.add("timeline-paint-profiler-log-split"),this.setMainWidget(this._logAndImageSplitWidget),this._imageView=new TimelinePaintImageView,this._logAndImageSplitWidget.setMainWidget(this._imageView),this._paintProfilerView=new LayerViewer.PaintProfilerView.PaintProfilerView(this._imageView.showImage.bind(this._imageView)),this._paintProfilerView.addEventListener(LayerViewer.PaintProfilerView.Events.WindowChanged,this._onWindowChanged,this),this.setSidebarWidget(this._paintProfilerView),this._logTreeView=new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView,this._logAndImageSplitWidget.setSidebarWidget(this._logTreeView),this._needsUpdateWhenVisible=!1,this._pendingSnapshot=null,this._event=null,this._paintProfilerModel=null,this._lastLoadedSnapshot=null}wasShown(){this._needsUpdateWhenVisible&&(this._needsUpdateWhenVisible=!1,this._update())}setSnapshot(e){this._releaseSnapshot(),this._pendingSnapshot=e,this._event=null,this._updateWhenVisible()}setEvent(e,t){return this._releaseSnapshot(),this._paintProfilerModel=e,this._pendingSnapshot=null,this._event=t,this._updateWhenVisible(),this._event.name===TimelineModel.TimelineModel.RecordType.Paint?!!TimelineModel.TimelineModel.TimelineData.forEvent(t).picture:this._event.name===TimelineModel.TimelineModel.RecordType.RasterTask&&this._frameModel.hasRasterTile(this._event)}_updateWhenVisible(){this.isShowing()?this._update():this._needsUpdateWhenVisible=!0}_update(){let e;if(this._logTreeView.setCommandLog([]),this._paintProfilerView.setSnapshotAndLog(null,[],null),this._pendingSnapshot)e=Promise.resolve({rect:null,snapshot:this._pendingSnapshot});else if(this._event.name===TimelineModel.TimelineModel.RecordType.Paint){e=TimelineModel.TimelineModel.TimelineData.forEvent(this._event).picture.objectPromise().then(e=>this._paintProfilerModel.loadSnapshot(e.skp64)).then(e=>e&&{rect:null,snapshot:e})}else{if(this._event.name!==TimelineModel.TimelineModel.RecordType.RasterTask)return void console.assert(!1,"Unexpected event type or no snapshot");e=this._frameModel.rasterTilePromise(this._event)}function t(e,t,i){this._logTreeView.setCommandLog(i||[]),this._paintProfilerView.setSnapshotAndLog(e,i||[],t)}e.then(e=>{if(this._releaseSnapshot(),!e)return void this._imageView.showImage();const i=e.snapshot;this._lastLoadedSnapshot=i,this._imageView.setMask(e.rect),i.commandLog().then(s=>t.call(this,i,e.rect,s))})}_releaseSnapshot(){this._lastLoadedSnapshot&&(this._lastLoadedSnapshot.release(),this._lastLoadedSnapshot=null)}_onWindowChanged(){this._logTreeView.updateWindow(this._paintProfilerView.selectionWindow())}}export class TimelinePaintImageView extends UI.Widget.Widget{constructor(){super(!0),this.registerRequiredCSS("timeline/timelinePaintProfiler.css"),this.contentElement.classList.add("fill","paint-profiler-image-view"),this._imageContainer=this.contentElement.createChild("div","paint-profiler-image-container"),this._imageElement=this._imageContainer.createChild("img"),this._maskElement=this._imageContainer.createChild("div"),this._imageElement.addEventListener("load",this._updateImagePosition.bind(this),!1),this._transformController=new LayerViewer.TransformController.TransformController(this.contentElement,!0),this._transformController.addEventListener(LayerViewer.TransformController.Events.TransformChanged,this._updateImagePosition,this)}onResize(){this._imageElement.src&&this._updateImagePosition()}_updateImagePosition(){const e=this._imageElement.naturalWidth,t=this._imageElement.naturalHeight,i=this.contentElement.clientWidth,s=this.contentElement.clientHeight,n=.1*i,a=.1*s,l=(i-n)/e,o=(s-a)/t,r=Math.min(l,o);if(this._maskRectangle){const i=this._maskElement.style;i.width=e+"px",i.height=t+"px",i.borderLeftWidth=this._maskRectangle.x+"px",i.borderTopWidth=this._maskRectangle.y+"px",i.borderRightWidth=e-this._maskRectangle.x-this._maskRectangle.width+"px",i.borderBottomWidth=t-this._maskRectangle.y-this._maskRectangle.height+"px"}this._transformController.setScaleConstraints(.5,10/r);let h=(new WebKitCSSMatrix).scale(this._transformController.scale(),this._transformController.scale()).translate(i/2,s/2).scale(r,r).translate(-e/2,-t/2);const d=UI.Geometry.boundsForTransformedPoints(h,[0,0,0,e,t,0]);this._transformController.clampOffsets(n-d.maxX,i-n-d.minX,a-d.maxY,s-a-d.minY),h=(new WebKitCSSMatrix).translate(this._transformController.offsetX(),this._transformController.offsetY()).multiply(h),this._imageContainer.style.webkitTransform=h.toString()}showImage(e){this._imageContainer.classList.toggle("hidden",!e),e&&(this._imageElement.src=e)}setMask(e){this._maskRectangle=e,this._maskElement.classList.toggle("hidden",!e)}}