import*as DataGrid from"../data_grid/data_grid.js";import*as Host from"../host/host.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";import*as SourceFrame from"../source_frame/source_frame.js";import*as TextUtils from"../text_utils/text_utils.js";import*as UI from"../ui/ui.js";export class ProtocolMonitorImpl extends UI.Widget.VBox{constructor(){super(!0),this._nodes=[],this._started=!1,this._startTime=0,this._nodeForId={},this._filter=t=>!0,this._columns=[{id:"method",title:ls`Method`,visible:!0,sortable:!0,weight:60},{id:"direction",title:ls`Direction`,visible:!1,sortable:!0,hideable:!0,weight:30},{id:"request",title:ls`Request`,visible:!0,hideable:!0,weight:60},{id:"response",title:ls`Response`,visible:!0,hideable:!0,weight:60},{id:"timestamp",title:ls`Timestamp`,visible:!1,sortable:!0,hideable:!0,weight:30},{id:"target",title:ls`Target`,visible:!1,sortable:!0,hideable:!0,weight:30}],this.registerRequiredCSS("protocol_monitor/protocolMonitor.css");const t=new UI.Toolbar.Toolbar("protocol-monitor-toolbar",this.contentElement),e=new UI.Toolbar.ToolbarToggle(ls`Record`,"largeicon-start-recording","largeicon-stop-recording");e.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>{e.setToggled(!e.toggled()),this._setRecording(e.toggled())}),e.setToggleWithRedColor(!0),t.appendToolbarItem(e),e.setToggled(!0);const i=new UI.Toolbar.ToolbarButton(ls`Clear all`,"largeicon-clear");i.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>{this._dataGrid.rootNode().removeChildren(),this._nodes=[],this._nodeForId={}}),t.appendToolbarItem(i);const s=new UI.SplitWidget.SplitWidget(!0,!0,"protocol-monitor-panel-split",250);s.show(this.contentElement),this._dataGrid=new DataGrid.SortableDataGrid.SortableDataGrid({displayName:ls`Protocol Monitor`,columns:this._columns}),this._dataGrid.element.style.flex="1",this._infoWidget=new InfoWidget,s.setMainWidget(this._dataGrid.asWidget()),s.setSidebarWidget(this._infoWidget),this._dataGrid.addEventListener(DataGrid.DataGrid.Events.SelectedNode,t=>this._infoWidget.render(t.data.data)),this._dataGrid.addEventListener(DataGrid.DataGrid.Events.DeselectedNode,t=>this._infoWidget.render(null)),this._dataGrid.setHeaderContextMenuCallback(this._innerHeaderContextMenu.bind(this)),this._dataGrid.setRowContextMenuCallback(this._innerRowContextMenu.bind(this)),this._dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged,this._sortDataGrid.bind(this)),this._dataGrid.setStickToBottom(!0),this._dataGrid.sortNodes(DataGrid.SortableDataGrid.SortableDataGrid.NumericComparator.bind(null,"timestamp"),!1),this._updateColumnVisibility();const o=["method","request","response","direction"];this._filterParser=new TextUtils.TextUtils.FilterParser(o),this._suggestionBuilder=new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(o),this._textFilterUI=new UI.Toolbar.ToolbarInput(ls`Filter`,"",1,.2,"",this._suggestionBuilder.completions.bind(this._suggestionBuilder)),this._textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged,t=>{const e=t.data,i=this._filterParser.parse(e);this._filter=t=>{for(const{key:e,text:s,negative:o}of i){if(!s)continue;const i=e?t.data[e]:t.data;if(!i)continue;if(-1!==JSON.stringify(i).toLowerCase().indexOf(s.toLowerCase())===o)return!1}return!0},this._filterNodes()}),t.appendToolbarItem(this._textFilterUI)}_filterNodes(){for(const t of this._nodes)this._filter(t)?t.parent||this._dataGrid.insertChild(t):t.remove()}_innerHeaderContextMenu(t){const e=this._columns.filter(t=>t.hideable);for(const i of e)t.headerSection().appendCheckboxItem(i.title,this._toggleColumnVisibility.bind(this,i),i.visible)}_innerRowContextMenu(t,e){t.defaultSection().appendItem(ls`Filter`,()=>{this._textFilterUI.setValue("method:"+e.data.method,!0)}),t.defaultSection().appendItem(ls`Documentation`,()=>{const[t,i]=e.data.method.split("."),s="sent"===e.data.direction?"method":"event";Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(`https://chromedevtools.github.io/devtools-protocol/tot/${t}#${s}-${i}`)})}_toggleColumnVisibility(t){t.visible=!t.visible,this._updateColumnVisibility()}_updateColumnVisibility(){const t={};for(const e of this._columns)t[e.id]=e.visible;this._dataGrid.setColumnsVisiblity(t)}_sortDataGrid(){const t=this._dataGrid.sortColumnId();if(!t)return;let e=!0;switch(t){case"method":case"direction":e=!1}const i=e?DataGrid.SortableDataGrid.SortableDataGrid.NumericComparator:DataGrid.SortableDataGrid.SortableDataGrid.StringComparator;this._dataGrid.sortNodes(i.bind(null,t),!this._dataGrid.isSortOrderAscending())}wasShown(){this._started||(this._started=!0,this._startTime=Date.now(),this._setRecording(!0))}_setRecording(t){t?(ProtocolClient.InspectorBackend.test.onMessageSent=this._messageSent.bind(this),ProtocolClient.InspectorBackend.test.onMessageReceived=this._messageReceived.bind(this)):(ProtocolClient.InspectorBackend.test.onMessageSent=null,ProtocolClient.InspectorBackend.test.onMessageReceived=null)}_targetToString(t){return t?t.decorateLabel(`${t.name()} ${t===SDK.SDKModel.TargetManager.instance().mainTarget()?"":t.id()}`):""}_messageReceived(t,e){if("id"in t){const e=this._nodeForId[t.id];if(!e)return;return e.data.response=t.result||t.error,e.hasError=!!t.error,e.refresh(),void(this._dataGrid.selectedNode===e&&this._infoWidget.render(e.data))}const i=e,s=new ProtocolNode({method:t.method,direction:"received",response:t.params,timestamp:Date.now()-this._startTime,request:"",target:this._targetToString(i)});this._nodes.push(s),this._filter(s)&&this._dataGrid.insertChild(s)}_messageSent(t,e){const i=e,s=new ProtocolNode({method:t.method,direction:"sent",request:t.params,timestamp:Date.now()-this._startTime,response:"(pending)",id:t.id,target:this._targetToString(i)});this._nodeForId[t.id]=s,this._nodes.push(s),this._filter(s)&&this._dataGrid.insertChild(s)}}export class ProtocolNode extends DataGrid.SortableDataGrid.SortableDataGridNode{constructor(t){super(t),this.hasError=!1}createCell(t){switch(t){case"response":if(!this.data[t]&&"send"===this.data.direction){const e=this.createTD(t);return e.textContent="(pending)",e}case"request":{const e=this.createTD(t),i=SDK.RemoteObject.RemoteObject.fromLocalObject(this.data[t]);return e.textContent=i.description.trimEndWithMaxLength(50),e.classList.add("source-code"),e}case"timestamp":{const e=this.createTD(t);return e.textContent=ls`${this.data[t]} ms`,e}}return super.createCell(t)}element(){const t=super.element();return t.classList.toggle("protocol-message-sent","sent"===this.data.direction),t.classList.toggle("protocol-message-received","sent"!==this.data.direction),t.classList.toggle("error",this.hasError),t}}export class InfoWidget extends UI.Widget.VBox{constructor(){super(),this._tabbedPane=new UI.TabbedPane.TabbedPane,this._tabbedPane.appendTab("request","Request",new UI.Widget.Widget),this._tabbedPane.appendTab("response","Response",new UI.Widget.Widget),this._tabbedPane.show(this.contentElement),this._tabbedPane.selectTab("response"),this.render(null)}render(t){const e=t&&"sent"===t.direction;if(this._tabbedPane.setTabEnabled("request",!!e),!t)return this._tabbedPane.changeTabView("request",new UI.EmptyWidget.EmptyWidget(ls`No message selected`)),void this._tabbedPane.changeTabView("response",new UI.EmptyWidget.EmptyWidget(ls`No message selected`));e||this._tabbedPane.selectTab("response"),this._tabbedPane.changeTabView("request",SourceFrame.JSONView.JSONView.createViewSync(t.request)),this._tabbedPane.changeTabView("response",SourceFrame.JSONView.JSONView.createViewSync(t.response))}}