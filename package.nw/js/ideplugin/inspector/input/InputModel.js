import*as SDK from"../sdk/sdk.js";export class InputModel extends SDK.SDKModel.SDKModel{constructor(t){super(t),this._inputAgent=t.inputAgent(),this._eventDispatchTimer=null,this._dispatchEventDataList=[],this._finishCallback=null,this._reset()}_reset(){this._lastEventTime=null,this._replayPaused=!1,this._dispatchingIndex=0,clearTimeout(this._eventDispatchTimer)}setEvents(t){this._dispatchEventDataList=[];for(const e of t.sortedProcesses())for(const s of e.sortedThreads())this._processThreadEvents(t,s);this._dispatchEventDataList.sort((function(t,e){return t.timestamp-e.timestamp}))}startReplay(t){this._reset(),this._finishCallback=t,this._dispatchEventDataList.length?this._dispatchNextEvent():this._replayStopped()}pause(){clearTimeout(this._eventDispatchTimer),this._dispatchingIndex>=this._dispatchEventDataList.length?this._replayStopped():this._replayPaused=!0}resume(){this._replayPaused=!1,this._dispatchingIndex<this._dispatchEventDataList.length&&this._dispatchNextEvent()}_processThreadEvents(t,e){for(const t of e.events())"EventDispatch"===t.name&&this._isValidInputEvent(t.args.data)&&this._dispatchEventDataList.push(t.args.data)}_isValidInputEvent(t){return this._isMouseEvent(t)||this._isKeyboardEvent(t)}_isMouseEvent(t){return!!InputModel.MouseEventTypes.has(t.type)&&("x"in t&&"y"in t)}_isKeyboardEvent(t){return!!InputModel.KeyboardEventTypes.has(t.type)&&("code"in t&&"key"in t)}_dispatchNextEvent(){const t=this._dispatchEventDataList[this._dispatchingIndex];if(this._lastEventTime=t.timestamp,InputModel.MouseEventTypes.has(t.type)?this._dispatchMouseEvent(t):InputModel.KeyboardEventTypes.has(t.type)&&this._dispatchKeyEvent(t),++this._dispatchingIndex,this._dispatchingIndex<this._dispatchEventDataList.length){const t=(this._dispatchEventDataList[this._dispatchingIndex].timestamp-this._lastEventTime)/1e3;this._eventDispatchTimer=setTimeout(this._dispatchNextEvent.bind(this),t)}else this._replayStopped()}async _dispatchMouseEvent(t){console.assert(InputModel.MouseEventTypes.has(t.type));const e={type:InputModel.MouseEventTypes.get(t.type),x:t.x,y:t.y,modifiers:t.modifiers,button:"mousedown"===t.type||"mouseup"===t.type?{0:"left",1:"middle",2:"right",3:"back",4:"forward"}[t.button]:"none",buttons:t.buttons,clickCount:t.clickCount,deltaX:t.deltaX,deltaY:t.deltaY};await this._inputAgent.invoke_dispatchMouseEvent(e)}async _dispatchKeyEvent(t){console.assert(InputModel.KeyboardEventTypes.has(t.type));const e="keypress"===t.type?t.key[0]:void 0,s={type:InputModel.KeyboardEventTypes.get(t.type),modifiers:t.modifiers,text:e,unmodifiedText:e?e.toLowerCase():void 0,code:t.code,key:t.key};await this._inputAgent.invoke_dispatchKeyEvent(s)}_replayStopped(){clearTimeout(this._eventDispatchTimer),this._reset(),this._finishCallback()}}InputModel.MouseEventTypes=new Map([["mousedown","mousePressed"],["mouseup","mouseReleased"],["mousemove","mouseMoved"],["wheel","mouseWheel"]]),InputModel.KeyboardEventTypes=new Map([["keydown","keyDown"],["keyup","keyUp"],["keypress","char"]]),SDK.SDKModel.SDKModel.register(InputModel,SDK.SDKModel.Capability.Input,!1);export let EventData;export let MouseEventData;export let KeyboardEventData;