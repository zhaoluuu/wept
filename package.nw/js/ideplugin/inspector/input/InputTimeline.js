import*as Bindings from"../bindings/bindings.js";import*as Platform from"../platform/platform.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";import*as Timeline from"../timeline/timeline.js";import*as UI from"../ui/ui.js";import{InputModel}from"./InputModel.js";export class InputTimeline extends UI.Widget.VBox{constructor(){super(!0),this.registerRequiredCSS("input/inputTimeline.css"),this.element.classList.add("inputs-timeline"),this._tracingClient=null,this._tracingModel=null,this._inputModel=null,this._state=State.Idle,this._toggleRecordAction=UI.ActionRegistry.ActionRegistry.instance().action("input.toggle-recording"),this._startReplayAction=UI.ActionRegistry.ActionRegistry.instance().action("input.start-replaying"),this._togglePauseAction=UI.ActionRegistry.ActionRegistry.instance().action("input.toggle-pause");const t=this.contentElement.createChild("div","input-timeline-toolbar-container");this._panelToolbar=new UI.Toolbar.Toolbar("input-timeline-toolbar",t),this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this._toggleRecordAction)),this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this._startReplayAction)),this._panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this._togglePauseAction)),this._clearButton=new UI.Toolbar.ToolbarButton(ls`Clear all`,"largeicon-clear"),this._clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._reset.bind(this)),this._panelToolbar.appendToolbarItem(this._clearButton),this._panelToolbar.appendSeparator(),this._loadButton=new UI.Toolbar.ToolbarButton(Common.UIString("Load profile…"),"largeicon-load"),this._loadButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>this._selectFileToLoad()),this._saveButton=new UI.Toolbar.ToolbarButton(Common.UIString("Save profile…"),"largeicon-download"),this._saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,t=>{this._saveToFile()}),this._panelToolbar.appendSeparator(),this._panelToolbar.appendToolbarItem(this._loadButton),this._panelToolbar.appendToolbarItem(this._saveButton),this._panelToolbar.appendSeparator(),this._createFileSelector(),this._updateControls()}_reset(){this._tracingClient=null,this._tracingModel=null,this._inputModel=null,this._setState(State.Idle)}_createFileSelector(){this._fileSelectorElement&&this._fileSelectorElement.remove(),this._fileSelectorElement=UI.UIUtils.createFileSelectorElement(this._loadFromFile.bind(this)),this.element.appendChild(this._fileSelectorElement)}wasShown(){}willHide(){}_setState(t){this._state=t,this._updateControls()}_isAvailableState(){return this._state===State.Idle||this._state===State.ReplayPaused}_updateControls(){this._toggleRecordAction.setToggled(this._state===State.Recording),this._toggleRecordAction.setEnabled(this._isAvailableState()||this._state===State.Recording),this._startReplayAction.setEnabled(this._isAvailableState()&&!!this._tracingModel),this._togglePauseAction.setEnabled(this._state===State.Replaying||this._state===State.ReplayPaused),this._togglePauseAction.setToggled(this._state===State.ReplayPaused),this._clearButton.setEnabled(this._isAvailableState()),this._loadButton.setEnabled(this._isAvailableState()),this._saveButton.setEnabled(this._isAvailableState()&&!!this._tracingModel)}_toggleRecording(){switch(this._state){case State.Recording:this._stopRecording();break;case State.Idle:this._startRecording()}}_startReplay(){this._replayEvents()}_toggleReplayPause(){switch(this._state){case State.Replaying:this._pauseReplay();break;case State.ReplayPaused:this._resumeReplay()}}async _saveToFile(){console.assert(this._state===State.Idle&&this._tracingModel);const t=`InputProfile-${Platform.DateUtilities.toISO8601Compact(new Date)}.json`,e=new Bindings.FileUtils.FileOutputStream;if(!await e.open(t))return;const i=this._tracingModel.backingStorage();await i.writeToStream(e),e.close()}_selectFileToLoad(){this._fileSelectorElement.click()}_loadFromFile(t){console.assert(this._isAvailableState()),this._setState(State.Loading),this._loader=Timeline.TimelineLoader.TimelineLoader.loadFromFile(t,this),this._createFileSelector()}async _startRecording(){this._setState(State.StartPending),this._tracingClient=new InputTimeline.TracingClient(SDK.SDKModel.TargetManager.instance().mainTarget(),this);const t=await this._tracingClient.startRecording();t[ProtocolClient.InspectorBackend.ProtocolError]?this._recordingFailed(t[ProtocolClient.InspectorBackend.ProtocolError]):this._setState(State.Recording)}async _stopRecording(){this._setState(State.StopPending),await this._tracingClient.stopRecording(),this._tracingClient=null}async _replayEvents(){this._setState(State.Replaying),await this._inputModel.startReplay(this.replayStopped.bind(this))}_pauseReplay(){this._inputModel.pause(),this._setState(State.ReplayPaused)}_resumeReplay(){this._inputModel.resume(),this._setState(State.Replaying)}loadingStarted(){}loadingProgress(t){}processingStarted(){}loadingComplete(t){t?(this._inputModel=new InputModel(SDK.SDKModel.TargetManager.instance().mainTarget()),this._tracingModel=t,this._inputModel.setEvents(t),this._setState(State.Idle)):this._reset()}_recordingFailed(t){this._tracingClient=null,this._setState(State.Idle)}replayStopped(){this._setState(State.Idle)}}export const State={Idle:Symbol("Idle"),StartPending:Symbol("StartPending"),Recording:Symbol("Recording"),StopPending:Symbol("StopPending"),Replaying:Symbol("Replaying"),ReplayPaused:Symbol("ReplayPaused"),Loading:Symbol("Loading")};export class ActionDelegate{handleAction(t,e){return UI.ViewManager.ViewManager.instance().showView("Inputs").then(()=>UI.ViewManager.ViewManager.instance().view("Inputs").widget()).then(t=>this._innerHandleAction(t,e)),!0}_innerHandleAction(t,e){switch(e){case"input.toggle-recording":t._toggleRecording();break;case"input.start-replaying":t._startReplay();break;case"input.toggle-pause":t._toggleReplayPause();break;default:console.assert(!1,"Unknown action: "+e)}}}export class TracingClient{constructor(t,e){this._target=t,this._tracingManager=t.model(SDK.TracingManager.TracingManager),this._client=e;const i=new Bindings.TempFile.TempFileBackingStorage;this._tracingModel=new SDK.TracingModel.TracingModel(i),this._tracingCompleteCallback=null}async startRecording(){var t;const e=["devtools.timeline",(t="devtools.timeline.inputs","disabled-by-default-"+t)].join(","),i=await this._tracingManager.start(this,e,"");return i["Protocol.Error"]&&await this._waitForTracingToStop(!1),i}async stopRecording(){this._tracingManager&&this._tracingManager.stop(),await this._waitForTracingToStop(!0),await SDK.SDKModel.TargetManager.instance().resumeAllTargets(),this._tracingModel.tracingComplete(),this._client.loadingComplete(this._tracingModel)}traceEventsCollected(t){this._tracingModel.addEvents(t)}tracingComplete(){this._tracingCompleteCallback(),this._tracingCompleteCallback=null}tracingBufferUsage(t){}eventsRetrievalProgress(t){}_waitForTracingToStop(t){return new Promise(e=>{this._tracingManager&&t?this._tracingCompleteCallback=e:e()})}}