import*as SDK from"../sdk/sdk.js";export class BackgroundServiceModel extends SDK.SDKModel.SDKModel{constructor(e){super(e),this._backgroundServiceAgent=e.backgroundServiceAgent(),e.registerBackgroundServiceDispatcher(this),this._events=new Map}enable(e){this._events.set(e,[]),this._backgroundServiceAgent.startObserving(e)}setRecording(e,t){this._backgroundServiceAgent.setRecording(e,t)}clearEvents(e){this._events.set(e,[]),this._backgroundServiceAgent.clearEvents(e)}getEvents(e){return this._events.get(e)||[]}recordingStateChanged(e,t){this.dispatchEventToListeners(Events.RecordingStateChanged,{isRecording:e,serviceName:t})}backgroundServiceEventReceived(e){this._events.get(e.service).push(e),this.dispatchEventToListeners(Events.BackgroundServiceEventReceived,e)}}SDK.SDKModel.SDKModel.register(BackgroundServiceModel,SDK.SDKModel.Capability.Browser,!1);export const Events={RecordingStateChanged:Symbol("RecordingStateChanged"),BackgroundServiceEventReceived:Symbol("BackgroundServiceEventReceived")};