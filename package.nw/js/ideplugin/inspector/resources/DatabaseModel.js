import*as Common from"../common/common.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";export class Database{constructor(e,t,s,a,o){this._model=e,this._id=t,this._domain=s,this._name=a,this._version=o}get id(){return this._id}get name(){return this._name}set name(e){this._name=e}get version(){return this._version}set version(e){this._version=e}get domain(){return this._domain}set domain(e){this._domain=e}async tableNames(){return(await this._model._agent.getDatabaseTableNames(this._id)||[]).sort()}async executeSql(e,t,s){const a=await this._model._agent.invoke_executeSQL({databaseId:this._id,query:e}),o=a[ProtocolClient.InspectorBackend.ProtocolError];if(o)return void s(o);const i=a.sqlError;if(!i)return void t(a.columnNames,a.values);let n;n=i.message?i.message:2===i.code?Common.UIString.UIString("Database no longer has expected version."):Common.UIString.UIString("An unexpected error %s occurred.",i.code),s(n)}}export class DatabaseModel extends SDK.SDKModel.SDKModel{constructor(e){super(e),this._databases=[],this._agent=e.databaseAgent(),this.target().registerDatabaseDispatcher(new DatabaseDispatcher(this))}enable(){this._enabled||(this._agent.enable(),this._enabled=!0)}disable(){this._enabled&&(this._enabled=!1,this._databases=[],this._agent.disable(),this.dispatchEventToListeners(Events.DatabasesRemoved))}databases(){const e=[];for(const t of this._databases)e.push(t);return e}_addDatabase(e){this._databases.push(e),this.dispatchEventToListeners(Events.DatabaseAdded,e)}}SDK.SDKModel.SDKModel.register(DatabaseModel,SDK.SDKModel.Capability.DOM,!1);export const Events={DatabaseAdded:Symbol("DatabaseAdded"),DatabasesRemoved:Symbol("DatabasesRemoved")};export class DatabaseDispatcher{constructor(e){this._model=e}addDatabase(e){this._model._addDatabase(new Database(this._model,e.id,e.domain,e.name,e.version))}}