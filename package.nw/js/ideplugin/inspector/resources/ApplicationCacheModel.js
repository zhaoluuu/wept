import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";export class ApplicationCacheModel extends SDK.SDKModel.SDKModel{constructor(e){super(e),e.registerApplicationCacheDispatcher(new ApplicationCacheDispatcher(this)),this._agent=e.applicationCacheAgent(),this._agent.enable();const t=e.model(SDK.ResourceTreeModel.ResourceTreeModel);t.addEventListener(SDK.ResourceTreeModel.Events.FrameNavigated,e=>{this._frameNavigated(e)},this),t.addEventListener(SDK.ResourceTreeModel.Events.FrameDetached,this._frameDetached,this),this._statuses={},this._manifestURLsByFrame={},this._mainFrameNavigated(),this._onLine=!0}async _frameNavigated(e){const t=e.data;if(t.isMainFrame())return void this._mainFrameNavigated();const a=t.id,s=await this._agent.getManifestForFrame(a);null===s||s||this._frameManifestRemoved(a)}_frameDetached(e){const t=e.data;this._frameManifestRemoved(t.id)}reset(){this._statuses={},this._manifestURLsByFrame={},this.dispatchEventToListeners(Events.FrameManifestsReset)}async _mainFrameNavigated(){const e=await this._agent.getFramesWithManifests();for(const t of e||[])this._frameManifestUpdated(t.frameId,t.manifestURL,t.status)}_frameManifestUpdated(e,t,a){if(a===UNCACHED)return void this._frameManifestRemoved(e);if(!t)return;this._manifestURLsByFrame[e]&&t!==this._manifestURLsByFrame[e]&&this._frameManifestRemoved(e);const s=this._statuses[e]!==a;this._statuses[e]=a,this._manifestURLsByFrame[e]||(this._manifestURLsByFrame[e]=t,this.dispatchEventToListeners(Events.FrameManifestAdded,e)),s&&this.dispatchEventToListeners(Events.FrameManifestStatusUpdated,e)}_frameManifestRemoved(e){this._manifestURLsByFrame[e]&&(delete this._manifestURLsByFrame[e],delete this._statuses[e],this.dispatchEventToListeners(Events.FrameManifestRemoved,e))}frameManifestURL(e){return this._manifestURLsByFrame[e]||""}frameManifestStatus(e){return this._statuses[e]||UNCACHED}get onLine(){return this._onLine}_statusUpdated(e,t,a){this._frameManifestUpdated(e,t,a)}requestApplicationCache(e){return this._agent.getApplicationCacheForFrame(e)}_networkStateUpdated(e){this._onLine=e,this.dispatchEventToListeners(Events.NetworkStateChanged,e)}}SDK.SDKModel.SDKModel.register(ApplicationCacheModel,SDK.SDKModel.Capability.DOM,!1);export const Events={FrameManifestStatusUpdated:Symbol("FrameManifestStatusUpdated"),FrameManifestAdded:Symbol("FrameManifestAdded"),FrameManifestRemoved:Symbol("FrameManifestRemoved"),FrameManifestsReset:Symbol("FrameManifestsReset"),NetworkStateChanged:Symbol("NetworkStateChanged")};export class ApplicationCacheDispatcher{constructor(e){this._applicationCacheModel=e}applicationCacheStatusUpdated(e,t,a){this._applicationCacheModel._statusUpdated(e,t,a)}networkStateUpdated(e){this._applicationCacheModel._networkStateUpdated(e)}}export const UNCACHED=0;export const IDLE=1;export const CHECKING=2;export const DOWNLOADING=3;export const UPDATEREADY=4;export const OBSOLETE=5;