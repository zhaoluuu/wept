import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as DataGrid from"../data_grid/data_grid.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{BackgroundServiceModel,Events}from"./BackgroundServiceModel.js";export class BackgroundServiceView extends UI.Widget.VBox{static getUIString(e){switch(e){case Protocol.BackgroundService.ServiceName.BackgroundFetch:return ls`Background Fetch`;case Protocol.BackgroundService.ServiceName.BackgroundSync:return ls`Background Sync`;case Protocol.BackgroundService.ServiceName.PushMessaging:return ls`Push Messaging`;case Protocol.BackgroundService.ServiceName.Notifications:return ls`Notifications`;case Protocol.BackgroundService.ServiceName.PaymentHandler:return ls`Payment Handler`;case Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync:return ls`Periodic Background Sync`;default:return""}}constructor(e,t){super(!0),this.registerRequiredCSS("resources/backgroundServiceView.css"),this.registerRequiredCSS("ui/emptyWidget.css"),this._serviceName=e,this._model=t,this._model.addEventListener(Events.RecordingStateChanged,this._onRecordingStateChanged,this),this._model.addEventListener(Events.BackgroundServiceEventReceived,this._onEventReceived,this),this._model.enable(this._serviceName),this._serviceWorkerManager=this._model.target().model(SDK.ServiceWorkerManager.ServiceWorkerManager),this._securityOriginManager=this._model.target().model(SDK.SecurityOriginManager.SecurityOriginManager),this._securityOriginManager.addEventListener(SDK.SecurityOriginManager.Events.MainSecurityOriginChanged,()=>this._onOriginChanged()),this._recordAction=UI.ActionRegistry.ActionRegistry.instance().action("background-service.toggle-recording"),this._recordButton=null,this._originCheckbox=null,this._saveButton=null,this._toolbar=new UI.Toolbar.Toolbar("background-service-toolbar",this.contentElement),this._setupToolbar(),this._splitWidget=new UI.SplitWidget.SplitWidget(!1,!0),this._splitWidget.show(this.contentElement),this._dataGrid=this._createDataGrid(),this._previewPanel=new UI.Widget.VBox,this._selectedEventNode=null,this._preview=null,this._splitWidget.setMainWidget(this._dataGrid.asWidget()),this._splitWidget.setSidebarWidget(this._previewPanel),this._showPreview(null)}async _setupToolbar(){this._recordButton=UI.Toolbar.Toolbar.createActionButton(this._recordAction),this._toolbar.appendToolbarItem(this._recordButton);const e=new UI.Toolbar.ToolbarButton(ls`Clear`,"largeicon-clear");e.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,()=>this._clearEvents()),this._toolbar.appendToolbarItem(e),this._toolbar.appendSeparator(),this._saveButton=new UI.Toolbar.ToolbarButton(ls`Save events`,"largeicon-download"),this._saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,e=>{this._saveToFile()}),this._saveButton.setEnabled(!1),this._toolbar.appendToolbarItem(this._saveButton),this._toolbar.appendSeparator(),this._originCheckbox=new UI.Toolbar.ToolbarCheckbox(ls`Show events from other domains`,ls`Show events from other domains`,()=>this._refreshView()),this._toolbar.appendToolbarItem(this._originCheckbox)}_refreshView(){this._clearView();const e=this._model.getEvents(this._serviceName).filter(e=>this._acceptEvent(e));for(const t of e)this._addEvent(t)}_clearView(){this._selectedEventNode=null,this._dataGrid.rootNode().removeChildren(),this._saveButton.setEnabled(!1),this._showPreview(null)}_toggleRecording(){this._model.setRecording(!this._recordButton.toggled(),this._serviceName)}_clearEvents(){this._model.clearEvents(this._serviceName),this._clearView()}_onRecordingStateChanged(e){const t=e.data;t.serviceName===this._serviceName&&t.isRecording!==this._recordButton.toggled()&&(this._recordButton.setToggled(t.isRecording),this._showPreview(this._selectedEventNode))}_onEventReceived(e){const t=e.data;this._acceptEvent(t)&&this._addEvent(t)}_onOriginChanged(){this._originCheckbox.checked()||this._refreshView()}_addEvent(e){const t=this._createEventData(e),i=new EventDataNode(t,e.eventMetadata);this._dataGrid.rootNode().appendChild(i),1===this._dataGrid.rootNode().children.length&&(this._saveButton.setEnabled(!0),this._showPreview(this._selectedEventNode))}_createDataGrid(){const e=[{id:"id",title:ls`#`,weight:1},{id:"timestamp",title:ls`Timestamp`,weight:8},{id:"eventName",title:ls`Event`,weight:10},{id:"origin",title:ls`Origin`,weight:10},{id:"swScope",title:ls`SW Scope`,weight:2},{id:"instanceId",title:ls`Instance ID`,weight:10}],t=new DataGrid.DataGrid.DataGridImpl({displayName:ls`Background Services`,columns:e});return t.setStriped(!0),t.addEventListener(DataGrid.DataGrid.Events.SelectedNode,e=>this._showPreview(e.data)),t}_createEventData(e){let t="";const i=this._serviceWorkerManager.registrations().get(e.serviceWorkerRegistrationId);return i&&(t=i.scopeURL.substr(i.securityOrigin.length)),{id:this._dataGrid.rootNode().children.length+1,timestamp:UI.UIUtils.formatTimestamp(1e3*e.timestamp,!0),origin:e.origin,swScope:t,eventName:e.eventName,instanceId:e.instanceId}}_acceptEvent(e){if(e.service!==this._serviceName)return!1;if(this._originCheckbox.checked())return!0;const t=e.origin.substr(0,e.origin.length-1);return this._securityOriginManager.securityOrigins().includes(t)}_createLearnMoreLink(){let e="https://developers.google.com/web/tools/chrome-devtools/javascript/background-services?utm_source=devtools";switch(this._serviceName){case Protocol.BackgroundService.ServiceName.BackgroundFetch:e+="#fetch";break;case Protocol.BackgroundService.ServiceName.BackgroundSync:e+="#sync";break;case Protocol.BackgroundService.ServiceName.PushMessaging:e+="#push";break;case Protocol.BackgroundService.ServiceName.Notifications:e+="#notifications"}return UI.XLink.XLink.create(e,ls`Learn more`)}_showPreview(e){if(this._selectedEventNode&&this._selectedEventNode===e)return;if(this._selectedEventNode=e,this._preview&&this._preview.detach(),this._selectedEventNode)return this._preview=this._selectedEventNode.createPreview(),void this._preview.show(this._previewPanel.contentElement);this._preview=new UI.Widget.VBox,this._preview.contentElement.classList.add("background-service-preview","fill");const t=this._preview.contentElement.createChild("div");if(this._dataGrid.rootNode().children.length)t.createChild("p").textContent=ls`Select an entry to view metadata`;else if(this._recordButton.toggled()){const e=BackgroundServiceView.getUIString(this._serviceName);t.createChild("p").textContent=ls`Recording ${e} activity...`,t.createChild("p").textContent=ls`DevTools will record all ${e} activity for up to 3 days, even when closed.`}else{const e=UI.Toolbar.Toolbar.createActionButton(this._recordAction),i=document.createElement("b");i.classList.add("background-service-shortcut"),i.textContent=self.UI.shortcutRegistry.shortcutsForAction("background-service.toggle-recording")[0].title();const r=UI.UIUtils.createInlineButton(e);r.classList.add("background-service-record-inline-button"),t.createChild("p").appendChild(UI.UIUtils.formatLocalized("Click the record button %s or hit %s to start recording.",[r,i])),t.appendChild(this._createLearnMoreLink())}this._preview.show(this._previewPanel.contentElement)}async _saveToFile(){const e=`${this._serviceName}-${Platform.DateUtilities.toISO8601Compact(new Date)}.json`,t=new Bindings.FileUtils.FileOutputStream;if(!await t.open(e))return;const i=this._model.getEvents(this._serviceName).filter(e=>this._acceptEvent(e));await t.write(JSON.stringify(i,void 0,2)),t.close()}}export class EventDataNode extends DataGrid.DataGrid.DataGridNode{constructor(e,t){super(e),this._eventMetadata=t.sort((e,t)=>e.key.compareTo(t.key))}createPreview(){const e=new UI.Widget.VBox;e.element.classList.add("background-service-metadata");for(const t of this._eventMetadata){const i=document.createElement("div");i.classList.add("background-service-metadata-entry"),i.createChild("div","background-service-metadata-name").textContent=t.key+": ",t.value?i.createChild("div","background-service-metadata-value source-code").textContent=t.value:i.createChild("div","background-service-metadata-value background-service-empty-value").textContent=ls`empty`,e.element.appendChild(i)}if(!e.element.children.length){const t=document.createElement("div");t.classList.add("background-service-metadata-entry"),t.createChild("div","background-service-metadata-name").textContent=ls`No metadata for this event`,e.element.appendChild(t)}return e}}export class ActionDelegate{handleAction(e,t){const i=e.flavor(BackgroundServiceView);switch(t){case"background-service.toggle-recording":return i._toggleRecording(),!0}return!1}}export let RecordingState;export let EventData;