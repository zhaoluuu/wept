import*as Common from"../common/common.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";export class IndexedDBModel extends SDK.SDKModel.SDKModel{constructor(e){super(e),e.registerStorageDispatcher(this),this._securityOriginManager=e.model(SDK.SecurityOriginManager.SecurityOriginManager),this._indexedDBAgent=e.indexedDBAgent(),this._storageAgent=e.storageAgent(),this._databases=new Map,this._databaseNamesBySecurityOrigin={},this._originsUpdated=new Set,this._throttler=new Common.Throttler.Throttler(1e3)}static keyFromIDBKey(e){if(null==e)return;let t;const a={};switch(typeof e){case"number":a.number=e,t=KeyTypes.NumberType;break;case"string":a.string=e,t=KeyTypes.StringType;break;case"object":if(e instanceof Date)a.date=e.getTime(),t=KeyTypes.DateType;else if(Array.isArray(e)){a.array=[];for(let t=0;t<e.length;++t)a.array.push(IndexedDBModel.keyFromIDBKey(e[t]));t=KeyTypes.ArrayType}break;default:return}return a.type=t,a}static _keyRangeFromIDBKeyRange(e){const t={};return t.lower=IndexedDBModel.keyFromIDBKey(e.lower),t.upper=IndexedDBModel.keyFromIDBKey(e.upper),t.lowerOpen=!!e.lowerOpen,t.upperOpen=!!e.upperOpen,t}static idbKeyPathFromKeyPath(e){let t;switch(e.type){case KeyPathTypes.NullType:t=null;break;case KeyPathTypes.StringType:t=e.string;break;case KeyPathTypes.ArrayType:t=e.array}return t}static keyPathStringFromIDBKeyPath(e){return"string"==typeof e?'"'+e+'"':e instanceof Array?'["'+e.join('", "')+'"]':null}enable(){if(!this._enabled){this._indexedDBAgent.enable(),this._securityOriginManager.addEventListener(SDK.SecurityOriginManager.Events.SecurityOriginAdded,this._securityOriginAdded,this),this._securityOriginManager.addEventListener(SDK.SecurityOriginManager.Events.SecurityOriginRemoved,this._securityOriginRemoved,this);for(const e of this._securityOriginManager.securityOrigins())this._addOrigin(e);this._enabled=!0}}clearForOrigin(e){this._enabled&&this._databaseNamesBySecurityOrigin[e]&&(this._removeOrigin(e),this._addOrigin(e))}async deleteDatabase(e){this._enabled&&(await this._indexedDBAgent.deleteDatabase(e.securityOrigin,e.name),this._loadDatabaseNames(e.securityOrigin))}async refreshDatabaseNames(){for(const e in this._databaseNamesBySecurityOrigin)await this._loadDatabaseNames(e);this.dispatchEventToListeners(Events.DatabaseNamesRefreshed)}refreshDatabase(e){this._loadDatabase(e,!0)}clearObjectStore(e,t){return this._indexedDBAgent.clearObjectStore(e.securityOrigin,e.name,t)}deleteEntries(e,t,a){const s=IndexedDBModel._keyRangeFromIDBKeyRange(a);return this._indexedDBAgent.deleteObjectStoreEntries(e.securityOrigin,e.name,t,s)}_securityOriginAdded(e){const t=e.data;this._addOrigin(t)}_securityOriginRemoved(e){const t=e.data;this._removeOrigin(t)}_addOrigin(e){console.assert(!this._databaseNamesBySecurityOrigin[e]),this._databaseNamesBySecurityOrigin[e]=[],this._loadDatabaseNames(e),this._isValidSecurityOrigin(e)&&this._storageAgent.trackIndexedDBForOrigin(e)}_removeOrigin(e){console.assert(this._databaseNamesBySecurityOrigin[e]);for(let t=0;t<this._databaseNamesBySecurityOrigin[e].length;++t)this._databaseRemoved(e,this._databaseNamesBySecurityOrigin[e][t]);delete this._databaseNamesBySecurityOrigin[e],this._isValidSecurityOrigin(e)&&this._storageAgent.untrackIndexedDBForOrigin(e)}_isValidSecurityOrigin(e){const t=Common.ParsedURL.ParsedURL.fromString(e);return!!t&&t.scheme.startsWith("http")}_updateOriginDatabaseNames(e,t){const a=new Set(t),s=new Set(this._databaseNamesBySecurityOrigin[e]);this._databaseNamesBySecurityOrigin[e]=t;for(const t of s)a.has(t)||this._databaseRemoved(e,t);for(const t of a)s.has(t)||this._databaseAdded(e,t)}databases(){const e=[];for(const t in this._databaseNamesBySecurityOrigin){const a=this._databaseNamesBySecurityOrigin[t];for(let s=0;s<a.length;++s)e.push(new DatabaseId(t,a[s]))}return e}_databaseAdded(e,t){const a=new DatabaseId(e,t);this.dispatchEventToListeners(Events.DatabaseAdded,{model:this,databaseId:a})}_databaseRemoved(e,t){const a=new DatabaseId(e,t);this.dispatchEventToListeners(Events.DatabaseRemoved,{model:this,databaseId:a})}async _loadDatabaseNames(e){const t=await this._indexedDBAgent.requestDatabaseNames(e);return t&&this._databaseNamesBySecurityOrigin[e]?(this._updateOriginDatabaseNames(e,t),t):[]}async _loadDatabase(e,t){const a=await this._indexedDBAgent.requestDatabase(e.securityOrigin,e.name);if(!a)return;if(!this._databaseNamesBySecurityOrigin[e.securityOrigin])return;const s=new Database(e,a.version);this._databases.set(e,s);for(const e of a.objectStores){const t=IndexedDBModel.idbKeyPathFromKeyPath(e.keyPath),a=new ObjectStore(e.name,t,e.autoIncrement);for(let t=0;t<e.indexes.length;++t){const s=e.indexes[t],r=IndexedDBModel.idbKeyPathFromKeyPath(s.keyPath),i=new Index(s.name,r,s.unique,s.multiEntry);a.indexes[i.name]=i}s.objectStores[a.name]=a}this.dispatchEventToListeners(Events.DatabaseLoaded,{model:this,database:s,entriesUpdated:t})}loadObjectStoreData(e,t,a,s,r,i){this._requestData(e,e.name,t,"",a,s,r,i)}loadIndexData(e,t,a,s,r,i,n){this._requestData(e,e.name,t,a,s,r,i,n)}async _requestData(e,t,a,s,r,i,n,o){const d=r?IndexedDBModel._keyRangeFromIDBKeyRange(r):void 0,c=await this._indexedDBAgent.invoke_requestData({securityOrigin:e.securityOrigin,databaseName:t,objectStoreName:a,indexName:s,skipCount:i,pageSize:n,keyRange:d});if(c[ProtocolClient.InspectorBackend.ProtocolError])return void console.error("IndexedDBAgent error: "+c[ProtocolClient.InspectorBackend.ProtocolError]);const y=this.target().model(SDK.RuntimeModel.RuntimeModel);if(!y||!this._databaseNamesBySecurityOrigin[e.securityOrigin])return;const h=c.objectStoreDataEntries,g=[];for(const e of h){const t=y.createRemoteObject(e.key),a=y.createRemoteObject(e.primaryKey),s=y.createRemoteObject(e.value);g.push(new Entry(t,a,s))}o(g,c.hasMore)}async getMetadata(e,t){const a=e.securityOrigin,s=e.name,r=t.name,i=await this._indexedDBAgent.invoke_getMetadata({securityOrigin:a,databaseName:s,objectStoreName:r});return i[ProtocolClient.InspectorBackend.ProtocolError]?(console.error("IndexedDBAgent error: "+i[ProtocolClient.InspectorBackend.ProtocolError]),null):{entriesCount:i.entriesCount,keyGeneratorValue:i.keyGeneratorValue}}async _refreshDatabaseList(e){const t=await this._loadDatabaseNames(e);for(const a of t)this._loadDatabase(new DatabaseId(e,a),!1)}indexedDBListUpdated(e){this._originsUpdated.add(e),this._throttler.schedule(()=>{const e=Array.from(this._originsUpdated,e=>{this._refreshDatabaseList(e)});return this._originsUpdated.clear(),Promise.all(e)})}indexedDBContentUpdated(e,t,a){const s=new DatabaseId(e,t);this.dispatchEventToListeners(Events.IndexedDBContentUpdated,{databaseId:s,objectStoreName:a,model:this})}cacheStorageListUpdated(e){}cacheStorageContentUpdated(e){}}SDK.SDKModel.SDKModel.register(IndexedDBModel,SDK.SDKModel.Capability.Storage,!1);export const KeyTypes={NumberType:"number",StringType:"string",DateType:"date",ArrayType:"array"};export const KeyPathTypes={NullType:"null",StringType:"string",ArrayType:"array"};export const Events={DatabaseAdded:Symbol("DatabaseAdded"),DatabaseRemoved:Symbol("DatabaseRemoved"),DatabaseLoaded:Symbol("DatabaseLoaded"),DatabaseNamesRefreshed:Symbol("DatabaseNamesRefreshed"),IndexedDBContentUpdated:Symbol("IndexedDBContentUpdated")};export class Entry{constructor(e,t,a){this.key=e,this.primaryKey=t,this.value=a}}export class DatabaseId{constructor(e,t){this.securityOrigin=e,this.name=t}equals(e){return this.name===e.name&&this.securityOrigin===e.securityOrigin}}export class Database{constructor(e,t){this.databaseId=e,this.version=t,this.objectStores={}}}export class ObjectStore{constructor(e,t,a){this.name=e,this.keyPath=t,this.autoIncrement=a,this.indexes={}}get keyPathString(){return IndexedDBModel.keyPathStringFromIDBKeyPath(this.keyPath)}}export class Index{constructor(e,t,a,s){this.name=e,this.keyPath=t,this.unique=a,this.multiEntry=s}get keyPathString(){return IndexedDBModel.keyPathStringFromIDBKeyPath(this.keyPath)}}export let ObjectStoreMetadata;