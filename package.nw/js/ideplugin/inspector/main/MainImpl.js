import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as Components from"../components/components.js";import*as Extensions from"../extensions/extensions.js";import*as Host from"../host/host.js";import*as Persistence from"../persistence/persistence.js";import*as Platform from"../platform/platform.js";import*as ProtocolClient from"../protocol_client/protocol_client.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import*as Workspace from"../workspace/workspace.js";import{ExecutionContextSelector}from"./ExecutionContextSelector.js";export class MainImpl{constructor(){MainImpl._instanceForTest=this,runOnWindowLoad(this._loaded.bind(this))}static time(e){Host.InspectorFrontendHost.isUnderTest()||console.time(e)}static timeEnd(e){Host.InspectorFrontendHost.isUnderTest()||console.timeEnd(e)}async _loaded(){console.timeStamp("Main._loaded"),await Runtime.appStarted,Root.Runtime.setPlatform(Host.Platform.platform()),Root.Runtime.setL10nCallback(ls),Host.InspectorFrontendHost.InspectorFrontendHostInstance.getPreferences(this._gotPreferences.bind(this)),wxMain.isFeatureEnabled("monitorMainLoaded")&&wxMain.emit(WxMain.Events.mainLoaded)}_gotPreferences(e){console.timeStamp("Main._gotPreferences"),Host.InspectorFrontendHost.isUnderTest(e)&&self.runtime.useTestBase(),this._createSettings(e),this._createAppUI()}_createSettings(e){this._initializeExperiments();let t,n="";Host.Platform.isCustomDevtoolsFrontend()?n="__custom__":Root.Runtime.queryParam("can_dock")||!Root.Runtime.queryParam("debugFrontend")||Host.InspectorFrontendHost.isUnderTest()||(n="__bundled__"),t=!Host.InspectorFrontendHost.isUnderTest()&&window.localStorage?new Common.Settings.SettingsStorage(window.localStorage,void 0,void 0,()=>window.localStorage.clear(),n):new Common.Settings.SettingsStorage({},void 0,void 0,void 0,n);const o=new Common.Settings.SettingsStorage(e,Host.InspectorFrontendHost.InspectorFrontendHostInstance.setPreference,Host.InspectorFrontendHost.InspectorFrontendHostInstance.removePreference,Host.InspectorFrontendHost.InspectorFrontendHostInstance.clearPreferences,n);if(Common.Settings.Settings.instance({forceNew:!0,globalStorage:o,localStorage:t}),wxMain.isFeatureEnabled("ensureDevtoolsSetting")){const e=wxMain.getFeatureOptions("ensureDevtoolsSetting").data;for(const t in e)try{Common.Settings.Settings.instance().moduleSetting(t).set(e[t])}catch(e){}}self.Common.settings=Common.Settings.Settings.instance(),Host.InspectorFrontendHost.isUnderTest()||(new Common.Settings.VersionController).updateVersion()}_initializeExperiments(){Root.Runtime.experiments.register("applyCustomStylesheet","Allow custom UI themes"),Root.Runtime.experiments.register("captureNodeCreationStacks","Capture node creation stacks"),Root.Runtime.experiments.register("sourcesPrettyPrint","Automatically pretty print in the Sources Panel"),Root.Runtime.experiments.register("backgroundServices","Background web platform feature events",!0),Root.Runtime.experiments.register("backgroundServicesNotifications","Background services section for Notifications"),Root.Runtime.experiments.register("backgroundServicesPaymentHandler","Background services section for Payment Handler"),Root.Runtime.experiments.register("backgroundServicesPushMessaging","Background services section for Push Messaging"),Root.Runtime.experiments.register("blackboxJSFramesOnTimeline","Blackbox JavaScript frames on Timeline",!0),Root.Runtime.experiments.register("cssOverview","CSS Overview"),Root.Runtime.experiments.register("emptySourceMapAutoStepping","Empty sourcemap auto-stepping"),Root.Runtime.experiments.register("inputEventsOnTimelineOverview","Input events on Timeline overview",!0),Root.Runtime.experiments.register("liveHeapProfile","Live heap profile",!0),Root.Runtime.experiments.register("nativeHeapProfiler","Native memory sampling heap profiler",!0),Root.Runtime.experiments.register("protocolMonitor","Protocol Monitor"),Root.Runtime.experiments.register("issuesPane","Issues Pane"),Root.Runtime.experiments.register("developerResourcesView","Show developer resources view"),Root.Runtime.experiments.register("recordCoverageWithPerformanceTracing","Record coverage while performance tracing"),Root.Runtime.experiments.register("samplingHeapProfilerTimeline","Sampling heap profiler timeline",!0),Root.Runtime.experiments.register("showOptionToNotTreatGlobalObjectsAsRoots","Show option to take heap snapshot where globals are not treated as root"),Root.Runtime.experiments.register("sourceDiff","Source diff"),Root.Runtime.experiments.register("sourceOrderViewer","Source order viewer"),Root.Runtime.experiments.register("spotlight","Spotlight",!0),Root.Runtime.experiments.register("webauthnPane","WebAuthn Pane"),Root.Runtime.experiments.register("customKeyboardShortcuts","Enable custom keyboard shortcuts settings tab (requires reload)"),Root.Runtime.experiments.register("timelineEventInitiators","Timeline: event initiators"),Root.Runtime.experiments.register("timelineFlowEvents","Timeline: flow events",!0),Root.Runtime.experiments.register("timelineInvalidationTracking","Timeline: invalidation tracking",!0),Root.Runtime.experiments.register("timelineShowAllEvents","Timeline: show all events",!0),Root.Runtime.experiments.register("timelineV8RuntimeCallStats","Timeline: V8 Runtime Call Stats on Timeline",!0),Root.Runtime.experiments.register("timelineWebGL","Timeline: WebGL-based flamechart"),Root.Runtime.experiments.register("timelineReplayEvent","Timeline: Replay input events",!0),Root.Runtime.experiments.register("wasmDWARFDebugging","WebAssembly Debugging: Enable DWARF support"),Root.Runtime.experiments.register("dualScreenSupport","Emulation: Support dual screen mode"),Root.Runtime.experiments.register("cssGridFeatures","Enable new CSS Grid debugging features (configuration options available in Layout sidebar pane in Elements after restart)"),Root.Runtime.experiments.register("movableTabs","Enable support to move tabs between panels"),Root.Runtime.experiments.cleanUpStaleExperiments();const e=Root.Runtime.queryParam("enabledExperiments");e&&Root.Runtime.experiments.setServerEnabledExperiments(e.split(";")),Root.Runtime.experiments.setDefaultExperiments(["backgroundServices","backgroundServicesNotifications","backgroundServicesPushMessaging","backgroundServicesPaymentHandler","customKeyboardShortcuts","issuesPane"]),Host.InspectorFrontendHost.isUnderTest()&&Root.Runtime.queryParam("test").includes("live-line-level-heap-profile.js")&&Root.Runtime.experiments.enableForTest("liveHeapProfile");for(const e of Root.Runtime.experiments.enabledExperiments())Host.userMetrics.experimentEnabledAtLaunch(e.name)}async _createAppUI(){MainImpl.time("Main._createAppUI"),self.UI.viewManager=UI.ViewManager.ViewManager.instance(),self.Persistence.isolatedFileSystemManager=Persistence.IsolatedFileSystemManager.IsolatedFileSystemManager.instance();const e=Common.Settings.Settings.instance().createSetting("uiTheme","systemPreferred");if(UI.UIUtils.initializeUIUtils(document,e),"systemPreferred"===e.get()){window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",()=>{UI.InspectorView.InspectorView.instance().displayReloadRequiredWarning(ls`The system-preferred color scheme has changed. To apply this change to DevTools, reload.`)})}UI.UIUtils.installComponentRootStyles(document.body),this._addMainEventListeners(document);const t=!!Root.Runtime.queryParam("can_dock");self.UI.zoomManager=UI.ZoomManager.ZoomManager.instance({forceNew:!0,win:window,frontendHost:Host.InspectorFrontendHost.InspectorFrontendHostInstance}),self.UI.inspectorView=UI.InspectorView.InspectorView.instance(),UI.ContextMenu.ContextMenu.initialize(),UI.ContextMenu.ContextMenu.installHandler(document),UI.Tooltip.Tooltip.installHandler(document),self.SDK.consoleModel=SDK.ConsoleModel.ConsoleModel.instance(),self.UI.dockController=new UI.DockController.DockController(t),self.SDK.multitargetNetworkManager=SDK.NetworkManager.MultitargetNetworkManager.instance({forceNew:!0}),self.SDK.domDebuggerManager=new SDK.DOMDebuggerModel.DOMDebuggerManager,SDK.SDKModel.TargetManager.instance().addEventListener(SDK.SDKModel.Events.SuspendStateChanged,this._onSuspendStateChanged.bind(this)),self.UI.shortcutsScreen=new UI.ShortcutsScreen.ShortcutsScreen,self.UI.shortcutsScreen.section(Common.UIString.UIString("Elements Panel")),self.UI.shortcutsScreen.section(Common.UIString.UIString("Styles Pane")),self.UI.shortcutsScreen.section(Common.UIString.UIString("Debugger")),self.UI.shortcutsScreen.section(Common.UIString.UIString("Console")),self.Workspace.fileManager=new Workspace.FileManager.FileManager,self.Workspace.workspace=Workspace.Workspace.WorkspaceImpl.instance(),self.Bindings.networkProjectManager=Bindings.NetworkProject.NetworkProjectManager.instance(),self.Bindings.resourceMapping=Bindings.ResourceMapping.ResourceMapping.instance({forceNew:!0,targetManager:SDK.SDKModel.TargetManager.instance(),workspace:Workspace.Workspace.WorkspaceImpl.instance()}),new Bindings.PresentationConsoleMessageHelper.PresentationConsoleMessageManager,self.Bindings.cssWorkspaceBinding=Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance({forceNew:!0,targetManager:SDK.SDKModel.TargetManager.instance(),workspace:Workspace.Workspace.WorkspaceImpl.instance()}),self.Bindings.debuggerWorkspaceBinding=Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({forceNew:!0,targetManager:SDK.SDKModel.TargetManager.instance(),workspace:Workspace.Workspace.WorkspaceImpl.instance()}),self.Bindings.breakpointManager=Bindings.BreakpointManager.BreakpointManager.instance({forceNew:!0,workspace:Workspace.Workspace.WorkspaceImpl.instance(),targetManager:SDK.SDKModel.TargetManager.instance(),debuggerWorkspaceBinding:Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance()}),self.Extensions.extensionServer=new Extensions.ExtensionServer.ExtensionServer,new Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding(Persistence.IsolatedFileSystemManager.IsolatedFileSystemManager.instance(),Workspace.Workspace.WorkspaceImpl.instance()),self.Persistence.persistence=new Persistence.Persistence.PersistenceImpl(Workspace.Workspace.WorkspaceImpl.instance(),Bindings.BreakpointManager.BreakpointManager.instance()),self.Persistence.networkPersistenceManager=new Persistence.NetworkPersistenceManager.NetworkPersistenceManager(Workspace.Workspace.WorkspaceImpl.instance()),new ExecutionContextSelector(SDK.SDKModel.TargetManager.instance(),UI.Context.Context.instance()),self.Bindings.blackboxManager=Bindings.BlackboxManager.BlackboxManager.instance({forceNew:!0,debuggerWorkspaceBinding:Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance()}),new PauseListener;const n=UI.ActionRegistry.ActionRegistry.instance({forceNew:!0});self.UI.actionRegistry=n,self.UI.shortcutRegistry=new UI.ShortcutRegistry.ShortcutRegistry(n),UI.ShortcutsScreen.ShortcutsScreen.registerShortcuts(),this._registerMessageSinkListener(),MainImpl.timeEnd("Main._createAppUI"),wxMain.isFeatureEnabled("monitorAppUICreated")&&wxMain.emit(WxMain.Events.appUICreated),this._showAppUI(await self.runtime.extension(Common.AppProvider.AppProvider).instance())}_showAppUI(e){MainImpl.time("Main._showAppUI");const t=e.createApp();self.UI.dockController.initialize(),t.presentUI(document);const n=UI.ActionRegistry.ActionRegistry.instance().action("elements.toggle-element-search");n&&Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.EnterInspectElementMode,()=>{n.execute()},this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.RevealSourceLine,this._revealSourceLine,this),self.UI.inspectorView.createToolbars(),Host.InspectorFrontendHost.InspectorFrontendHostInstance.loadCompleted();const o=self.runtime.extensions(Common.QueryParamHandler.QueryParamHandler);for(const e of o){const t=Root.Runtime.queryParam(e.descriptor().name);null!==t&&e.instance().then(r.bind(null,t))}function r(e,t){t.handleQueryParam(e)}setTimeout(this._initializeTarget.bind(this),0),MainImpl.timeEnd("Main._showAppUI")}async _initializeTarget(){MainImpl.time("Main._initializeTarget");const e=await Promise.all(self.runtime.extensions("early-initialization").map(e=>e.instance()));for(const t of e)await t.run();Host.InspectorFrontendHost.InspectorFrontendHostInstance.readyForTest(),setTimeout(this._lateInitialization.bind(this),100),MainImpl.timeEnd("Main._initializeTarget")}_lateInitialization(){MainImpl.time("Main._lateInitialization"),this._registerShortcuts(),self.Extensions.extensionServer.initializeExtensions();const e=self.runtime.extensions("late-initialization"),t=[];for(const o of e){const e=o.descriptor().setting;async function n(t){t.data&&(Common.Settings.Settings.instance().moduleSetting(e).removeChangeListener(n),(await o.instance()).run())}e&&!Common.Settings.Settings.instance().moduleSetting(e).get()?Common.Settings.Settings.instance().moduleSetting(e).addChangeListener(n):t.push(o.instance().then(e=>e.run()))}this._lateInitDonePromise=Promise.all(t),MainImpl.timeEnd("Main._lateInitialization")}lateInitDonePromiseForTest(){return this._lateInitDonePromise}_registerMessageSinkListener(){Common.Console.Console.instance().addEventListener(Common.Console.Events.MessageAdded,(function(e){e.data.show&&Common.Console.Console.instance().show()}))}_revealSourceLine(e){const t=e.data.url,n=e.data.lineNumber,o=e.data.columnNumber,r=Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(t);r?Common.Revealer.reveal(r.uiLocation(n,o)):Workspace.Workspace.WorkspaceImpl.instance().addEventListener(Workspace.Workspace.Events.UISourceCodeAdded,(function e(r){const s=r.data;s.url()===t&&(Common.Revealer.reveal(s.uiLocation(n,o)),Workspace.Workspace.WorkspaceImpl.instance().removeEventListener(Workspace.Workspace.Events.UISourceCodeAdded,e))}))}_registerShortcuts(){const e=UI.KeyboardShortcut.KeyboardShortcut,t=self.UI.shortcutsScreen.section(Common.UIString.UIString("All Panels"));let n=[e.makeDescriptor("[",UI.KeyboardShortcut.Modifiers.CtrlOrMeta),e.makeDescriptor("]",UI.KeyboardShortcut.Modifiers.CtrlOrMeta)];t.addRelatedKeys(n,Common.UIString.UIString("Go to the panel to the left/right"));const o=Common.UIString.UIString("Show console");t.addKey(e.makeDescriptor(UI.KeyboardShortcut.Keys.Tilde,UI.KeyboardShortcut.Modifiers.Ctrl),o),t.addKey(e.makeDescriptor(UI.KeyboardShortcut.Keys.Esc),Common.UIString.UIString("Toggle drawer")),self.UI.dockController.canDock()&&(t.addKey(e.makeDescriptor("M",UI.KeyboardShortcut.Modifiers.CtrlOrMeta|UI.KeyboardShortcut.Modifiers.Shift),Common.UIString.UIString("Toggle device mode")),t.addKey(e.makeDescriptor("D",UI.KeyboardShortcut.Modifiers.CtrlOrMeta|UI.KeyboardShortcut.Modifiers.Shift),Common.UIString.UIString("Toggle dock side"))),t.addKey(e.makeDescriptor("f",UI.KeyboardShortcut.Modifiers.CtrlOrMeta),Common.UIString.UIString("Search"));const r=Host.Platform.isMac()?UI.KeyboardShortcut.Modifiers.Meta|UI.KeyboardShortcut.Modifiers.Alt:UI.KeyboardShortcut.Modifiers.Ctrl|UI.KeyboardShortcut.Modifiers.Shift,s=e.makeDescriptor("f",r);t.addKey(s,Common.UIString.UIString("Search across all sources"));const i=self.UI.shortcutRegistry.shortcutDescriptorsForAction("elements.toggle-element-search");i.length&&t.addKey(i[0],Common.UIString.UIString("Select node to inspect"));const a=UI.KeyboardShortcut.KeyboardShortcut.makeDescriptor("p",UI.KeyboardShortcut.Modifiers.CtrlOrMeta);t.addKey(a,Common.UIString.UIString("Go to source")),Host.Platform.isMac()&&(n=[e.makeDescriptor("g",UI.KeyboardShortcut.Modifiers.Meta),e.makeDescriptor("g",UI.KeyboardShortcut.Modifiers.Meta|UI.KeyboardShortcut.Modifiers.Shift)],t.addRelatedKeys(n,Common.UIString.UIString("Find next/previous")))}_postDocumentKeyDown(e){e.handled||self.UI.shortcutRegistry.handleShortcut(e)}_redispatchClipboardEvent(e){const t=new CustomEvent("clipboard-"+e.type,{bubbles:!0});t.original=e;const n=e.target&&e.target.ownerDocument,o=n?n.deepActiveElement():null;o&&o.dispatchEvent(t),t.handled&&e.preventDefault()}_contextMenuEventFired(e){(e.handled||e.target.classList.contains("popup-glasspane"))&&e.preventDefault()}_addMainEventListeners(e){e.addEventListener("keydown",this._postDocumentKeyDown.bind(this),!1),e.addEventListener("beforecopy",this._redispatchClipboardEvent.bind(this),!0),e.addEventListener("copy",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("cut",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("paste",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("contextmenu",this._contextMenuEventFired.bind(this),!0)}_onSuspendStateChanged(){const e=SDK.SDKModel.TargetManager.instance().allTargetsSuspended();self.UI.inspectorView.onSuspendStateChanged(e)}}export class ZoomActionDelegate{handleAction(e,t){if(Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode())return!1;switch(t){case"main.zoom-in":return Host.InspectorFrontendHost.InspectorFrontendHostInstance.zoomIn(),!0;case"main.zoom-out":return Host.InspectorFrontendHost.InspectorFrontendHostInstance.zoomOut(),!0;case"main.zoom-reset":return Host.InspectorFrontendHost.InspectorFrontendHostInstance.resetZoom(),!0}return!1}}export class SearchActionDelegate{handleAction(e,t){let n=UI.SearchableView.SearchableView.fromElement(document.deepActiveElement());if(!n){const e=self.UI.inspectorView.currentPanelDeprecated();if(e&&(n=e.searchableView()),!n)return!1}switch(t){case"main.search-in-panel.find":return n.handleFindShortcut();case"main.search-in-panel.cancel":return n.handleCancelSearchShortcut();case"main.search-in-panel.find-next":return n.handleFindNextShortcut();case"main.search-in-panel.find-previous":return n.handleFindPreviousShortcut()}return!1}}export class MainMenuItem{constructor(){this._item=new UI.Toolbar.ToolbarMenuButton(this._handleContextMenu.bind(this),!0),this._item.setTitle(Common.UIString.UIString("Customize and control DevTools"))}item(){return this._item}_handleContextMenu(e){if(self.UI.dockController.canDock()){const t=document.createElement("div");t.classList.add("flex-centered"),t.classList.add("flex-auto"),t.tabIndex=-1;const o=t.createChild("span","flex-auto");o.textContent=Common.UIString.UIString("Dock side");const r=self.UI.shortcutRegistry.shortcutsForAction("main.toggle-dock");o.title=Common.UIString.UIString("Placement of DevTools relative to the page. (%s to restore last position)",r[0].title()),t.appendChild(o);const s=new UI.Toolbar.Toolbar("",t);Host.Platform.isMac()&&!self.UI.themeSupport.hasTheme()&&s.makeBlueOnHover();const i=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Undock into separate window"),"largeicon-undock"),a=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Dock to bottom"),"largeicon-dock-to-bottom"),c=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Dock to right"),"largeicon-dock-to-right"),l=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Dock to left"),"largeicon-dock-to-left");i.addEventListener(UI.Toolbar.ToolbarButton.Events.MouseDown,e=>e.data.consume()),a.addEventListener(UI.Toolbar.ToolbarButton.Events.MouseDown,e=>e.data.consume()),c.addEventListener(UI.Toolbar.ToolbarButton.Events.MouseDown,e=>e.data.consume()),l.addEventListener(UI.Toolbar.ToolbarButton.Events.MouseDown,e=>e.data.consume()),i.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,n.bind(null,UI.DockController.State.Undocked)),a.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,n.bind(null,UI.DockController.State.DockedToBottom)),c.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,n.bind(null,UI.DockController.State.DockedToRight)),l.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,n.bind(null,UI.DockController.State.DockedToLeft)),i.setToggled(self.UI.dockController.dockSide()===UI.DockController.State.Undocked),a.setToggled(self.UI.dockController.dockSide()===UI.DockController.State.DockedToBottom),c.setToggled(self.UI.dockController.dockSide()===UI.DockController.State.DockedToRight),l.setToggled(self.UI.dockController.dockSide()===UI.DockController.State.DockedToLeft),s.appendToolbarItem(i),s.appendToolbarItem(l),s.appendToolbarItem(a),s.appendToolbarItem(c),t.addEventListener("keydown",e=>{let t=0;if("ArrowLeft"===e.key)t=-1;else{if("ArrowRight"!==e.key)return;t=1}const n=[i,l,a,c];let o=n.findIndex(e=>e.element.hasFocus());o=Platform.NumberUtilities.clamp(o+t,0,n.length-1),n[o].element.focus(),e.consume(!0)}),e.headerSection().appendCustomItem(t)}const t=this._item.element;function n(n){const o=document.deepActiveElement().hasAttribute("data-keyboard-focus");self.UI.dockController.once(UI.DockController.Events.AfterDockSideChanged).then(()=>{t.focus(),o&&UI.UIUtils.markAsFocusedByKeyboard(t)}),self.UI.dockController.setDockSide(n),e.discard()}self.UI.dockController.dockSide()===UI.DockController.State.Undocked&&SDK.SDKModel.TargetManager.instance().mainTarget()&&SDK.SDKModel.TargetManager.instance().mainTarget().type()===SDK.SDKModel.Type.Frame&&e.defaultSection().appendAction("inspector_main.focus-debuggee",Common.UIString.UIString("Focus debuggee")),e.defaultSection().appendAction("main.toggle-drawer",self.UI.inspectorView.drawerVisible()?Common.UIString.UIString("Hide console drawer"):Common.UIString.UIString("Show console drawer")),e.appendItemsAtLocation("mainMenu");const o=e.defaultSection().appendSubMenuItem(Common.UIString.UIString("More tools")),r=self.runtime.extensions("view",void 0,!0);for(const e of r){const t=e.descriptor();"settings-default"!==t.id?"issues-pane"!==t.id?"closeable"===t.persistence&&("drawer-view"!==t.location&&"panel"!==t.location||o.defaultSection().appendItem(e.title(),UI.ViewManager.ViewManager.instance().showView.bind(UI.ViewManager.ViewManager.instance(),t.id,!0))):o.defaultSection().appendItem(e.title(),()=>{Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.HamburgerMenu),UI.ViewManager.ViewManager.instance().showView("issues-pane",!0)}):o.defaultSection().appendItem(e.title(),()=>{Host.userMetrics.actionTaken(Host.UserMetrics.Action.SettingsOpenedFromMenu),UI.ViewManager.ViewManager.instance().showView("preferences",!0)})}e.footerSection().appendSubMenuItem(Common.UIString.UIString("Help")).appendItemsAtLocation("mainMenuHelp")}}export class SettingsButtonProvider{constructor(){this._settingsButton=UI.Toolbar.Toolbar.createActionButtonForId("settings.show",{showLabel:!1,userActionCode:Host.UserMetrics.Action.SettingsOpenedFromGear})}item(){return this._settingsButton}}export class PauseListener{constructor(){SDK.SDKModel.TargetManager.instance().addModelListener(SDK.DebuggerModel.DebuggerModel,SDK.DebuggerModel.Events.DebuggerPaused,this._debuggerPaused,this)}_debuggerPaused(e){SDK.SDKModel.TargetManager.instance().removeModelListener(SDK.DebuggerModel.DebuggerModel,SDK.DebuggerModel.Events.DebuggerPaused,this._debuggerPaused,this);const t=e.data,n=t.debuggerPausedDetails();UI.Context.Context.instance().setFlavor(SDK.SDKModel.Target,t.target()),Common.Revealer.reveal(n)}}export function sendOverProtocol(e,t){return new Promise((n,o)=>{ProtocolClient.InspectorBackend.test.sendRawMessage(e,t,(e,...t)=>e?o(e):n(t))})}export class ReloadActionDelegate{handleAction(e,t){switch(t){case"main.debug-reload":return Components.Reload.reload(),!0}return!1}}new MainImpl;