import*as Common from"../common/common.js";import*as Diff from"../diff/diff.js";import*as UI from"../ui/ui.js";import*as Workspace from"../workspace/workspace.js";import*as WorkspaceDiff from"../workspace_diff/workspace_diff.js";import{ChangesSidebar,Events}from"./ChangesSidebar.js";import{ChangesTextEditor}from"./ChangesTextEditor.js";export class ChangesView extends UI.Widget.VBox{constructor(){super(!0),this.registerRequiredCSS("changes/changesView.css");const e=new UI.SplitWidget.SplitWidget(!0,!1),t=new UI.Widget.Widget;e.setMainWidget(t),e.show(this.contentElement),this._emptyWidget=new UI.EmptyWidget.EmptyWidget(""),this._emptyWidget.show(t.element),this._workspaceDiff=WorkspaceDiff.WorkspaceDiff.workspaceDiff(),this._changesSidebar=new ChangesSidebar(this._workspaceDiff),this._changesSidebar.addEventListener(Events.SelectedUISourceCodeChanged,this._selectedUISourceCodeChanged,this),e.setSidebarWidget(this._changesSidebar),this._selectedUISourceCode=null,this._diffRows=[],this._maxLineDigits=1,this._editor=new ChangesTextEditor({devtoolsAccessibleName:ls`Changes diff viewer`,lineNumbers:!0,lineWrapping:!1,maxHighlightLength:1/0}),this._editor.setReadOnly(!0);const i=t.element.createChild("div","editor-container");UI.ARIAUtils.markAsTabpanel(i),this._editor.show(i),this._editor.hideWidget(),self.onInvokeElement(this._editor.element,this._click.bind(this)),this._toolbar=new UI.Toolbar.Toolbar("changes-toolbar",t.element);const s=new UI.Toolbar.ToolbarButton(ls`Revert all changes to current file`,"largeicon-undo");s.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._revert.bind(this)),this._toolbar.appendToolbarItem(s),this._diffStats=new UI.Toolbar.ToolbarText(""),this._toolbar.appendToolbarItem(this._diffStats),this._toolbar.setEnabled(!1),this._hideDiff(ls`No changes`),this._selectedUISourceCodeChanged()}_selectedUISourceCodeChanged(){this._revealUISourceCode(this._changesSidebar.selectedUISourceCode())}_revert(){const e=this._selectedUISourceCode;e&&this._workspaceDiff.revertToOriginal(e)}_click(e){const t=this._editor.selection();if(!t.isEmpty())return;const i=this._diffRows[t.startLine];Common.Revealer.reveal(this._selectedUISourceCode.uiLocation(i.currentLineNumber-1,t.startColumn),!1),e.consume(!0)}_revealUISourceCode(e){this._selectedUISourceCode!==e&&(this._selectedUISourceCode&&this._workspaceDiff.unsubscribeFromDiffChange(this._selectedUISourceCode,this._refreshDiff,this),e&&this.isShowing()&&this._workspaceDiff.subscribeToDiffChange(e,this._refreshDiff,this),this._selectedUISourceCode=e,this._refreshDiff())}wasShown(){this._refreshDiff()}_refreshDiff(){if(!this.isShowing())return;if(!this._selectedUISourceCode)return void this._renderDiffRows(null);const e=this._selectedUISourceCode;e.contentType().isTextType()?this._workspaceDiff.requestDiff(e).then(t=>{this._selectedUISourceCode===e&&this._renderDiffRows(t)}):this._hideDiff(ls`Binary data`)}_hideDiff(e){this._diffStats.setText(""),this._toolbar.setEnabled(!1),this._editor.hideWidget(),this._emptyWidget.text=e,this._emptyWidget.showWidget()}_renderDiffRows(e){if(this._diffRows=[],!e||1===e.length&&e[0][0]===Diff.Diff.Operation.Equal)return void this._hideDiff(ls`No changes`);let t=0,i=0,s=0,o=0;const n=[],r=[];for(let s=0;s<e.length;++s){const o=e[s];switch(o[0]){case Diff.Diff.Operation.Equal:this._diffRows.push(...h(o[1],0===s,s===e.length-1)),n.push(...o[1]),r.push(...o[1]);break;case Diff.Diff.Operation.Insert:for(const e of o[1])this._diffRows.push(l(e,RowType.Addition));t+=o[1].length,r.push(...o[1]);break;case Diff.Diff.Operation.Delete:if(i+=o[1].length,n.push(...o[1]),e[s+1]&&e[s+1][0]===Diff.Diff.Operation.Insert)s++,this._diffRows.push(...d(o[1].join("\n"),e[s][1].join("\n"))),t+=e[s][1].length,r.push(...e[s][1]);else for(const e of o[1])this._diffRows.push(l(e,RowType.Deletion))}}this._maxLineDigits=Math.ceil(Math.log10(Math.max(s,o)));let a="";a=1===t?ls`${t} insertion (+),`:ls`${t} insertions (+),`;let f="";function h(e,t,i){const n=[];if(!t){for(let t=0;t<3&&t<e.length;t++)n.push(l(e[t],RowType.Equal));e.length>7&&!i&&n.push(l(Common.UIString.UIString("( … Skipping %d matching lines … )",e.length-6),RowType.Spacer))}if(!i){const i=Math.max(e.length-3-1,t?0:3);let r=e.length-3-1;t||(r-=3),r>0&&(o+=r,s+=r);for(let t=i;t<e.length;t++)n.push(l(e[t],RowType.Equal))}return n}function d(e,t){const i=Diff.Diff.DiffWrapper.charDiff(e,t,!0),s=[l("",RowType.Deletion)],o=[l("",RowType.Addition)];for(const e of i){const t=e[1],i=e[0],n=i===Diff.Diff.Operation.Equal?"":"inner-diff",r=t.split("\n");for(let e=0;e<r.length;e++)e>0&&i!==Diff.Diff.Operation.Insert&&s.push(l("",RowType.Deletion)),e>0&&i!==Diff.Diff.Operation.Delete&&o.push(l("",RowType.Addition)),r[e]&&(i!==Diff.Diff.Operation.Insert&&s[s.length-1].tokens.push({text:r[e],className:n}),i!==Diff.Diff.Operation.Delete&&o[o.length-1].tokens.push({text:r[e],className:n}))}return s.concat(o)}function l(e,t){return t===RowType.Addition&&s++,t===RowType.Deletion&&o++,t===RowType.Equal&&(o++,s++),{baselineLineNumber:o,currentLineNumber:s,tokens:e?[{text:e,className:"inner-diff"}]:[],type:t}}f=1===i?ls`${i} deletion (-)`:ls`${i} deletions (-)`,this._diffStats.setText(`${a} ${f}`),this._toolbar.setEnabled(!0),this._emptyWidget.hideWidget(),this._editor.operation(()=>{this._editor.showWidget(),this._editor.setHighlightMode({name:"devtools-diff",diffRows:this._diffRows,mimeType:this._selectedUISourceCode.mimeType(),baselineLines:n,currentLines:r}),this._editor.setText(this._diffRows.map(e=>e.tokens.map(e=>e.text).join("")).join("\n")),this._editor.setLineNumberFormatter(this._lineFormatter.bind(this)),this._editor.updateDiffGutter(this._diffRows)})}_lineFormatter(e){const t=this._diffRows[e-1];let i=t.type===RowType.Deletion,s=t.type===RowType.Addition;t.type===RowType.Equal&&(i=!0,s=!0);const o=i?numberToStringWithSpacesPadding(t.baselineLineNumber,this._maxLineDigits):spacesPadding(this._maxLineDigits),n=s?numberToStringWithSpacesPadding(t.currentLineNumber,this._maxLineDigits):spacesPadding(this._maxLineDigits);return o+spacesPadding(1)+n}}export const RowType={Deletion:"deletion",Addition:"addition",Equal:"equal",Spacer:"spacer"};export class DiffUILocationRevealer{async reveal(e,t){if(!(e instanceof WorkspaceDiff.WorkspaceDiff.DiffUILocation))throw new Error("Internal error: not a diff ui location");const i=self.runtime.sharedInstance(ChangesView);await UI.ViewManager.ViewManager.instance().showView("changes.changes"),i._changesSidebar.selectUISourceCode(e.uiSourceCode,t)}}export let Row;