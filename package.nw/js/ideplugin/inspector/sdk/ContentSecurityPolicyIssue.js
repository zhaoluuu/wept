import{ls}from"../platform/platform.js";import{Issue,IssueCategory,IssueDescription,IssueKind}from"./Issue.js";import{IssuesModel}from"./IssuesModel.js";export class ContentSecurityPolicyIssue extends Issue{constructor(e,t){super([Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,e.contentSecurityPolicyViolationType].join("::")),this._issueDetails=e,this._issuesModel=t}getCategory(){return IssueCategory.ContentSecurityPolicy}primaryKey(){return JSON.stringify(this._issueDetails,["blockedURL","contentSecurityPolicyViolationType","violatedDirective","sourceCodeLocation","url","lineNumber","columnNumber","violatingNodeId"])}getDescription(){const e=issueDescriptions.get(this._issueDetails.contentSecurityPolicyViolationType);return e||null}model(){return this._issuesModel}details(){return this._issueDetails}}function paragraphedMessage(e,t){const o=(e,t)=>{let o=0;const i=t.matchAll(/\|(.*?)\|/g);for(const s of i)if(void 0!==s.index){const i=document.createElement("span");i.textContent=t.substring(o,s.index),e.appendChild(i);const n=document.createElement("code");n.textContent=s[1],o=s.index+s[0].length,e.appendChild(n)}if(o<t.length){const i=document.createElement("span");i.textContent=t.substring(o,t.length),e.appendChild(i)}},i=document.createElement("div");i.classList.add("message");for(const t of e){const e=document.createElement("p");o(e,t),i.appendChild(e)}if(t.length>0){const e=document.createElement("ul");e.classList.add("resolutions-list"),i.append(e);for(const i of t){const t=document.createElement("li");o(t,i),e.append(t)}}return i}const cspURLViolation={title:ls`Content Security Policy of your site blocks some resources because their origin is not included in the content security policy header`,message:()=>paragraphedMessage([ls`The Content Security Policy (CSP) improves the security of your site by defining a list of trusted sources and
     instructs the browser to only execute or render resources from this list. Some resources on your site can't be accessed
     because their origin is not listed in the CSP.`,ls`To solve this, carefully check that all of the blocked resources listed below are trustworthy; if they are,
     include their sources in the content security policy of your site. You can set a policy as a HTTP header (recommended),
     or via an HTML |<meta>| tag.`,ls`⚠️ Never add a source you don't trust to your site's Content Security Policy. If you don't trust the source, consider
     hosting resources on your own site instead.`],[]),issueKind:IssueKind.BreakingChange,links:[{link:"https://developers.google.com/web/fundamentals/security/csp#source_whitelists",linkTitle:ls`Content Security Policy - Source Allowlists`}]},cspInlineViolation={title:ls`Content Security Policy blocks inline execution of scripts and stylesheets`,message:()=>paragraphedMessage([ls`The Content Security Policy (CSP) prevents cross-site scripting attacks by blocking inline execution of scripts
     and style sheets.`,ls`To solve this, move all inline scripts (e.g. |onclick=[JS code]|) and styles into external files.`,ls`⚠️ Allowing inline execution comes at the risk of script injection via injection of HTML script elements.
     If you absolutely must, you can allow inline script and styles by:`],[ls`adding |unsafe-inline| as a source to the CSP header`,ls`adding the hash or nonce of the inline script to your CSP header.`]),issueKind:IssueKind.BreakingChange,links:[{link:"https://developers.google.com/web/fundamentals/security/csp#inline_code_is_considered_harmful",linkTitle:ls`Learn more: Content Security Policy - Inline Code`}]},cspEvalViolation={title:ls`Content Security Policy of your site blocks the use of 'eval' in JavaScript`,message:()=>paragraphedMessage([ls`The Content Security Policy (CSP) prevents the evaluation of arbitrary strings as JavaScript to make it
         more difficult for an attacker to inject unathorized code on your site.`,ls`To solve this issue, avoid using |eval()|, |new Function()|, |setTimeout([string], ...)| and
         |setInterval([string], ...)| for evaluating strings.`,ls`If you absolutely must: you can enable string evaluation by adding |unsafe-eval| as an allowed source
         in a |script-src| directive.`,ls`⚠️ Allowing string evaluation comes at the risk of inline script injection.`],[]),issueKind:IssueKind.BreakingChange,links:[{link:"https://developers.google.com/web/fundamentals/security/csp#eval_too",linkTitle:ls`Learn more: Content Security Policy - Eval`}]};export const urlViolationCode=[Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,Protocol.Audits.ContentSecurityPolicyViolationType.KURLViolation].join("::");export const inlineViolationCode=[Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,Protocol.Audits.ContentSecurityPolicyViolationType.KInlineViolation].join("::");export const evalViolationCode=[Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,Protocol.Audits.ContentSecurityPolicyViolationType.KEvalViolation].join("::");const issueDescriptions=new Map([[Protocol.Audits.ContentSecurityPolicyViolationType.KURLViolation,cspURLViolation],[Protocol.Audits.ContentSecurityPolicyViolationType.KInlineViolation,cspInlineViolation],[Protocol.Audits.ContentSecurityPolicyViolationType.KEvalViolation,cspEvalViolation]]);