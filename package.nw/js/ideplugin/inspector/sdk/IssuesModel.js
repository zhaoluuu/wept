import{ContentSecurityPolicyIssue}from"./ContentSecurityPolicyIssue.js";import{CrossOriginEmbedderPolicyIssue,isCrossOriginEmbedderPolicyIssue}from"./CrossOriginEmbedderPolicyIssue.js";import{HeavyAdIssue}from"./HeavyAdIssue.js";import{Issue}from"./Issue.js";import{MixedContentIssue}from"./MixedContentIssue.js";import{SameSiteCookieIssue}from"./SameSiteCookieIssue.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class IssuesModel extends SDKModel{constructor(e){super(e),this._enabled=!1,this._auditsAgent=null,this.ensureEnabled(),this._disposed=!1}usesObjectNotation(){return!0}ensureEnabled(){this._enabled||(this._enabled=!0,this.target().registerAuditsDispatcher(this),this._auditsAgent=this.target().auditsAgent(),this._auditsAgent.invoke_enable())}issueAdded(e){const s=this._createIssuesFromProtocolIssue(e.issue);for(const e of s)this.addIssue(e)}addIssue(e){this.dispatchEventToListeners(Events.IssueAdded,{issuesModel:this,issue:e})}_createIssuesFromProtocolIssue(e){const s=issueCodeHandlers.get(e.code);return s?s(this,e.details):(console.warn("No handler registered for issue code "+e.code),[])}dispose(){super.dispose(),this._disposed=!0}getTargetIfNotDisposed(){return this._disposed?null:this.target()}}function createIssuesForSameSiteCookieIssue(e,s){const t=s.sameSiteCookieIssueDetails;return t?SameSiteCookieIssue.createIssuesFromSameSiteDetails(t):(console.warn("SameSite issue without details received."),[])}function createIssuesForMixedContentIssue(e,s){const t=s.mixedContentIssueDetails;return t?[new MixedContentIssue(t)]:(console.warn("Mixed content issue without details received."),[])}function createIssuesForContentSecurityPolicyIssue(e,s){const t=s.contentSecurityPolicyIssueDetails;return t?[new ContentSecurityPolicyIssue(t,e)]:(console.warn("Content security policy issue without details received."),[])}function createIssuesForHeavyAdIssue(e,s){const t=s.heavyAdIssueDetails;return t?[new HeavyAdIssue(t)]:(console.warn("Heavy Ad issue without details received."),[])}function createIssuesForBlockedByResponseIssue(e,s){const t=s.blockedByResponseIssueDetails;return t?isCrossOriginEmbedderPolicyIssue(t.reason)?[new CrossOriginEmbedderPolicyIssue(t)]:[]:(console.warn("BlockedByResponse issue without details received."),[])}const issueCodeHandlers=new Map([[Protocol.Audits.InspectorIssueCode.SameSiteCookieIssue,createIssuesForSameSiteCookieIssue],[Protocol.Audits.InspectorIssueCode.MixedContentIssue,createIssuesForMixedContentIssue],[Protocol.Audits.InspectorIssueCode.HeavyAdIssue,createIssuesForHeavyAdIssue],[Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,createIssuesForContentSecurityPolicyIssue],[Protocol.Audits.InspectorIssueCode.BlockedByResponseIssue,createIssuesForBlockedByResponseIssue]]);export const Events={IssueAdded:Symbol("IssueAdded")};SDKModel.register(IssuesModel,Capability.Audits,!0);