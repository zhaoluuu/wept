import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as Root from"../root/root.js";import{FrameAssociated}from"./FrameAssociated.js";import{Script}from"./Script.js";import{Events as TargetManagerEvents,Target,TargetManager}from"./SDKModel.js";import{SourceMap,TextSourceMap,WasmSourceMap}from"./SourceMap.js";export class SourceMapManager extends Common.ObjectWrapper.ObjectWrapper{constructor(e){super(),this._target=e,this._isEnabled=!0,this._relativeSourceURL=new Map,this._relativeSourceMapURL=new Map,this._resolvedSourceMapId=new Map,this._sourceMapById=new Map,this._sourceMapIdToLoadingClients=new Platform.Multimap,this._sourceMapIdToClients=new Platform.Multimap,TargetManager.instance().addEventListener(TargetManagerEvents.InspectedURLChanged,this._inspectedURLChanged,this)}setEnabled(e){if(e===this._isEnabled)return;this._isEnabled=e;const t=[...this._resolvedSourceMapId.keys()];for(const e of t){const t=this._relativeSourceURL.get(e),s=this._relativeSourceMapURL.get(e);this.detachSourceMap(e),this.attachSourceMap(e,t,s)}}_inspectedURLChanged(e){if(e.data!==this._target)return;const t=new Map(this._resolvedSourceMapId);for(const[e,s]of t){const t=this._relativeSourceURL.get(e),o=this._relativeSourceMapURL.get(e);if(void 0===t||void 0===o)continue;const a=this._resolveRelativeURLs(t,o);null!==a&&s!==a.sourceMapId&&(this.detachSourceMap(e),this.attachSourceMap(e,t,o))}}sourceMapForClient(e){const t=this._resolvedSourceMapId.get(e);return t&&this._sourceMapById.get(t)||null}clientsForSourceMap(e){const t=this._getSourceMapId(e.compiledURL(),e.url());return this._sourceMapIdToClients.has(t)?[...this._sourceMapIdToClients.get(t)]:[...this._sourceMapIdToLoadingClients.get(t)]}_getSourceMapId(e,t){return`${e}:${t}`}_resolveRelativeURLs(e,t){const s=Common.ParsedURL.ParsedURL.completeURL(this._target.inspectedURL(),e);if(!s)return null;const o=Common.ParsedURL.ParsedURL.completeURL(s,t);return o?{sourceURL:s,sourceMapURL:o,sourceMapId:this._getSourceMapId(s,o)}:null}attachSourceMap(e,t,s){if(void 0===t||!s)return;console.assert(!this._resolvedSourceMapId.has(e),"SourceMap is already attached to client");const o=this._resolveRelativeURLs(t,s);if(!o)return;this._relativeSourceURL.set(e,t),this._relativeSourceMapURL.set(e,s);const{sourceURL:a,sourceMapURL:r,sourceMapId:i}=o;if(this._resolvedSourceMapId.set(e,i),this._isEnabled)if(this.dispatchEventToListeners(Events.SourceMapWillAttach,e),this._sourceMapById.has(i))c.call(this,i,e);else{if(!this._sourceMapIdToLoadingClients.has(i)){let t;t=r===WasmSourceMap.FAKE_URL&&e instanceof Script?Root.Runtime.experiments.isEnabled("wasmDWARFDebugging")?Promise.resolve(null):WasmSourceMap.load(e,a):TextSourceMap.load(r,a,e.createPageResourceLoadInitiator()),t.catch(e=>(Common.Console.Console.instance().warn(ls`DevTools failed to load SourceMap: ${e.message}`),null)).then(function(e,t){this._sourceMapLoadedForTest();const s=this._sourceMapIdToLoadingClients.get(e);if(this._sourceMapIdToLoadingClients.deleteAll(e),!s.size)return;if(!t){for(const e of s)this.dispatchEventToListeners(Events.SourceMapFailedToAttach,e);return}this._sourceMapById.set(e,t);for(const t of s)c.call(this,e,t)}.bind(this,i))}this._sourceMapIdToLoadingClients.set(i,e)}function c(e,t){this._sourceMapIdToClients.set(e,t);const s=this._sourceMapById.get(e);this.dispatchEventToListeners(Events.SourceMapAttached,{client:t,sourceMap:s})}}detachSourceMap(e){const t=this._resolvedSourceMapId.get(e);if(this._relativeSourceURL.delete(e),this._relativeSourceMapURL.delete(e),this._resolvedSourceMapId.delete(e),!t)return;if(!this._sourceMapIdToClients.hasValue(t,e))return void(this._sourceMapIdToLoadingClients.delete(t,e)&&this.dispatchEventToListeners(Events.SourceMapFailedToAttach,e));this._sourceMapIdToClients.delete(t,e);const s=this._sourceMapById.get(t);s&&(this.dispatchEventToListeners(Events.SourceMapDetached,{client:e,sourceMap:s}),this._sourceMapIdToClients.has(t)||(s.dispose(),this._sourceMapById.delete(t)))}_sourceMapLoadedForTest(){}dispose(){for(const e of this._sourceMapById.values())e.dispose();TargetManager.instance().removeEventListener(TargetManagerEvents.InspectedURLChanged,this._inspectedURLChanged,this)}}export const Events={SourceMapWillAttach:Symbol("SourceMapWillAttach"),SourceMapFailedToAttach:Symbol("SourceMapFailedToAttach"),SourceMapAttached:Symbol("SourceMapAttached"),SourceMapDetached:Symbol("SourceMapDetached"),SourceMapChanged:Symbol("SourceMapChanged")};