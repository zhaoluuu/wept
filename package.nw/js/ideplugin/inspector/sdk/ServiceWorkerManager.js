import*as Common from"../common/common.js";import{ls}from"../platform/platform.js";import{Events as RuntimeModelEvents,ExecutionContext,RuntimeModel}from"./RuntimeModel.js";import{Capability,SDKModel,Target,TargetManager,Type}from"./SDKModel.js";export class ServiceWorkerManager extends SDKModel{constructor(e){super(e),e.registerServiceWorkerDispatcher(new ServiceWorkerDispatcher(this)),this._lastAnonymousTargetId=0,this._agent=e.serviceWorkerAgent(),this._registrations=new Map,this._enabled=!1,this.enable(),this._forceUpdateSetting=Common.Settings.Settings.instance().createSetting("serviceWorkerUpdateOnReload",!1),this._forceUpdateSetting.get()&&this._forceUpdateSettingChanged(),this._forceUpdateSetting.addChangeListener(this._forceUpdateSettingChanged,this),new ServiceWorkerContextNamer(e,this)}async enable(){this._enabled||(this._enabled=!0,await this._agent.invoke_enable())}async disable(){this._enabled&&(this._enabled=!1,this._registrations.clear(),await this._agent.invoke_enable())}registrations(){return this._registrations}hasRegistrationForURLs(e){for(const t of this._registrations.values())if(e.filter(e=>e&&e.startsWith(t.scopeURL)).length===e.length)return!0;return!1}findVersion(e){for(const t of this.registrations().values()){const r=t.versions.get(e);if(r)return r}return null}deleteRegistration(e){const t=this._registrations.get(e);if(t){if(t._isRedundant())return this._registrations.delete(e),void this.dispatchEventToListeners(Events.RegistrationDeleted,t);t._deleting=!0;for(const e of t.versions.values())this.stopWorker(e.id);this._unregister(t.scopeURL)}}async updateRegistration(e){const t=this._registrations.get(e);t&&await this._agent.invoke_updateRegistration({scopeURL:t.scopeURL})}async deliverPushMessage(e,t){const r=this._registrations.get(e);if(!r)return;const i=Common.ParsedURL.ParsedURL.extractOrigin(r.scopeURL);await this._agent.invoke_deliverPushMessage({origin:i,registrationId:e,data:t})}async dispatchSyncEvent(e,t,r){const i=this._registrations.get(e);if(!i)return;const s=Common.ParsedURL.ParsedURL.extractOrigin(i.scopeURL);await this._agent.invoke_dispatchSyncEvent({origin:s,registrationId:e,tag:t,lastChance:r})}async dispatchPeriodicSyncEvent(e,t){const r=this._registrations.get(e);if(!r)return;const i=Common.ParsedURL.ParsedURL.extractOrigin(r.scopeURL);await this._agent.invoke_dispatchPeriodicSyncEvent({origin:i,registrationId:e,tag:t})}async _unregister(e){await this._agent.invoke_unregister({scopeURL:e})}async startWorker(e){await this._agent.invoke_startWorker({scopeURL:e})}async skipWaiting(e){await this._agent.invoke_skipWaiting({scopeURL:e})}async stopWorker(e){await this._agent.invoke_stopWorker({versionId:e})}async inspectWorker(e){await this._agent.invoke_inspectWorker({versionId:e})}_workerRegistrationUpdated(e){for(const t of e){let e=this._registrations.get(t.registrationId);e?(e._update(t),e._shouldBeRemoved()?(this._registrations.delete(e.id),this.dispatchEventToListeners(Events.RegistrationDeleted,e)):this.dispatchEventToListeners(Events.RegistrationUpdated,e)):(e=new ServiceWorkerRegistration(t),this._registrations.set(t.registrationId,e),this.dispatchEventToListeners(Events.RegistrationUpdated,e))}}_workerVersionUpdated(e){const t=new Set;for(const r of e){const e=this._registrations.get(r.registrationId);e&&(e._updateVersion(r),t.add(e))}for(const e of t)e._shouldBeRemoved()?(this._registrations.delete(e.id),this.dispatchEventToListeners(Events.RegistrationDeleted,e)):this.dispatchEventToListeners(Events.RegistrationUpdated,e)}_workerErrorReported(e){const t=this._registrations.get(e.registrationId);t&&(t.errors.push(e),this.dispatchEventToListeners(Events.RegistrationErrorAdded,{registration:t,error:e}))}forceUpdateOnReloadSetting(){return this._forceUpdateSetting}_forceUpdateSettingChanged(){const e=this._forceUpdateSetting.get();this._agent.invoke_setForceUpdateOnPageLoad({forceUpdateOnPageLoad:e})}}export const Events={RegistrationUpdated:Symbol("RegistrationUpdated"),RegistrationErrorAdded:Symbol("RegistrationErrorAdded"),RegistrationDeleted:Symbol("RegistrationDeleted")};class ServiceWorkerDispatcher{constructor(e){this._manager=e}usesObjectNotation(){return!0}workerRegistrationUpdated({registrations:e}){this._manager._workerRegistrationUpdated(e)}workerVersionUpdated({versions:e}){this._manager._workerVersionUpdated(e)}workerErrorReported({errorMessage:e}){this._manager._workerErrorReported(e)}}export class ServiceWorkerVersion{constructor(e,t){this.id,this.scriptURL,this.parsedURL,this.securityOrigin,this.runningStatus,this.status,this.scriptLastModified,this.scriptResponseTime,this.controlledClients,this.targetId,this.registration=e,this._update(t)}_update(e){this.id=e.versionId,this.scriptURL=e.scriptURL;const t=new Common.ParsedURL.ParsedURL(e.scriptURL);this.securityOrigin=t.securityOrigin(),this.runningStatus=e.runningStatus,this.status=e.status,this.scriptLastModified=e.scriptLastModified,this.scriptResponseTime=e.scriptResponseTime,e.controlledClients?this.controlledClients=e.controlledClients.slice():this.controlledClients=[],this.targetId=e.targetId||null}isStartable(){return!this.registration.isDeleted&&this.isActivated()&&this.isStopped()}isStoppedAndRedundant(){return this.runningStatus===Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped&&this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant}isStopped(){return this.runningStatus===Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped}isStarting(){return this.runningStatus===Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting}isRunning(){return this.runningStatus===Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running}isStopping(){return this.runningStatus===Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping}isNew(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.New}isInstalling(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing}isInstalled(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed}isActivating(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating}isActivated(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated}isRedundant(){return this.status===Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant}mode(){return this.isNew()||this.isInstalling()?ServiceWorkerVersion.Modes.Installing:this.isInstalled()?ServiceWorkerVersion.Modes.Waiting:this.isActivating()||this.isActivated()?ServiceWorkerVersion.Modes.Active:ServiceWorkerVersion.Modes.Redundant}}ServiceWorkerVersion.RunningStatus={[Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running]:ls`running`,[Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting]:ls`starting`,[Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped]:ls`stopped`,[Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping]:ls`stopping`},ServiceWorkerVersion.Status={[Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated]:ls`activated`,[Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating]:ls`activating`,[Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed]:ls`installed`,[Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing]:ls`installing`,[Protocol.ServiceWorker.ServiceWorkerVersionStatus.New]:ls`new`,[Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant]:ls`redundant`},ServiceWorkerVersion.Modes={Installing:"installing",Waiting:"waiting",Active:"active",Redundant:"redundant"};export class ServiceWorkerRegistration{constructor(e){this._fingerprint,this.id,this.scopeURL,this.securityOrigin,this.isDeleted,this._update(e),this.versions=new Map,this._deleting=!1,this.errors=[]}_update(e){this._fingerprint=Symbol("fingerprint"),this.id=e.registrationId,this.scopeURL=e.scopeURL;const t=new Common.ParsedURL.ParsedURL(e.scopeURL);this.securityOrigin=t.securityOrigin(),this.isDeleted=e.isDeleted}fingerprint(){return this._fingerprint}versionsByMode(){const e=new Map;for(const t of this.versions.values())e.set(t.mode(),t);return e}_updateVersion(e){this._fingerprint=Symbol("fingerprint");let t=this.versions.get(e.versionId);return t?(t._update(e),t):(t=new ServiceWorkerVersion(this,e),this.versions.set(e.versionId,t),t)}_isRedundant(){for(const e of this.versions.values())if(!e.isStoppedAndRedundant())return!1;return!0}_shouldBeRemoved(){return this._isRedundant()&&(!this.errors.length||this._deleting)}canBeRemoved(){return this.isDeleted||this._deleting}clearErrors(){this._fingerprint=Symbol("fingerprint"),this.errors=[]}}class ServiceWorkerContextNamer{constructor(e,t){this._target=e,this._serviceWorkerManager=t,this._versionByTargetId=new Map,t.addEventListener(Events.RegistrationUpdated,this._registrationsUpdated,this),t.addEventListener(Events.RegistrationDeleted,this._registrationsUpdated,this),TargetManager.instance().addModelListener(RuntimeModel,RuntimeModelEvents.ExecutionContextCreated,this._executionContextCreated,this)}_registrationsUpdated(e){this._versionByTargetId.clear();const t=this._serviceWorkerManager.registrations().values();for(const e of t)for(const t of e.versions.values())t.targetId&&this._versionByTargetId.set(t.targetId,t);this._updateAllContextLabels()}_executionContextCreated(e){const t=e.data,r=this._serviceWorkerTargetId(t.target());r&&this._updateContextLabel(t,this._versionByTargetId.get(r)||null)}_serviceWorkerTargetId(e){return e.parentTarget()!==this._target||e.type()!==Type.ServiceWorker?null:e.id()}_updateAllContextLabels(){for(const e of TargetManager.instance().targets()){const t=this._serviceWorkerTargetId(e);if(!t)continue;const r=this._versionByTargetId.get(t)||null,i=e.model(RuntimeModel),s=i?i.executionContexts():[];for(const e of s)this._updateContextLabel(e,r)}}_updateContextLabel(e,t){if(!t)return void e.setLabel("");const r=Common.ParsedURL.ParsedURL.fromString(e.origin),i=r?r.lastPathComponentWithFragment():e.name,s=ServiceWorkerVersion.Status[t.status];e.setLabel(ls`${i} #${t.id} (${s})`)}}SDKModel.register(ServiceWorkerManager,Capability.ServiceWorker,!0);