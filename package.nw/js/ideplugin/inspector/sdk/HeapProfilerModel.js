import{DebuggerModel}from"./DebuggerModel.js";import{RemoteObject}from"./RemoteObject.js";import{RuntimeModel}from"./RuntimeModel.js";import{Capability,SDKModel,Target}from"./SDKModel.js";export class HeapProfilerModel extends SDKModel{constructor(e){super(e),e.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this)),this._enabled=!1,this._heapProfilerAgent=e.heapProfilerAgent(),this._memoryAgent=e.memoryAgent(),this._runtimeModel=e.model(RuntimeModel),this._samplingProfilerDepth=0}debuggerModel(){return this._runtimeModel.debuggerModel()}runtimeModel(){return this._runtimeModel}async enable(){this._enabled||(this._enabled=!0,await this._heapProfilerAgent.invoke_enable())}async startSampling(e){if(this._samplingProfilerDepth++)return!1;return!!(await this._heapProfilerAgent.invoke_startSampling({samplingInterval:e||16384})).getError()}async stopSampling(){if(!this._samplingProfilerDepth)throw new Error("Sampling profiler is not running.");if(--this._samplingProfilerDepth)return this.getSamplingProfile();const e=await this._heapProfilerAgent.invoke_stopSampling();return e.getError()?null:e.profile}async getSamplingProfile(){const e=await this._heapProfilerAgent.invoke_getSamplingProfile();return e.getError()?null:e.profile}async startNativeSampling(){return!!(await this._memoryAgent.invoke_startSampling({samplingInterval:65536})).getError()}async stopNativeSampling(){const e=await this._memoryAgent.invoke_getSamplingProfile();return await this._memoryAgent.invoke_stopSampling(),e.getError()?null:this._convertNativeProfile(e.profile)}async takeNativeSnapshot(){const e=await this._memoryAgent.invoke_getAllTimeSamplingProfile();return e.getError()?null:this._convertNativeProfile(e.profile)}async takeNativeBrowserSnapshot(){const e=await this._memoryAgent.invoke_getBrowserSamplingProfile();return e.getError()?null:this._convertNativeProfile(e.profile)}_convertNativeProfile(e){const t={childMap:new Map,selfSize:0,callFrame:{functionName:"(root)",url:"",scriptId:"",lineNumber:-1,columnNumber:-1}};for(const r of e.samples){r.stack.reverse().reduce((e,t)=>{let r=e.childMap.get(t);if(r)return r;const a=/^([^:]*)::/.exec(t),o={functionName:t,url:a&&a[1]||"",scriptId:void 0,lineNumber:void 0,columnNumber:void 0};return r={childMap:new Map,callFrame:o,selfSize:0},e.childMap.set(t,r),r},t).selfSize+=r.total}return new NativeHeapProfile(function e(t){const r=Array.from(t.childMap.values()).map(e);return{selfSize:t.selfSize,callFrame:t.callFrame,children:r,id:-1}}(t),e.modules)}async collectGarbage(){return!!(await this._heapProfilerAgent.invoke_collectGarbage()).getError()}async snapshotObjectIdForObjectId(e){const t=await this._heapProfilerAgent.invoke_getHeapObjectId({objectId:e});return t.getError()?null:t.heapSnapshotObjectId}async objectForSnapshotObjectId(e,t){const r=await this._heapProfilerAgent.invoke_getObjectByHeapObjectId({objectId:e,objectGroup:t});return r.getError()?null:this._runtimeModel.createRemoteObject(r.result)}async addInspectedHeapObject(e){return!!(await this._heapProfilerAgent.invoke_addInspectedHeapObject({heapObjectId:e})).getError()}async takeHeapSnapshot(e,t){await this._heapProfilerAgent.invoke_takeHeapSnapshot({reportProgress:e,treatGlobalObjectsAsRoots:t})}async startTrackingHeapObjects(e){return!!(await this._heapProfilerAgent.invoke_startTrackingHeapObjects({trackAllocations:e})).getError()}async stopTrackingHeapObjects(e){return!!(await this._heapProfilerAgent.invoke_stopTrackingHeapObjects({reportProgress:e})).getError()}heapStatsUpdate(e){this.dispatchEventToListeners(Events.HeapStatsUpdate,e)}lastSeenObjectId(e,t){this.dispatchEventToListeners(Events.LastSeenObjectId,{lastSeenObjectId:e,timestamp:t})}addHeapSnapshotChunk(e){this.dispatchEventToListeners(Events.AddHeapSnapshotChunk,e)}reportHeapSnapshotProgress(e,t,r){this.dispatchEventToListeners(Events.ReportHeapSnapshotProgress,{done:e,total:t,finished:r})}resetProfiles(){this.dispatchEventToListeners(Events.ResetProfiles,this)}}export const Events={HeapStatsUpdate:Symbol("HeapStatsUpdate"),LastSeenObjectId:Symbol("LastSeenObjectId"),AddHeapSnapshotChunk:Symbol("AddHeapSnapshotChunk"),ReportHeapSnapshotProgress:Symbol("ReportHeapSnapshotProgress"),ResetProfiles:Symbol("ResetProfiles")};export let NativeProfilerCallFrame;export let CommonHeapProfileNode;export let CommonHeapProfile;class NativeHeapProfile{constructor(e,t){this.head=e,this.modules=t}}class HeapProfilerDispatcher{constructor(e){this._heapProfilerModel=e}usesObjectNotation(){return!0}heapStatsUpdate({statsUpdate:e}){this._heapProfilerModel.heapStatsUpdate(e)}lastSeenObjectId({lastSeenObjectId:e,timestamp:t}){this._heapProfilerModel.lastSeenObjectId(e,t)}addHeapSnapshotChunk({chunk:e}){this._heapProfilerModel.addHeapSnapshotChunk(e)}reportHeapSnapshotProgress({done:e,total:t,finished:r}){this._heapProfilerModel.reportHeapSnapshotProgress(e,t,r)}resetProfiles(){this._heapProfilerModel.resetProfiles()}}let NodeForConstruction;SDKModel.register(HeapProfilerModel,Capability.JS,!1);