const globalValues=new Set(["inherit","initial","unset"]),tagRegexp=/[\x20-\x7E]{4}/,numRegexp=/[+-]?(?:\d*\.)?\d+(?:[eE]\d+)?/,fontVariationSettingsRegexp=new RegExp(`(?:'(${tagRegexp.source})')|(?:"(${tagRegexp.source})")\\s+(${numRegexp.source})`);export function parseFontVariationSettings(t){if(globalValues.has(t.trim())||"normal"===t.trim())return[];const e=[];for(const n of splitByComma(stripComments(t))){const t=n.match(fontVariationSettingsRegexp);t&&e.push({tag:t[1]||t[2],value:parseFloat(t[3])})}return e}const fontFamilyRegexp=/^"(.+)"|'(.+)'$/;export function parseFontFamily(t){if(globalValues.has(t.trim()))return[];const e=[];for(const n of splitByComma(stripComments(t))){const t=n.match(fontFamilyRegexp);t?e.push(t[1]||t[2]):e.push(n)}return e}export function splitByComma(t){return t.split(",").map(t=>t.trim())}export function stripComments(t){return t.replaceAll(/(\/\*(?:.|\s)*?\*\/)/g,"")}