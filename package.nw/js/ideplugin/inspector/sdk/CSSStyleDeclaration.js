import*as TextUtils from"../text_utils/text_utils.js";import{cssMetadata}from"./CSSMetadata.js";import{CSSModel,Edit}from"./CSSModel.js";import{CSSProperty}from"./CSSProperty.js";import{CSSRule}from"./CSSRule.js";import{Target}from"./SDKModel.js";export class CSSStyleDeclaration{constructor(t,e,s,r){this._cssModel=t,this.parentRule=e,this._allProperties,this.styleSheetId,this.range,this.cssText,this._shorthandValues,this._shorthandIsImportant,this._activePropertyMap,this._leadingProperties,this._reinitialize(s),this.type=r}rebase(t){if(this.styleSheetId===t.styleSheetId&&this.range)if(t.oldRange.equal(this.range))this._reinitialize(t.payload);else{this.range=this.range.rebaseAfterTextEdit(t.oldRange,t.newRange);for(let e=0;e<this._allProperties.length;++e)this._allProperties[e].rebase(t)}}_reinitialize(t){this.styleSheetId=t.styleSheetId,this.range=t.range?TextUtils.TextRange.TextRange.fromObject(t.range):null;const e=t.shorthandEntries;this._shorthandValues=new Map,this._shorthandIsImportant=new Set;for(let t=0;t<e.length;++t)this._shorthandValues.set(e[t].name,e[t].value),e[t].important&&this._shorthandIsImportant.add(e[t].name);if(this._allProperties=[],t.cssText&&this.range){const e=new TextUtils.Text.Text(t.cssText);let r={line:this.range.startLine,column:this.range.startColumn};for(const i of t.cssProperties){const t=i.range;t&&(s.call(this,e,r.line,r.column,t.startLine,t.startColumn),r={line:t.endLine,column:t.endColumn}),this._allProperties.push(CSSProperty.parsePayload(this,this._allProperties.length,i))}s.call(this,e,r.line,r.column,this.range.endLine,this.range.endColumn)}else for(const e of t.cssProperties)this._allProperties.push(CSSProperty.parsePayload(this,this._allProperties.length,e));this._generateSyntheticPropertiesIfNeeded(),this._computeInactiveProperties(),this._activePropertyMap=new Map;for(const t of this._allProperties)t.activeInStyle()&&this._activePropertyMap.set(t.name,t);function s(t,e,s,i,n){const o=new TextUtils.TextRange.TextRange(e,s,i,n);if(!this.range)return;const a=t.extract(o.relativeTo(this.range.startLine,this.range.startColumn)).split("\n");let l=0,h=!1;for(const t of a){let i=0;for(const n of t.split(";")){const t=r(n,h),o=t.text.trim();if(h=t.inComment,o){let t,r;const a=o.indexOf(":");-1===a?(t=o,r=""):(t=o.substring(0,a).trim(),r=o.substring(a+1).trim());const h=new TextUtils.TextRange.TextRange(l,i,l,i+n.length);this._allProperties.push(new CSSProperty(this,this._allProperties.length,t,r,!1,!1,!1,!1,n,h.relativeFrom(e,s)))}i+=n.length+1}l++}}function r(t,e){let s="";for(let r=0;r<t.length;r++)e||"/*"!==t.substring(r,r+2)?e&&"*/"===t.substring(r,r+2)?(e=!1,r++):e||(s+=t[r]):(e=!0,r++);return{text:s,inComment:e}}this.cssText=t.cssText,this._leadingProperties=null}_generateSyntheticPropertiesIfNeeded(){if(this.range)return;if(!this._shorthandValues.size)return;const t=new Set;for(const e of this._allProperties)t.add(e.name);const e=[];for(const s of this._allProperties){const r=cssMetadata().shorthands(s.name)||[];for(const s of r){if(t.has(s))continue;const r=this._shorthandValues.get(s);if(!r)continue;const i=!!this._shorthandIsImportant.has(s),n=new CSSProperty(this,this.allProperties().length,s,r,i,!1,!0,!1);e.push(n),t.add(s)}}this._allProperties=this._allProperties.concat(e)}_computeLeadingProperties(){if(this.range)return this._allProperties.filter((function(t){return!!t.range}));const t=[];for(const e of this._allProperties){const s=cssMetadata().shorthands(e.name)||[];let r=!1;for(const t of s)if(this._shorthandValues.get(t)){r=!0;break}r||t.push(e)}return t}leadingProperties(){return this._leadingProperties||(this._leadingProperties=this._computeLeadingProperties()),this._leadingProperties}target(){return this._cssModel.target()}cssModel(){return this._cssModel}_computeInactiveProperties(){const t=new Map;for(let e=0;e<this._allProperties.length;++e){const s=this._allProperties[e];if(s.disabled||!s.parsedOk){s.setActive(!1);continue}const r=cssMetadata().canonicalPropertyName(s.name),i=t.get(r);i?!i.important||s.important?(i.setActive(!1),t.set(r,s)):s.setActive(!1):t.set(r,s)}}allProperties(){return this._allProperties}getPropertyValue(t){const e=this._activePropertyMap.get(t);return e?e.value:""}isPropertyImplicit(t){const e=this._activePropertyMap.get(t);return!!e&&e.implicit}longhandProperties(t){const e=cssMetadata().longhands(t),s=[];for(let t=0;e&&t<e.length;++t){const r=this._activePropertyMap.get(e[t]);r&&s.push(r)}return s}propertyAt(t){return t<this.allProperties().length?this.allProperties()[t]:null}pastLastSourcePropertyIndex(){for(let t=this.allProperties().length-1;t>=0;--t)if(this.allProperties()[t].range)return t+1;return 0}_insertionRange(t){const e=this.propertyAt(t);if(e&&e.range)return e.range.collapseToStart();if(!this.range)throw new Error("CSSStyleDeclaration.range is null");return this.range.collapseToEnd()}newBlankProperty(t){t=void 0===t?this.pastLastSourcePropertyIndex():t;return new CSSProperty(this,t,"","",!1,!1,!0,!1,"",this._insertionRange(t))}setText(t,e){return this.range&&this.styleSheetId?this._cssModel.setStyleText(this.styleSheetId,this.range,t,e):Promise.resolve(!1)}insertPropertyAt(t,e,s,r){this.newBlankProperty(t).setText(e+": "+s+";",!1,!0).then(r)}appendProperty(t,e,s){this.insertPropertyAt(this.allProperties().length,t,e,s)}}export const Type={Regular:"Regular",Inline:"Inline",Attributes:"Attributes"};