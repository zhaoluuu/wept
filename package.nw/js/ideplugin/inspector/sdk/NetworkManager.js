import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as Platform from"../platform/platform.js";import*as TextUtils from"../text_utils/text_utils.js";import{Cookie}from"./Cookie.js";import{BlockedCookieWithReason,ContentData,Events as NetworkRequestEvents,ExtraRequestInfo,ExtraResponseInfo,MIME_TYPE,MIME_TYPE_TO_RESOURCE_TYPE,NameValue,NetworkRequest}from"./NetworkRequest.js";import{Capability,SDKModel,SDKModelObserver,Target,TargetManager}from"./SDKModel.js";const requestToManagerMap=new WeakMap,CONNECTION_TYPES=new Map([["2g",Protocol.Network.ConnectionType.Cellular2g],["3g",Protocol.Network.ConnectionType.Cellular3g],["4g",Protocol.Network.ConnectionType.Cellular4g],["bluetooth",Protocol.Network.ConnectionType.Bluetooth],["wifi",Protocol.Network.ConnectionType.Wifi],["wimax",Protocol.Network.ConnectionType.Wimax]]);export class NetworkManager extends SDKModel{constructor(e){super(e),this._dispatcher=new NetworkDispatcher(this),this._networkAgent=e.networkAgent(),e.registerNetworkDispatcher(this._dispatcher),Common.Settings.Settings.instance().moduleSetting("cacheDisabled").get()&&this._networkAgent.invoke_setCacheDisabled({cacheDisabled:!0}),this._networkAgent.invoke_enable({maxPostDataSize:MAX_EAGER_POST_REQUEST_BODY_LENGTH}),this._bypassServiceWorkerSetting=Common.Settings.Settings.instance().createSetting("bypassServiceWorker",!1),this._bypassServiceWorkerSetting.get()&&this._bypassServiceWorkerChanged(),this._bypassServiceWorkerSetting.addChangeListener(this._bypassServiceWorkerChanged,this),Common.Settings.Settings.instance().moduleSetting("cacheDisabled").addChangeListener(this._cacheDisabledSettingChanged,this)}static forRequest(e){return requestToManagerMap.get(e)||null}static canReplayRequest(e){return!!requestToManagerMap.get(e)&&e.resourceType()===Common.ResourceType.resourceTypes.XHR}static replayRequest(e){const t=requestToManagerMap.get(e);t&&t._networkAgent.invoke_replayXHR({requestId:e.requestId()})}static async searchInRequest(e,t,s,r){const n=NetworkManager.forRequest(e);if(!n)return[];return(await n._networkAgent.invoke_searchInResponseBody({requestId:e.requestId(),query:t,caseSensitive:s,isRegex:r})).result||[]}static async requestContentData(e){if(e.resourceType()===Common.ResourceType.resourceTypes.WebSocket)return{error:"Content for WebSockets is currently not supported",content:null,encoded:!1};e.finished||await e.once(NetworkRequestEvents.FinishedLoading);const t=NetworkManager.forRequest(e);if(!t)return{error:"No network manager for request",content:null,encoded:!1};const s=await t._networkAgent.invoke_getResponseBody({requestId:e.requestId()}),r=s.getError()||null;return{error:r,content:r?null:s.body,encoded:s.base64Encoded}}static async requestPostData(e){const t=NetworkManager.forRequest(e);if(t)try{const{postData:s}=await t._networkAgent.invoke_getRequestPostData({requestId:e.backendRequestId()});return s}catch(e){return e.message}return console.error("No network manager for request"),Promise.resolve(null)}static _connectionType(e){if(!e.download&&!e.upload)return Protocol.Network.ConnectionType.None;const t=e.title.toLowerCase();for(const[e,s]of CONNECTION_TYPES)if(t.includes(e))return s;return Protocol.Network.ConnectionType.Other}static lowercaseHeaders(e){const t={};for(const s in e)t[s.toLowerCase()]=e[s];return t}inflightRequestForURL(e){return this._dispatcher._inflightRequestsByURL[e]}_cacheDisabledSettingChanged(e){const t=e.data;this._networkAgent.invoke_setCacheDisabled({cacheDisabled:t})}dispose(){Common.Settings.Settings.instance().moduleSetting("cacheDisabled").removeChangeListener(this._cacheDisabledSettingChanged,this)}_bypassServiceWorkerChanged(){this._networkAgent.invoke_setBypassServiceWorker({bypass:this._bypassServiceWorkerSetting.get()})}async getSecurityIsolationStatus(e){const t=await this._networkAgent.invoke_getSecurityIsolationStatus({frameId:e});return t.getError()?null:t.status}}export const Events={RequestStarted:Symbol("RequestStarted"),RequestUpdated:Symbol("RequestUpdated"),RequestFinished:Symbol("RequestFinished"),RequestUpdateDropped:Symbol("RequestUpdateDropped"),ResponseReceived:Symbol("ResponseReceived"),MessageGenerated:Symbol("MessageGenerated"),RequestRedirected:Symbol("RequestRedirected"),LoadingFinished:Symbol("LoadingFinished")};export const NoThrottlingConditions={title:Common.UIString.UIString("Online"),download:-1,upload:-1,latency:0};export const OfflineConditions={title:Common.UIString.UIString("Offline"),download:0,upload:0,latency:0};export const Slow3GConditions={title:Common.UIString.UIString("Slow 3G"),download:51200,upload:51200,latency:2e3};export const Fast3GConditions={title:Common.UIString.UIString("Fast 3G"),download:209715.2*.9,upload:86400,latency:562.5};const MAX_EAGER_POST_REQUEST_BODY_LENGTH=65536;export class NetworkDispatcher{constructor(e){this._manager=e,this._inflightRequestsById=new Map,this._inflightRequestsByURL={},this._requestIdToRedirectExtraInfoBuilder=new Map}usesObjectNotation(){return!0}_headersMapToHeadersArray(e){const t=[];for(const s in e){const r=e[s].split("\n");for(let e=0;e<r.length;++e)t.push({name:s,value:r[e]})}return t}_updateNetworkRequestWithRequest(e,t){e.requestMethod=t.method,e.setRequestHeaders(this._headersMapToHeadersArray(t.headers)),e.setRequestFormData(!!t.hasPostData,t.postData||null),e.setInitialPriority(t.initialPriority),e.mixedContentType=t.mixedContentType||Protocol.Security.MixedContentType.None,e.setReferrerPolicy(t.referrerPolicy)}_updateNetworkRequestWithResponse(e,t){if(t.url&&e.url()!==t.url&&e.setUrl(t.url),e.mimeType=t.mimeType,e.statusCode=t.status,e.statusText=t.statusText,e.hasExtraResponseInfo()||(e.responseHeaders=this._headersMapToHeadersArray(t.headers)),t.encodedDataLength>=0&&e.setTransferSize(t.encodedDataLength),t.requestHeaders&&!e.hasExtraRequestInfo()&&(e.setRequestHeaders(this._headersMapToHeadersArray(t.requestHeaders)),e.setRequestHeadersText(t.requestHeadersText||"")),e.connectionReused=t.connectionReused,e.connectionId=String(t.connectionId),t.remoteIPAddress&&e.setRemoteAddress(t.remoteIPAddress,t.remotePort||-1),t.fromServiceWorker&&(e.fetchedViaServiceWorker=!0),t.fromDiskCache&&e.setFromDiskCache(),t.fromPrefetchCache&&e.setFromPrefetchCache(),t.cacheStorageCacheName&&e.setResponseCacheStorageCacheName(t.cacheStorageCacheName),t.responseTime&&e.setResponseRetrievalTime(new Date(t.responseTime)),e.timing=t.timing,e.protocol=t.protocol||"",t.serviceWorkerResponseSource&&e.setServiceWorkerResponseSource(t.serviceWorkerResponseSource),e.setSecurityState(t.securityState),!this._mimeTypeIsConsistentWithType(e)){const t=Common.UIString.UIString('Resource interpreted as %s but transferred with MIME type %s: "%s".',e.resourceType().title(),e.mimeType,e.url());this._manager.dispatchEventToListeners(Events.MessageGenerated,{message:t,requestId:e.requestId(),warning:!0})}t.securityDetails&&e.setSecurityDetails(t.securityDetails)}_mimeTypeIsConsistentWithType(e){if(e.hasErrorStatusCode()||304===e.statusCode||204===e.statusCode)return!0;const t=e.resourceType();return t!==Common.ResourceType.resourceTypes.Stylesheet&&t!==Common.ResourceType.resourceTypes.Document&&t!==Common.ResourceType.resourceTypes.TextTrack||(!e.mimeType||!!MIME_TYPE_TO_RESOURCE_TYPE.has(e.mimeType)&&t.name()in MIME_TYPE_TO_RESOURCE_TYPE.get(e.mimeType))}resourceChangedPriority({requestId:e,newPriority:t,timestamp:s}){const r=this._inflightRequestsById.get(e);r&&r.setPriority(t)}signedExchangeReceived({requestId:e,info:t}){let s=this._inflightRequestsById.get(e);(s||(s=this._inflightRequestsByURL[t.outerResponse.url],s))&&(s.setSignedExchangeInfo(t),s.setResourceType(Common.ResourceType.resourceTypes.SignedExchange),this._updateNetworkRequestWithResponse(s,t.outerResponse),this._updateNetworkRequest(s),this._manager.dispatchEventToListeners(Events.ResponseReceived,{request:s,response:t.outerResponse}))}requestWillBeSent({requestId:e,loaderId:t,documentURL:s,request:r,timestamp:n,wallTime:o,initiator:i,redirectResponse:a,type:d,frameId:u}){let c=this._inflightRequestsById.get(e);if(c){if(!a)return;c.signedExchangeInfo()||this.responseReceived({requestId:e,loaderId:t,timestamp:n,type:d||Protocol.Network.ResourceType.Other,response:a,frameId:u}),c=this._appendRedirect(e,n,r.url),this._manager.dispatchEventToListeners(Events.RequestRedirected,c)}else c=this._createNetworkRequest(e,u||"",t,r.url,s,i);c.hasNetworkData=!0,this._updateNetworkRequestWithRequest(c,r),c.setIssueTime(n,o),c.setResourceType(d?Common.ResourceType.resourceTypes[d]:Common.ResourceType.resourceTypes.Other),this._getExtraInfoBuilder(e).addRequest(c),this._startNetworkRequest(c,r)}requestServedFromCache({requestId:e}){const t=this._inflightRequestsById.get(e);t&&t.setFromMemoryCache()}responseReceived({requestId:e,loaderId:t,timestamp:s,type:r,response:n,frameId:o}){const i=this._inflightRequestsById.get(e),a=NetworkManager.lowercaseHeaders(n.headers);if(i){if(i.responseReceivedTime=s,i.setResourceType(Common.ResourceType.resourceTypes[r]),"set-cookie"in a&&a["set-cookie"].length>4096){const t=a["set-cookie"].split("\n");for(let s=0;s<t.length;++s){if(t[s].length<=4096)continue;const r=Common.UIString.UIString("Set-Cookie header is ignored in response from url: %s. Cookie length should be less than or equal to 4096 characters.",n.url);this._manager.dispatchEventToListeners(Events.MessageGenerated,{message:r,requestId:e,warning:!0})}}this._updateNetworkRequestWithResponse(i,n),this._updateNetworkRequest(i),this._manager.dispatchEventToListeners(Events.ResponseReceived,{request:i,response:n})}else{const e=a["last-modified"],s={url:n.url,frameId:o||"",loaderId:t,resourceType:r,mimeType:n.mimeType,lastModified:e?new Date(e):null};this._manager.dispatchEventToListeners(Events.RequestUpdateDropped,s)}}dataReceived({requestId:e,timestamp:t,dataLength:s,encodedDataLength:r}){let n=this._inflightRequestsById.get(e);n||(n=this._maybeAdoptMainResourceRequest(e)),n&&(n.resourceSize+=s,-1!==r&&n.increaseTransferSize(r),n.endTime=t,this._updateNetworkRequest(n))}loadingFinished({requestId:e,timestamp:t,encodedDataLength:s,shouldReportCorbBlocking:r}){let n=this._inflightRequestsById.get(e);n||(n=this._maybeAdoptMainResourceRequest(e)),n&&(this._getExtraInfoBuilder(e).finished(),this._finishNetworkRequest(n,t,s,r),this._manager.dispatchEventToListeners(Events.LoadingFinished,n))}loadingFailed({requestId:e,timestamp:t,type:s,errorText:r,canceled:n,blockedReason:o}){const i=this._inflightRequestsById.get(e);if(i){if(i.failed=!0,i.setResourceType(Common.ResourceType.resourceTypes[s]),i.canceled=!!n,o&&(i.setBlockedReason(o),o===Protocol.Network.BlockedReason.Inspector)){const t=Common.UIString.UIString('Request was blocked by DevTools: "%s".',i.url());this._manager.dispatchEventToListeners(Events.MessageGenerated,{message:t,requestId:e,warning:!0})}i.localizedFailDescription=r,this._getExtraInfoBuilder(e).finished(),this._finishNetworkRequest(i,t,-1)}}webSocketCreated({requestId:e,url:t,initiator:s}){const r=new NetworkRequest(e,t,"","","",s||null);requestToManagerMap.set(r,this._manager),r.setResourceType(Common.ResourceType.resourceTypes.WebSocket),this._startNetworkRequest(r,null)}webSocketWillSendHandshakeRequest({requestId:e,timestamp:t,wallTime:s,request:r}){const n=this._inflightRequestsById.get(e);n&&(n.requestMethod="GET",n.setRequestHeaders(this._headersMapToHeadersArray(r.headers)),n.setIssueTime(t,s),this._updateNetworkRequest(n))}webSocketHandshakeResponseReceived({requestId:e,timestamp:t,response:s}){const r=this._inflightRequestsById.get(e);r&&(r.statusCode=s.status,r.statusText=s.statusText,r.responseHeaders=this._headersMapToHeadersArray(s.headers),r.responseHeadersText=s.headersText||"",s.requestHeaders&&r.setRequestHeaders(this._headersMapToHeadersArray(s.requestHeaders)),s.requestHeadersText&&r.setRequestHeadersText(s.requestHeadersText),r.responseReceivedTime=t,r.protocol="websocket",this._updateNetworkRequest(r))}webSocketFrameReceived({requestId:e,timestamp:t,response:s}){const r=this._inflightRequestsById.get(e);r&&(r.addProtocolFrame(s,t,!1),r.responseReceivedTime=t,this._updateNetworkRequest(r))}webSocketFrameSent({requestId:e,timestamp:t,response:s}){const r=this._inflightRequestsById.get(e);r&&(r.addProtocolFrame(s,t,!0),r.responseReceivedTime=t,this._updateNetworkRequest(r))}webSocketFrameError({requestId:e,timestamp:t,errorMessage:s}){const r=this._inflightRequestsById.get(e);r&&(r.addProtocolFrameError(s,t),r.responseReceivedTime=t,this._updateNetworkRequest(r))}webSocketClosed({requestId:e,timestamp:t}){const s=this._inflightRequestsById.get(e);s&&this._finishNetworkRequest(s,t,-1)}eventSourceMessageReceived({requestId:e,timestamp:t,eventName:s,eventId:r,data:n}){const o=this._inflightRequestsById.get(e);o&&o.addEventSourceMessage(t,s,r,n)}requestIntercepted({interceptionId:e,request:t,frameId:s,resourceType:r,isNavigationRequest:n,isDownload:o,redirectUrl:i,authChallenge:a,responseErrorReason:d,responseStatusCode:u,responseHeaders:c,requestId:h}){MultitargetNetworkManager.instance()._requestIntercepted(new InterceptedRequest(this._manager.target().networkAgent(),e,t,s,r,n,o,i,a,d,u,c,h))}requestWillBeSentExtraInfo({requestId:e,associatedCookies:t,headers:s}){const r=[],n=[];for(const{blockedReasons:e,cookie:s}of t)0===e.length?n.push(Cookie.fromProtocolCookie(s)):r.push({blockedReasons:e,cookie:Cookie.fromProtocolCookie(s)});const o={blockedRequestCookies:r,includedRequestCookies:n,requestHeaders:this._headersMapToHeadersArray(s)};this._getExtraInfoBuilder(e).addRequestExtraInfo(o)}responseReceivedExtraInfo({requestId:e,blockedCookies:t,headers:s,headersText:r}){const n={blockedResponseCookies:t.map(e=>({blockedReasons:e.blockedReasons,cookieLine:e.cookieLine,cookie:e.cookie?Cookie.fromProtocolCookie(e.cookie):null})),responseHeaders:this._headersMapToHeadersArray(s),responseHeadersText:r};this._getExtraInfoBuilder(e).addResponseExtraInfo(n)}_getExtraInfoBuilder(e){let t;if(this._requestIdToRedirectExtraInfoBuilder.has(e))t=this._requestIdToRedirectExtraInfoBuilder.get(e);else{t=new RedirectExtraInfoBuilder(()=>{this._requestIdToRedirectExtraInfoBuilder.delete(e)}),this._requestIdToRedirectExtraInfoBuilder.set(e,t)}return t}_appendRedirect(e,t,s){const r=this._inflightRequestsById.get(e);if(!r)throw new Error("Could not find original network request for "+e);let n=0;for(let e=r.redirectSource();e;e=e.redirectSource())n++;r.markAsRedirect(n),this._finishNetworkRequest(r,t,-1);const o=this._createNetworkRequest(e,r.frameId,r.loaderId,s,r.documentURL,r.initiator());return o.setRedirectSource(r),r.setRedirectDestination(o),o}_maybeAdoptMainResourceRequest(e){const t=MultitargetNetworkManager.instance()._inflightMainResourceRequests.get(e);if(!t)return null;const s=NetworkManager.forRequest(t)._dispatcher;return s._inflightRequestsById.delete(e),delete s._inflightRequestsByURL[t.url()],this._inflightRequestsById.set(e,t),this._inflightRequestsByURL[t.url()]=t,requestToManagerMap.set(t,this._manager),t}_startNetworkRequest(e,t){this._inflightRequestsById.set(e.requestId(),e),this._inflightRequestsByURL[e.url()]=e,e.loaderId===e.requestId()&&MultitargetNetworkManager.instance()._inflightMainResourceRequests.set(e.requestId(),e),this._manager.dispatchEventToListeners(Events.RequestStarted,{request:e,originalRequest:t})}_updateNetworkRequest(e){this._manager.dispatchEventToListeners(Events.RequestUpdated,e)}_finishNetworkRequest(e,t,s,r){if(e.endTime=t,e.finished=!0,s>=0){const t=e.redirectSource();t&&t.signedExchangeInfo()?(e.setTransferSize(0),t.setTransferSize(s),this._updateNetworkRequest(t)):e.setTransferSize(s)}if(this._manager.dispatchEventToListeners(Events.RequestFinished,e),this._inflightRequestsById.delete(e.requestId()),delete this._inflightRequestsByURL[e.url()],MultitargetNetworkManager.instance()._inflightMainResourceRequests.delete(e.requestId()),r){const t=Common.UIString.UIString("Cross-Origin Read Blocking (CORB) blocked cross-origin response %s with MIME type %s. See https://www.chromestatus.com/feature/5629709824032768 for more details.",e.url(),e.mimeType);this._manager.dispatchEventToListeners(Events.MessageGenerated,{message:t,requestId:e.requestId(),warning:!0})}if(Common.Settings.Settings.instance().moduleSetting("monitoringXHREnabled").get()&&e.resourceType().category()===Common.ResourceType.resourceCategories.XHR){let t;t=e.failed||e.hasErrorStatusCode()?Common.UIString.UIString('%s failed loading: %s "%s".',e.resourceType().title(),e.requestMethod,e.url()):Common.UIString.UIString('%s finished loading: %s "%s".',e.resourceType().title(),e.requestMethod,e.url()),this._manager.dispatchEventToListeners(Events.MessageGenerated,{message:t,requestId:e.requestId(),warning:!1})}}_createNetworkRequest(e,t,s,r,n,o){const i=new NetworkRequest(e,r,n,t,s,o);return requestToManagerMap.set(i,this._manager),i}}let multiTargetNetworkManagerInstance;export class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._userAgentOverride="",this._userAgentMetadataOverride=null,this._agents=new Set,this._inflightMainResourceRequests=new Map,this._networkConditions=NoThrottlingConditions,this._updatingInterceptionPatternsPromise=null,this._blockingEnabledSetting=Common.Settings.Settings.instance().moduleSetting("requestBlockingEnabled"),this._blockedPatternsSetting=Common.Settings.Settings.instance().createSetting("networkBlockedPatterns",[]),this._effectiveBlockedURLs=[],this._updateBlockedPatterns(),this._urlsForRequestInterceptor=new Platform.Multimap,TargetManager.instance().observeModels(NetworkManager,this)}static instance(e={forceNew:null}){const{forceNew:t}=e;return multiTargetNetworkManagerInstance&&!t||(multiTargetNetworkManagerInstance=new MultitargetNetworkManager),multiTargetNetworkManagerInstance}static getChromeVersion(){const e=new RegExp("(?:^|\\W)Chrome/(\\S+)"),t=navigator.userAgent.match(e);return t&&t.length>1?t[1]:""}static _generateBrandVersionList(e,t,s){const r=[[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]],n=r[e%r.length],o=["\\",'"',";"],i={brand:o[n[0]]+"Not"+o[n[1]]+"A"+o[n[2]]+"Brand",version:"99"},a={brand:"Chromium",version:s},d={brand:t,version:s},u=[];return u[n[0]]=i,u[n[1]]=a,u[n[2]]=d,u}static getChromeBrands(){const e=MultitargetNetworkManager.getChromeVersion();if(e.length>0){const t=e.split(".",1)[0];return MultitargetNetworkManager._generateBrandVersionList(Number.parseInt(t,10),"Google Chrome",t)}return[]}static patchUserAgentWithChromeVersion(e){const t=MultitargetNetworkManager.getChromeVersion();if(t.length>0){const s=t.split(".",1)[0]+".0.100.0";return Platform.StringUtilities.sprintf(e,t,s)}return e}modelAdded(e){const t=e.target().networkAgent();this._extraHeaders&&t.invoke_setExtraHTTPHeaders({headers:this._extraHeaders}),this.currentUserAgent()&&t.invoke_setUserAgentOverride({userAgent:this.currentUserAgent(),userAgentMetadata:this._userAgentMetadataOverride||void 0}),this._effectiveBlockedURLs.length&&t.invoke_setBlockedURLs({urls:this._effectiveBlockedURLs}),this.isIntercepting()&&t.invoke_setRequestInterception({patterns:this._urlsForRequestInterceptor.valuesArray()}),this._agents.add(t),this.isThrottling()&&this._updateNetworkConditions(t)}modelRemoved(e){for(const t of this._inflightMainResourceRequests){NetworkManager.forRequest(t[1])===e&&this._inflightMainResourceRequests.delete(t[0])}this._agents.delete(e.target().networkAgent())}isThrottling(){return this._networkConditions.download>=0||this._networkConditions.upload>=0||this._networkConditions.latency>0}isOffline(){return!this._networkConditions.download&&!this._networkConditions.upload}setNetworkConditions(e){this._networkConditions=e;for(const e of this._agents)this._updateNetworkConditions(e);this.dispatchEventToListeners(MultitargetNetworkManager.Events.ConditionsChanged)}networkConditions(){return this._networkConditions}_updateNetworkConditions(e){const t=this._networkConditions;this.isThrottling()?e.invoke_emulateNetworkConditions({offline:this.isOffline(),latency:t.latency,downloadThroughput:t.download<0?0:t.download,uploadThroughput:t.upload<0?0:t.upload,connectionType:NetworkManager._connectionType(t)}):e.invoke_emulateNetworkConditions({offline:!1,latency:0,downloadThroughput:0,uploadThroughput:0})}setExtraHTTPHeaders(e){this._extraHeaders=e;for(const e of this._agents)e.invoke_setExtraHTTPHeaders({headers:this._extraHeaders})}currentUserAgent(){return this._customUserAgent?this._customUserAgent:this._userAgentOverride}_updateUserAgentOverride(){const e=this.currentUserAgent();for(const t of this._agents)t.invoke_setUserAgentOverride({userAgent:e,userAgentMetadata:this._userAgentMetadataOverride||void 0})}setUserAgentOverride(e,t){this._userAgentOverride!==e&&(this._userAgentOverride=e,this._customUserAgent?this._userAgentMetadataOverride=null:(this._userAgentMetadataOverride=t,this._updateUserAgentOverride()),this.dispatchEventToListeners(MultitargetNetworkManager.Events.UserAgentChanged))}userAgentOverride(){return this._userAgentOverride}setCustomUserAgentOverride(e){this._customUserAgent=e,this._userAgentMetadataOverride=null,this._updateUserAgentOverride()}blockedPatterns(){return this._blockedPatternsSetting.get().slice()}blockingEnabled(){return this._blockingEnabledSetting.get()}isBlocking(){return!!this._effectiveBlockedURLs.length}setBlockedPatterns(e){this._blockedPatternsSetting.set(e),this._updateBlockedPatterns(),this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged)}setBlockingEnabled(e){this._blockingEnabledSetting.get()!==e&&(this._blockingEnabledSetting.set(e),this._updateBlockedPatterns(),this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged))}_updateBlockedPatterns(){const e=[];if(this._blockingEnabledSetting.get())for(const t of this._blockedPatternsSetting.get())t.enabled&&e.push(t.url);if(e.length||this._effectiveBlockedURLs.length){this._effectiveBlockedURLs=e;for(const e of this._agents)e.invoke_setBlockedURLs({urls:this._effectiveBlockedURLs})}}isIntercepting(){return!!this._urlsForRequestInterceptor.size}setInterceptionHandlerForPatterns(e,t){this._urlsForRequestInterceptor.deleteAll(t);for(const s of e)this._urlsForRequestInterceptor.set(t,s);return this._updateInterceptionPatternsOnNextTick()}_updateInterceptionPatternsOnNextTick(){return this._updatingInterceptionPatternsPromise||(this._updatingInterceptionPatternsPromise=Promise.resolve().then(this._updateInterceptionPatterns.bind(this))),this._updatingInterceptionPatternsPromise}_updateInterceptionPatterns(){Common.Settings.Settings.instance().moduleSetting("cacheDisabled").get()||Common.Settings.Settings.instance().moduleSetting("cacheDisabled").set(!0),this._updatingInterceptionPatternsPromise=null;const e=[];for(const t of this._agents)e.push(t.invoke_setRequestInterception({patterns:this._urlsForRequestInterceptor.valuesArray()}));return this.dispatchEventToListeners(MultitargetNetworkManager.Events.InterceptorsChanged),Promise.all(e).then(e=>Promise.resolve())}async _requestIntercepted(e){for(const t of this._urlsForRequestInterceptor.keysArray())if(await t(e),e.hasResponded())return;e.hasResponded()||e.continueRequestWithoutChange()}clearBrowserCache(){for(const e of this._agents)e.invoke_clearBrowserCache()}clearBrowserCookies(){for(const e of this._agents)e.invoke_clearBrowserCookies()}getCertificate(e){const t=TargetManager.instance().mainTarget();return t?t.networkAgent().invoke_getCertificate({origin:e}).then(e=>e&&e.tableNames||[]):Promise.resolve([])}async loadResource(e){const t={},s=this.currentUserAgent();return s&&(t["User-Agent"]=s),Common.Settings.Settings.instance().moduleSetting("cacheDisabled").get()&&(t["Cache-Control"]="no-cache"),new Promise(s=>Host.ResourceLoader.load(e,t,(e,t,r,n)=>{s({success:e,content:r,errorDescription:n})}))}}MultitargetNetworkManager.Events={BlockedPatternsChanged:Symbol("BlockedPatternsChanged"),ConditionsChanged:Symbol("ConditionsChanged"),UserAgentChanged:Symbol("UserAgentChanged"),InterceptorsChanged:Symbol("InterceptorsChanged")};export class InterceptedRequest{constructor(e,t,s,r,n,o,i,a,d,u,c,h,l){this._networkAgent=e,this._interceptionId=t,this._hasResponded=!1,this.request=s,this.frameId=r,this.resourceType=n,this.isNavigationRequest=o,this.isDownload=!!i,this.redirectUrl=a,this.authChallenge=d,this.responseErrorReason=u,this.responseStatusCode=c,this.responseHeaders=h,this.requestId=l}hasResponded(){return this._hasResponded}async continueRequestWithContent(e){this._hasResponded=!0;const t=["HTTP/1.1 200 OK","Date: "+(new Date).toUTCString(),"Server: Chrome Devtools Request Interceptor","Connection: closed","Content-Length: "+e.size,"Content-Type: "+e.type||"text/x-unknown"],s=await async function(e){const t=new FileReader,s=new Promise(e=>{t.onloadend=e});if(t.readAsDataURL(e),await s,t.error)return console.error("Could not convert blob to base64.",t.error),"";const r=t.result;if(null==r||"string"!=typeof r)return console.error("Could not convert blob to base64."),"";return r.substring(r.indexOf(",")+1)}(new Blob([t.join("\r\n"),"\r\n\r\n",e]));this._networkAgent.invoke_continueInterceptedRequest({interceptionId:this._interceptionId,rawResponse:s})}continueRequestWithoutChange(){console.assert(!this._hasResponded),this._hasResponded=!0,this._networkAgent.invoke_continueInterceptedRequest({interceptionId:this._interceptionId})}continueRequestWithError(e){console.assert(!this._hasResponded),this._hasResponded=!0,this._networkAgent.invoke_continueInterceptedRequest({interceptionId:this._interceptionId,errorReason:e})}async responseBody(){const e=await this._networkAgent.invoke_getResponseBodyForInterception({interceptionId:this._interceptionId}),t=e.getError()||null;return{error:t,content:t?null:e.body,encoded:e.base64Encoded}}}class RedirectExtraInfoBuilder{constructor(e){this._requests=[],this._requestExtraInfos=[],this._responseExtraInfos=[],this._finished=!1,this._hasExtraInfo=!1,this._deleteCallback=e}addRequest(e){this._requests.push(e),this._sync(this._requests.length-1)}addRequestExtraInfo(e){this._hasExtraInfo=!0,this._requestExtraInfos.push(e),this._sync(this._requestExtraInfos.length-1)}addResponseExtraInfo(e){this._responseExtraInfos.push(e),this._sync(this._responseExtraInfos.length-1)}finished(){this._finished=!0,this._deleteIfComplete()}_sync(e){const t=this._requests[e];if(!t)return;const s=this._requestExtraInfos[e];s&&(t.addExtraRequestInfo(s),this._requestExtraInfos[e]=null);const r=this._responseExtraInfos[e];r&&(t.addExtraResponseInfo(r),this._responseExtraInfos[e]=null),this._deleteIfComplete()}_deleteIfComplete(){if(this._finished){if(this._hasExtraInfo){const e=this._requests.peekLast();if(e&&!e.hasExtraResponseInfo())return}this._deleteCallback()}}}SDKModel.register(NetworkManager,Capability.Network,!0);export let Conditions;export let BlockedPattern;export let Message;export let InterceptionPattern;export let RequestInterceptor;