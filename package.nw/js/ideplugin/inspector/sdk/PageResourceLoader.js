import*as Common from"../common/common.js";import{ls}from"../common/common.js";import*as Host from"../host/host.js";import{MultitargetNetworkManager}from"./NetworkManager.js";import{Events as ResourceTreeModelEvents,ResourceTreeFrame,ResourceTreeModel}from"./ResourceTreeModel.js";import{Target,TargetManager}from"./SDKModel.js";export let PageResourceLoadInitiator;export let PageResource;let pageResourceLoader=null;export class PageResourceLoader extends Common.ObjectWrapper.ObjectWrapper{constructor(e,r,o){super(),this._currentlyLoading=0,this._maxConcurrentLoads=r,this._pageResources=new Map,this._queuedLoads=[],TargetManager.instance().addModelListener(ResourceTreeModel,ResourceTreeModelEvents.MainFrameNavigated,this._onMainFrameNavigated,this),this._loadOverride=e,this._loadTimeout=o}static instance({forceNew:e,loadOverride:r,maxConcurrentLoads:o,loadTimeout:s}={forceNew:!1,loadOverride:null,maxConcurrentLoads:500,loadTimeout:3e4}){return pageResourceLoader&&!e||(pageResourceLoader=new PageResourceLoader(r,o,s)),pageResourceLoader}_onMainFrameNavigated(e){if(e.data.isTopFrame()){for(const{reject:e}of this._queuedLoads)e(new Error(ls`Load canceled due to reload of inspected page`));this._queuedLoads=[],this._pageResources.clear(),this.dispatchEventToListeners(Events.Update)}}getResourcesLoaded(){return this._pageResources}getNumberOfResources(){return{loading:this._currentlyLoading,queued:this._queuedLoads.length,resources:this._pageResources.size}}async _acquireLoadSlot(){if(this._currentlyLoading++,this._currentlyLoading>this._maxConcurrentLoads){const e={resolve:()=>{},reject:()=>{}},r=new Promise((r,o)=>{e.resolve=r,e.reject=o});this._queuedLoads.push(e),await r}}_releaseLoadSlot(){this._currentlyLoading--;const e=this._queuedLoads.shift();e&&e.resolve()}static async _withTimeout(e,r){const o=new Promise((e,o)=>setTimeout(o,r,new Error(ls`Load canceled due to load timeout`)));return Promise.race([e,o])}static makeKey(e,r){if(r.frameId)return`${e}-${r.frameId}`;if(r.target)return`${e}-${r.target.id()}`;throw new Error("Invalid initiator")}async loadResource(e,r){const o=PageResourceLoader.makeKey(e,r),s={success:null,size:null,errorMessage:void 0,url:e,initiator:r};this._pageResources.set(o,s),this.dispatchEventToListeners(Events.Update);try{await this._acquireLoadSlot();const r=this._loadOverride?this._loadOverride(e):MultitargetNetworkManager.instance().loadResource(e),o=await PageResourceLoader._withTimeout(r,this._loadTimeout);if(s.errorMessage=o.errorDescription.message,s.success=o.success,o.success)return s.size=o.content.length,{content:o.content};throw new Error(o.errorDescription.message)}catch(e){throw void 0===s.errorMessage&&(s.errorMessage=e.message),null===s.success&&(s.success=!1),e}finally{this._releaseLoadSlot(),this.dispatchEventToListeners(Events.Update)}}}export const Events={Update:Symbol("Update")};