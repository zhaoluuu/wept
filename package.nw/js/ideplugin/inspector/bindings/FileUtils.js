import*as Common from"../common/common.js";import*as Workspace from"../workspace/workspace.js";export class ChunkedReader{fileSize(){}loadedSize(){}fileName(){}cancel(){}error(){}}export class ChunkedFileReader{constructor(e,i,s){this._file=e,this._fileSize=e.size,this._loadedSize=0,this._chunkSize=i,this._chunkTransferredCallback=s,this._decoder=new TextDecoder,this._isCanceled=!1,this._error=null}read(e){return this._chunkTransferredCallback&&this._chunkTransferredCallback(this),this._output=e,this._reader=new FileReader,this._reader.onload=this._onChunkLoaded.bind(this),this._reader.onerror=this._onError.bind(this),this._loadChunk(),new Promise(e=>{this._transferFinished=e})}cancel(){this._isCanceled=!0}loadedSize(){return this._loadedSize}fileSize(){return this._fileSize}fileName(){return this._file.name}error(){return this._error}_onChunkLoaded(e){if(this._isCanceled)return;if(e.target.readyState!==FileReader.DONE)return;const i=this._reader.result;this._loadedSize+=i.byteLength;const s=this._loadedSize===this._fileSize,r=this._decoder.decode(i,{stream:!s});if(this._output.write(r),!this._isCanceled){if(this._chunkTransferredCallback&&this._chunkTransferredCallback(this),s)return this._file=null,this._reader=null,this._output.close(),void this._transferFinished(!this._error);this._loadChunk()}}_loadChunk(){const e=this._loadedSize,i=Math.min(this._fileSize,e+this._chunkSize),s=this._file.slice(e,i);this._reader.readAsArrayBuffer(s)}_onError(e){this._error=e.target.error,this._transferFinished(!1)}}export class FileOutputStream{async open(e){this._closed=!1,this._writeCallbacks=[],this._fileName=e;const i=await self.Workspace.fileManager.save(this._fileName,"",!0);return i&&self.Workspace.fileManager.addEventListener(Workspace.FileManager.Events.AppendedToURL,this._onAppendDone,this),!!i}write(e){return new Promise(i=>{this._writeCallbacks.push(i),self.Workspace.fileManager.append(this._fileName,e)})}async close(){this._closed=!0,this._writeCallbacks.length||(self.Workspace.fileManager.removeEventListener(Workspace.FileManager.Events.AppendedToURL,this._onAppendDone,this),self.Workspace.fileManager.close(this._fileName))}_onAppendDone(e){e.data===this._fileName&&(this._writeCallbacks.shift()(),this._writeCallbacks.length||this._closed&&(self.Workspace.fileManager.removeEventListener(Workspace.FileManager.Events.AppendedToURL,this._onAppendDone,this),self.Workspace.fileManager.close(this._fileName)))}}