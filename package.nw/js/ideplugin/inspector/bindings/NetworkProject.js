import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import*as Workspace from"../workspace/workspace.js";let networkProjectManagerInstance;export class NetworkProjectManager extends Common.ObjectWrapper.ObjectWrapper{constructor(){super()}static instance({forceNew:e}={forceNew:!1}){return networkProjectManagerInstance&&!e||(networkProjectManagerInstance=new NetworkProjectManager),networkProjectManagerInstance}}export const Events={FrameAttributionAdded:Symbol("FrameAttributionAdded"),FrameAttributionRemoved:Symbol("FrameAttributionRemoved")};export class NetworkProject{static _resolveFrame(e,t){const r=NetworkProject.targetForUISourceCode(e),o=r&&r.model(SDK.ResourceTreeModel.ResourceTreeModel);return o?o.frameForId(t):null}static setInitialFrameAttribution(e,t){const r=NetworkProject._resolveFrame(e,t);if(!r)return;const o=new Map;o.set(t,{frame:r,count:1}),e[_frameAttributionSymbol]=o}static cloneInitialFrameAttribution(e,t){const r=e[_frameAttributionSymbol];if(!r)return;const o=new Map;t[_frameAttributionSymbol]=o;for(const e of r.keys()){const t=r.get(e);o.set(e,{frame:t.frame,count:t.count})}}static addFrameAttribution(e,t){const r=NetworkProject._resolveFrame(e,t);if(!r)return;const o=e[_frameAttributionSymbol],n=o.get(t)||{frame:r,count:0};if(n.count+=1,o.set(t,n),1!==n.count)return;const a={uiSourceCode:e,frame:r};NetworkProjectManager.instance().dispatchEventToListeners(Events.FrameAttributionAdded,a)}static removeFrameAttribution(e,t){const r=e[_frameAttributionSymbol];if(!r)return;const o=r.get(t);if(console.assert(o,"Failed to remove frame attribution for url: "+e.url()),!o)return;if(o.count-=1,o.count>0)return;r.delete(t);const n={uiSourceCode:e,frame:o.frame};NetworkProjectManager.instance().dispatchEventToListeners(Events.FrameAttributionRemoved,n)}static targetForUISourceCode(e){return e.project()[_targetSymbol]||null}static setTargetForProject(e,t){e[_targetSymbol]=t}static framesForUISourceCode(e){const t=NetworkProject.targetForUISourceCode(e),r=t&&t.model(SDK.ResourceTreeModel.ResourceTreeModel),o=e[_frameAttributionSymbol];if(!r||!o)return[];return Array.from(o.keys()).map(e=>r.frameForId(e)).filter(e=>!!e)}}const _targetSymbol=Symbol("target"),_frameAttributionSymbol=Symbol("_frameAttributionSymbol");