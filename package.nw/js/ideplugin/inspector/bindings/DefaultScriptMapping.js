import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import*as Workspace from"../workspace/workspace.js";import{ContentProviderBasedProject}from"./ContentProviderBasedProject.js";import{DebuggerSourceMapping,DebuggerWorkspaceBinding}from"./DebuggerWorkspaceBinding.js";export class DefaultScriptMapping{constructor(e,o,t){this._debuggerModel=e,this._debuggerWorkspaceBinding=t,this._project=new ContentProviderBasedProject(o,"debugger:"+e.target().id(),Workspace.Workspace.projectTypes.Debugger,"",!0),this._eventListeners=[e.addEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared,this._debuggerReset,this),e.addEventListener(SDK.DebuggerModel.Events.ParsedScriptSource,this._parsedScriptSource,this),e.addEventListener(SDK.DebuggerModel.Events.DiscardedAnonymousScriptSource,this._discardedScriptSource,this)],this._scriptSymbol=Symbol("symbol")}static scriptForUISourceCode(e){const o=e[_scriptsSymbol];return o?o.values().next().value:null}rawLocationToUILocation(e){const o=e.script();if(!o)return null;const t=o[_uiSourceCodeSymbol],r=e.lineNumber-(o.isInlineScriptWithSourceURL()?o.lineOffset:0);let s=e.columnNumber||0;return o.isInlineScriptWithSourceURL()&&!r&&s&&(s-=o.columnOffset),t.uiLocation(r,s)}uiLocationToRawLocations(e,o,t){const r=e[this._scriptSymbol];return r?r.isInlineScriptWithSourceURL()?[this._debuggerModel.createRawLocation(r,o+r.lineOffset,o?t:t+r.columnOffset)]:[this._debuggerModel.createRawLocation(r,o,t)]:[]}_parsedScriptSource(e){const o=e.data,t=Common.ParsedURL.ParsedURL.extractName(o.sourceURL),r="debugger:///VM"+o.scriptId+(t?" "+t:""),s=this._project.createUISourceCode(r,Common.ResourceType.resourceTypes.Script);s[this._scriptSymbol]=o,s[_scriptsSymbol]?s[_scriptsSymbol].add(o):s[_scriptsSymbol]=new Set([o]),o[_uiSourceCodeSymbol]=s,this._project.addUISourceCodeWithProvider(s,o,null,"text/javascript"),this._debuggerWorkspaceBinding.updateLocations(o)}_discardedScriptSource(e){const o=e.data,t=o[_uiSourceCodeSymbol];t&&(delete o[_uiSourceCodeSymbol],delete t[this._scriptSymbol],t[_scriptsSymbol].delete(o),t[_scriptsSymbol].size||delete t[_scriptsSymbol],this._project.removeUISourceCode(t.url()))}_debuggerReset(){this._project.reset()}dispose(){Common.EventTarget.EventTarget.removeEventListeners(this._eventListeners),this._debuggerReset(),this._project.dispose()}}const _scriptsSymbol=Symbol("symbol"),_uiSourceCodeSymbol=Symbol("uiSourceCodeSymbol");