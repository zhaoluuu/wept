import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as TextUtils from"../text_utils/text_utils.js";import*as UI from"../ui/ui.js";import*as Workspace from"../workspace/workspace.js";export class ContextMenuProvider{appendApplicableItems(e,o,t){const n=t;n.contentType().isDocumentOrScriptOrStyleSheet()&&o.saveSection().appendItem(Common.UIString.UIString("Save as..."),(async function(){n instanceof Workspace.UISourceCode.UISourceCode&&n.commitWorkingCopy();let e=(await n.requestContent()).content||"";await n.contentEncoded()&&(e=window.atob(e));const o=n.contentURL();self.Workspace.fileManager.save(o,e,!0),self.Workspace.fileManager.close(o)}));const s=Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(n.contentURL());s&&self.Persistence.networkPersistenceManager.canSaveUISourceCodeForOverrides(s)&&o.saveSection().appendItem(Common.UIString.UIString("Save for overrides"),()=>{s.commitWorkingCopy(),self.Persistence.networkPersistenceManager.saveUISourceCodeForOverrides(s),Common.Revealer.reveal(s)});const r=s&&self.Persistence.persistence.binding(s),a=r?r.fileSystem.contentURL():n.contentURL();if(a.startsWith("file://")){const e=Common.ParsedURL.ParsedURL.urlToPlatformPath(a,Host.Platform.isWin());o.revealSection().appendItem(Common.UIString.UIString("Open in containing folder"),()=>Host.InspectorFrontendHost.InspectorFrontendHostInstance.showItemInFolder(e))}}}