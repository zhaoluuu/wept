import*as Bindings from"../bindings/bindings.js";import*as Common from"../common/common.js";import*as Components from"../components/components.js";import*as SDK from"../sdk/sdk.js";import*as Workspace from"../workspace/workspace.js";import{Automapping,AutomappingStatus}from"./Automapping.js";import{LinkDecorator}from"./PersistenceUtils.js";export class PersistenceImpl extends Common.ObjectWrapper.ObjectWrapper{constructor(e,n){super(),this._workspace=e,this._breakpointManager=n,this._filePathPrefixesToBindingCount=new Map,this._subscribedBindingEventListeners=new Platform.Multimap;const t=new LinkDecorator(this);Components.Linkifier.Linkifier.setLinkDecorator(t),this._mapping=new Automapping(this._workspace,this._onStatusAdded.bind(this),this._onStatusRemoved.bind(this))}addNetworkInterceptor(e){this._mapping.addNetworkInterceptor(e)}refreshAutomapping(){this._mapping.scheduleRemap()}async addBinding(e){await this._innerAddBinding(e)}async addBindingForTest(e){await this._innerAddBinding(e)}async removeBinding(e){await this._innerRemoveBinding(e)}async removeBindingForTest(e){await this._innerRemoveBinding(e)}async _innerAddBinding(e){e.network[_binding]=e,e.fileSystem[_binding]=e,e.fileSystem.forceLoadOnCheckContent(),e.network.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted,this._onWorkingCopyCommitted,this),e.fileSystem.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted,this._onWorkingCopyCommitted,this),e.network.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged,this._onWorkingCopyChanged,this),e.fileSystem.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged,this._onWorkingCopyChanged,this),this._addFilePathBindingPrefixes(e.fileSystem.url()),await this._moveBreakpoints(e.fileSystem,e.network),console.assert(!e.fileSystem.isDirty()||!e.network.isDirty()),e.fileSystem.isDirty()?this._syncWorkingCopy(e.fileSystem):e.network.isDirty()?this._syncWorkingCopy(e.network):e.network.hasCommits()&&e.network.content()!==e.fileSystem.content()&&(e.network.setWorkingCopy(e.network.content()),this._syncWorkingCopy(e.network)),this._notifyBindingEvent(e.network),this._notifyBindingEvent(e.fileSystem),this.dispatchEventToListeners(Events.BindingCreated,e)}async _innerRemoveBinding(e){e.network[_binding]===e&&(console.assert(e.network[_binding]===e.fileSystem[_binding],"ERROR: inconsistent binding for networkURL "+e.network.url()),e.network[_binding]=null,e.fileSystem[_binding]=null,e.network.removeEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted,this._onWorkingCopyCommitted,this),e.fileSystem.removeEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted,this._onWorkingCopyCommitted,this),e.network.removeEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged,this._onWorkingCopyChanged,this),e.fileSystem.removeEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged,this._onWorkingCopyChanged,this),this._removeFilePathBindingPrefixes(e.fileSystem.url()),await this._breakpointManager.copyBreakpoints(e.network.url(),e.fileSystem),this._notifyBindingEvent(e.network),this._notifyBindingEvent(e.fileSystem),this.dispatchEventToListeners(Events.BindingRemoved,e))}async _onStatusAdded(e){const n=new PersistenceBinding(e.network,e.fileSystem);e[_binding]=n,await this._innerAddBinding(n)}async _onStatusRemoved(e){const n=e[_binding];await this._innerRemoveBinding(n)}_onWorkingCopyChanged(e){const n=e.data;this._syncWorkingCopy(n)}_syncWorkingCopy(e){const n=e[_binding];if(!n||n[_muteWorkingCopy])return;const t=n.network===e?n.fileSystem:n.network;if(!e.isDirty())return n[_muteWorkingCopy]=!0,t.resetWorkingCopy(),n[_muteWorkingCopy]=!1,void this._contentSyncedForTest();if(Bindings.NetworkProject.NetworkProject.targetForUISourceCode(n.network).type()!==SDK.SDKModel.Type.Node)i.call(this,()=>e.workingCopy());else{const n=e.workingCopy();t.requestContent().then(()=>{const e=PersistenceImpl.rewrapNodeJSContent(t,t.workingCopy(),n);i.call(this,()=>e)})}function i(e){n[_muteWorkingCopy]=!0,t.setWorkingCopyGetter(e),n[_muteWorkingCopy]=!1,this._contentSyncedForTest()}}_onWorkingCopyCommitted(e){const n=e.data.uiSourceCode,t=e.data.content;this.syncContent(n,t,e.data.encoded)}syncContent(e,n,t){const i=e[_binding];if(!i||i[_muteCommit])return;const o=i.network===e?i.fileSystem:i.network;function s(e){i[_muteCommit]=!0,o.setContent(e,t),i[_muteCommit]=!1,this._contentSyncedForTest()}Bindings.NetworkProject.NetworkProject.targetForUISourceCode(i.network).type()!==SDK.SDKModel.Type.Node?s.call(this,n):o.requestContent().then(e=>{const t=PersistenceImpl.rewrapNodeJSContent(o,e.content,n);s.call(this,t)})}static rewrapNodeJSContent(e,n,t){return e.project().type()===Workspace.Workspace.projectTypes.FileSystem?(t.startsWith(NodePrefix)&&t.endsWith(NodeSuffix)&&(t=t.substring(NodePrefix.length,t.length-NodeSuffix.length)),n.startsWith(NodeShebang)&&(t=NodeShebang+t)):(t.startsWith(NodeShebang)&&(t=t.substring(NodeShebang.length)),n.startsWith(NodePrefix)&&n.endsWith(NodeSuffix)&&(t=NodePrefix+t+NodeSuffix)),t}_contentSyncedForTest(){}async _moveBreakpoints(e,n){const t=this._breakpointManager.breakpointLocationsForUISourceCode(e).map(e=>e.breakpoint);await Promise.all(t.map(e=>(e.remove(!1),this._breakpointManager.setBreakpoint(n,e.lineNumber(),e.columnNumber(),e.condition(),e.enabled()))))}hasUnsavedCommittedChanges(e){return!this._workspace.hasResourceContentTrackingExtensions()&&(!e.project().canSetFileContent()&&(!e[_binding]&&!!e.hasCommits()))}binding(e){return e[_binding]||null}subscribeForBindingEvent(e,n){this._subscribedBindingEventListeners.set(e,n)}unsubscribeFromBindingEvent(e,n){this._subscribedBindingEventListeners.delete(e,n)}_notifyBindingEvent(e){if(!this._subscribedBindingEventListeners.has(e))return;const n=Array.from(this._subscribedBindingEventListeners.get(e));for(const e of n)e.call(null)}fileSystem(e){const n=this.binding(e);return n?n.fileSystem:null}network(e){const n=this.binding(e);return n?n.network:null}_addFilePathBindingPrefixes(e){let n="";for(const t of e.split("/")){n+=t+"/";const e=this._filePathPrefixesToBindingCount.get(n)||0;this._filePathPrefixesToBindingCount.set(n,e+1)}}_removeFilePathBindingPrefixes(e){let n="";for(const t of e.split("/")){n+=t+"/";const e=this._filePathPrefixesToBindingCount.get(n);1===e?this._filePathPrefixesToBindingCount.delete(n):this._filePathPrefixesToBindingCount.set(n,e-1)}}filePathHasBindings(e){return e.endsWith("/")||(e+="/"),this._filePathPrefixesToBindingCount.has(e)}}const _binding=Symbol("Persistence.Binding"),_muteCommit=Symbol("Persistence.MuteCommit"),_muteWorkingCopy=Symbol("Persistence.MuteWorkingCopy");export const NodePrefix="(function (exports, require, module, __filename, __dirname) { ";export const NodeSuffix="\n});";export const NodeShebang="#!/usr/bin/env node";export const Events={BindingCreated:Symbol("BindingCreated"),BindingRemoved:Symbol("BindingRemoved")};export class PathEncoder{constructor(){this._encoder=new Common.CharacterIdMap.CharacterIdMap}encode(e){return e.split("/").map(e=>this._encoder.toChar(e)).join("")}decode(e){return e.split("").map(e=>this._encoder.fromChar(e)).join("/")}}export class PersistenceBinding{constructor(e,n){this.network=e,this.fileSystem=n}}