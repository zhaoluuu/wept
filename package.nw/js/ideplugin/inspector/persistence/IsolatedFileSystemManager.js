import*as Common from"../common/common.js";import*as Host from"../host/host.js";import{IsolatedFileSystem}from"./IsolatedFileSystem.js";import{PlatformFileSystem}from"./PlatformFileSystem.js";let isolatedFileSystemManagerInstance;export class IsolatedFileSystemManager extends Common.ObjectWrapper.ObjectWrapper{constructor(){super(),this._fileSystems=new Map,this._callbacks=new Map,this._progresses=new Map,Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.FileSystemRemoved,this._onFileSystemRemoved,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.FileSystemAdded,e=>{this._onFileSystemAdded(e)},this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.FileSystemFilesChangedAddedRemoved,this._onFileSystemFilesChanged,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.IndexingTotalWorkCalculated,this._onIndexingTotalWorkCalculated,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.IndexingWorked,this._onIndexingWorked,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.IndexingDone,this._onIndexingDone,this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.SearchCompleted,this._onSearchCompleted,this),this._initExcludePatterSetting(),this._fileSystemRequestResolve=null,this._fileSystemsLoadedPromise=this._requestFileSystems()}static instance(e={forceNew:null}){const{forceNew:t}=e;return isolatedFileSystemManagerInstance&&!t||(isolatedFileSystemManagerInstance=new IsolatedFileSystemManager),isolatedFileSystemManagerInstance}_requestFileSystems(){let e;const t=new Promise(t=>{e=t});return Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(Host.InspectorFrontendHostAPI.Events.FileSystemsLoaded,(function(e){const t=e.data,n=[];for(let e=0;e<t.length;++e)n.push(this._innerAddFileSystem(t[e],!1));Promise.all(n).then(s)}),this),Host.InspectorFrontendHost.InspectorFrontendHostInstance.requestFileSystems(),t;function s(t){e(t.filter(e=>!!e))}}addFileSystem(e){return new Promise(t=>{this._fileSystemRequestResolve=t,Host.InspectorFrontendHost.InspectorFrontendHostInstance.addFileSystem(e||"")})}removeFileSystem(e){Host.InspectorFrontendHost.InspectorFrontendHostInstance.removeFileSystem(e.embedderPath())}waitForFileSystems(){return this._fileSystemsLoadedPromise}_innerAddFileSystem(e,t){const s=e.fileSystemPath,n=Common.ParsedURL.ParsedURL.platformPathToURL(e.fileSystemPath);return IsolatedFileSystem.create(this,n,s,e.type,e.fileSystemName,e.rootURL).then(function(e){if(!e)return null;this._fileSystems.set(n,e),t&&this.dispatchEventToListeners(Events.FileSystemAdded,e);return e}.bind(this))}addPlatformFileSystem(e,t){this._fileSystems.set(e,t),this.dispatchEventToListeners(Events.FileSystemAdded,t)}_onFileSystemAdded(e){const t=e.data.errorMessage,s=e.data.fileSystem;if(t){if("<selection cancelled>"!==t&&Common.Console.Console.instance().error(Common.UIString.UIString("Unable to add filesystem: %s",t)),!this._fileSystemRequestResolve)return;this._fileSystemRequestResolve.call(null,null),this._fileSystemRequestResolve=null}else s&&this._innerAddFileSystem(s,!0).then(e=>{this._fileSystemRequestResolve&&(this._fileSystemRequestResolve.call(null,e),this._fileSystemRequestResolve=null)})}_onFileSystemRemoved(e){const t=e.data,s=Common.ParsedURL.ParsedURL.platformPathToURL(t),n=this._fileSystems.get(s);n&&(this._fileSystems.delete(s),n.fileSystemRemoved(),this.dispatchEventToListeners(Events.FileSystemRemoved,n))}_onFileSystemFilesChanged(e){const t={changed:s.call(this,e.data.changed),added:s.call(this,e.data.added),removed:s.call(this,e.data.removed)};function s(e){const t=new Platform.Multimap;for(const s of e){const e=Common.ParsedURL.ParsedURL.platformPathToURL(s);for(const n of this._fileSystems.keys()){if(this._fileSystems.get(n).isFileExcluded(s))continue;const o=n.endsWith("/")?n:n+"/";e.startsWith(o)&&t.set(n,e)}}return t}this.dispatchEventToListeners(Events.FileSystemFilesChanged,t)}fileSystems(){return[...this._fileSystems.values()]}fileSystem(e){return this._fileSystems.get(e)||null}_initExcludePatterSetting(){const e=["/Thumbs.db$","/ehthumbs.db$","/Desktop.ini$","/\\$RECYCLE.BIN/"],t=["/\\.DS_Store$","/\\.Trashes$","/\\.Spotlight-V100$","/\\.AppleDouble$","/\\.LSOverride$","/Icon$","/\\._.*$"],s=["/.*~$"];let n=["/node_modules/","/bower_components/","/\\.devtools","/\\.git/","/\\.sass-cache/","/\\.hg/","/\\.idea/","/\\.svn/","/\\.cache/","/\\.project/"];n=Host.Platform.isWin()?n.concat(e):Host.Platform.isMac()?n.concat(t):n.concat(s);const o=n.join("|");this._workspaceFolderExcludePatternSetting=Common.Settings.Settings.instance().createRegExpSetting("workspaceFolderExcludePattern",o,Host.Platform.isWin()?"i":"")}workspaceFolderExcludePatternSetting(){return this._workspaceFolderExcludePatternSetting}registerCallback(e){const t=++_lastRequestId;return this._callbacks.set(t,e),t}registerProgress(e){const t=++_lastRequestId;return this._progresses.set(t,e),t}_onIndexingTotalWorkCalculated(e){const t=e.data.requestId,s=e.data.totalWork,n=this._progresses.get(t);n&&n.setTotalWork(s)}_onIndexingWorked(e){const t=e.data.requestId,s=e.data.worked,n=this._progresses.get(t);n&&(n.worked(s),n.isCanceled()&&(Host.InspectorFrontendHost.InspectorFrontendHostInstance.stopIndexing(t),this._onIndexingDone(e)))}_onIndexingDone(e){const t=e.data.requestId,s=this._progresses.get(t);s&&(s.done(),this._progresses.delete(t))}_onSearchCompleted(e){const t=e.data.requestId,s=e.data.files,n=this._callbacks.get(t);n&&(n.call(null,s),this._callbacks.delete(t))}}export const Events={FileSystemAdded:Symbol("FileSystemAdded"),FileSystemRemoved:Symbol("FileSystemRemoved"),FileSystemFilesChanged:Symbol("FileSystemFilesChanged"),ExcludedFolderAdded:Symbol("ExcludedFolderAdded"),ExcludedFolderRemoved:Symbol("ExcludedFolderRemoved")};let _lastRequestId=0;export let FileSystem;