import*as Common from"../common/common.js";import*as TextUtils from"../text_utils/text_utils.js";import*as Workspace from"../workspace/workspace.js";import{IsolatedFileSystem}from"./IsolatedFileSystem.js";import{Events,IsolatedFileSystemManager}from"./IsolatedFileSystemManager.js";import{PlatformFileSystem}from"./PlatformFileSystem.js";export class FileSystemWorkspaceBinding{constructor(e,t){this._isolatedFileSystemManager=e,this._workspace=t,this._eventListeners=[this._isolatedFileSystemManager.addEventListener(Events.FileSystemAdded,this._onFileSystemAdded,this),this._isolatedFileSystemManager.addEventListener(Events.FileSystemRemoved,this._onFileSystemRemoved,this),this._isolatedFileSystemManager.addEventListener(Events.FileSystemFilesChanged,this._fileSystemFilesChanged,this)],this._boundFileSystems=new Map,this._isolatedFileSystemManager.waitForFileSystems().then(this._onFileSystemsLoaded.bind(this))}static projectId(e){return e}static relativePath(e){const t=e.project()._fileSystemBaseURL;return e.url().substring(t.length).split("/")}static tooltipForUISourceCode(e){return e.project()._fileSystem.tooltipForURL(e.url())}static fileSystemType(e){return e._fileSystem.type()}static fileSystemSupportsAutomapping(e){return e._fileSystem.supportsAutomapping()}static completeURL(e,t){return e._fileSystemBaseURL+t}static fileSystemPath(e){return e}fileSystemManager(){return this._isolatedFileSystemManager}_onFileSystemsLoaded(e){for(const t of e)this._addFileSystem(t)}_onFileSystemAdded(e){const t=e.data;this._addFileSystem(t)}_addFileSystem(e){const t=new FileSystem(this,e,this._workspace);this._boundFileSystems.set(e.path(),t)}_onFileSystemRemoved(e){const t=e.data;this._boundFileSystems.get(t.path()).dispose(),this._boundFileSystems.delete(t.path())}_fileSystemFilesChanged(e){const t=e.data;for(const e of t.changed.keysArray()){const s=this._boundFileSystems.get(e);s&&t.changed.get(e).forEach(e=>s._fileChanged(e))}for(const e of t.added.keysArray()){const s=this._boundFileSystems.get(e);s&&t.added.get(e).forEach(e=>s._fileChanged(e))}for(const e of t.removed.keysArray()){const s=this._boundFileSystems.get(e);s&&t.removed.get(e).forEach(e=>s.removeUISourceCode(e))}}dispose(){Common.EventTarget.EventTarget.removeEventListeners(this._eventListeners);for(const e of this._boundFileSystems.values())e.dispose(),this._boundFileSystems.delete(e._fileSystem.path())}}export class FileSystem extends Workspace.Workspace.ProjectStore{constructor(e,t,s){const i=t.path(),o=FileSystemWorkspaceBinding.projectId(i);console.assert(!s.project(o));const r=i.substr(i.lastIndexOf("/")+1);super(s,o,Workspace.Workspace.projectTypes.FileSystem,r),this._fileSystem=t,this._fileSystemBaseURL=this._fileSystem.path()+"/",this._fileSystemParentURL=this._fileSystemBaseURL.substr(0,i.lastIndexOf("/")+1),this._fileSystemWorkspaceBinding=e,this._fileSystemPath=i,this._creatingFilesGuard=new Set,s.addProject(this),this.populate()}fileSystemPath(){return this._fileSystemPath}mimeType(e){return this._fileSystem.mimeFromPath(e.url())}initialGitFolders(){return this._fileSystem.initialGitFolders().map(e=>this._fileSystemPath+"/"+e)}_filePathForUISourceCode(e){return e.url().substring(this._fileSystemPath.length)}isServiceProject(){return!1}requestMetadata(e){if(e[_metadata])return e[_metadata];const t=this._filePathForUISourceCode(e),s=this._fileSystem.getMetadata(t).then((function(e){if(!e)return null;return new Workspace.UISourceCode.UISourceCodeMetadata(e.modificationTime,e.size)}));return e[_metadata]=s,s}requestFileBlob(e){return this._fileSystem.requestFileBlob(this._filePathForUISourceCode(e))}requestFileContent(e){const t=this._filePathForUISourceCode(e);return this._fileSystem.requestFileContent(t)}canSetFileContent(){return!0}async setFileContent(e,t,s){const i=this._filePathForUISourceCode(e);await this._fileSystem.setFileContent(i,t,s)}fullDisplayName(e){const t=e.project()._fileSystemParentURL;return e.url().substring(t.length)}canRename(){return!0}rename(e,t,s){if(t===e.name())return void s(!0,e.name(),e.url(),e.contentType());let i=this._filePathForUISourceCode(e);this._fileSystem.renameFile(i,t,function(t,o){if(!t||!o)return void s(!1,o);console.assert(o);const r=i.lastIndexOf("/"),n=i.substring(0,r);i=n+"/"+o,i=i.substr(1);const a=this._fileSystemBaseURL+i,l=this._fileSystem.contentType(o);this.renameUISourceCode(e,o),s(!0,o,a,l)}.bind(this))}async searchInFileContent(e,t,s,i){const o=this._filePathForUISourceCode(e),{content:r}=await this._fileSystem.requestFileContent(o);return r?TextUtils.TextUtils.performSearchInContent(r,t,s,i):[]}async findFilesMatchingSearchRequest(e,t,s){let i=t;const o=e.queries().slice();o.length||o.push(""),s.setTotalWork(o.length);for(const t of o){const o=await this._fileSystem.searchInPath(e.isRegex()?"":t,s);i=i.intersectOrdered(o.sort(),String.naturalOrderComparator),s.worked(1)}return s.done(),i}indexContent(e){this._fileSystem.indexContent(e)}populate(){const e=this._fileSystem.initialFilePaths();(function t(s){const i=Math.min(s+1e3,e.length);for(let t=s;t<i;++t)this._addFile(e[t]);i<e.length&&setTimeout(t.bind(this,i),100)}).call(this,0)}excludeFolder(e){let t=e.substring(this._fileSystemBaseURL.length);t.startsWith("/")||(t="/"+t),t.endsWith("/")||(t+="/"),this._fileSystem.addExcludedFolder(t);const s=this.uiSourceCodes().slice();for(let t=0;t<s.length;++t){const i=s[t];i.url().startsWith(e)&&this.removeUISourceCode(i.url())}}canExcludeFolder(e){return this._fileSystem.canExcludeFolder(e)}canCreateFile(){return!0}async createFile(e,t,s,i){const o=this._fileSystemPath+e+(e.endsWith("/")?"":"/")+t;this._creatingFilesGuard.add(o);const r=await this._fileSystem.createFile(e,t);if(!r)return null;const n=this._addFile(r);return n.setContent(s,!!i),this._creatingFilesGuard.delete(o),n}deleteFile(e){const t=this._filePathForUISourceCode(e);this._fileSystem.deleteFile(t).then(t=>{t&&this.removeUISourceCode(e.url())})}remove(){this._fileSystemWorkspaceBinding._isolatedFileSystemManager.removeFileSystem(this._fileSystem)}_addFile(e){const t=this._fileSystem.contentType(e),s=this.createUISourceCode(this._fileSystemBaseURL+e,t);return this.addUISourceCode(s),s}_fileChanged(e){if(this._creatingFilesGuard.has(e))return;const t=this.uiSourceCodeForURL(e);if(t)t[_metadata]=null,t.checkContentUpdated();else{const t=this._fileSystem.contentType(e);this.addUISourceCode(this.createUISourceCode(e,t))}}tooltipForURL(e){return this._fileSystem.tooltipForURL(e)}dispose(){this.removeProject()}}const _metadata=Symbol("FileSystemWorkspaceBinding.Metadata");export let FilesChangedData;