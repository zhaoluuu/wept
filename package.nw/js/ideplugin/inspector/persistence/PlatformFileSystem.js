import*as Common from"../common/common.js";import*as TextUtils from"../text_utils/text_utils.js";export class PlatformFileSystem{constructor(e,t){this._path=e,this._type=t}getMetadata(e){return Promise.resolve(null)}initialFilePaths(){return[]}initialGitFolders(){return[]}path(){return this._path}embedderPath(){throw new Error("Not implemented")}type(){return this._type}async createFile(e,t){return Promise.resolve(null)}deleteFile(e){return Promise.resolve(!1)}requestFileBlob(e){return Promise.resolve(null)}async requestFileContent(e){return{content:null,error:ls`Unable to read files with this implementation.`,isEncoded:!1}}setFileContent(e,t,r){throw new Error("Not implemented")}renameFile(e,t,r){r(!1)}addExcludedFolder(e){}removeExcludedFolder(e){}fileSystemRemoved(){}isFileExcluded(e){return!1}excludedFolders(){return new Set}searchInPath(e,t){return Promise.resolve([])}indexContent(e){setImmediate(()=>e.done())}mimeFromPath(e){throw new Error("Not implemented")}canExcludeFolder(e){return!1}contentType(e){throw new Error("Not implemented")}tooltipForURL(e){throw new Error("Not implemented")}supportsAutomapping(){throw new Error("Not implemented")}}