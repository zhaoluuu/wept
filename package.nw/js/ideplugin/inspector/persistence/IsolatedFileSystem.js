import*as Common from"../common/common.js";import*as Host from"../host/host.js";import*as TextUtils from"../text_utils/text_utils.js";import{Events,IsolatedFileSystemManager}from"./IsolatedFileSystemManager.js";import{PlatformFileSystem}from"./PlatformFileSystem.js";export class IsolatedFileSystem extends PlatformFileSystem{constructor(e,t,s,r,i){super(t,i),this._manager=e,this._embedderPath=s,this._domFileSystem=r,this._excludedFoldersSetting=Common.Settings.Settings.instance().createLocalSetting("workspaceExcludedFolders",{}),this._excludedFolders=new Set(this._excludedFoldersSetting.get()[t]||[]),this._excludedEmbedderFolders=[],this._initialFilePaths=new Set,this._initialGitFolders=new Set,this._fileLocks=new Map}static create(e,t,s,r,i,o){const n=Host.InspectorFrontendHost.InspectorFrontendHostInstance.isolatedFileSystem(i,o);if(!n)return Promise.resolve(null);const l=new IsolatedFileSystem(e,t,s,n,r);return l._initializeFilePaths().then(()=>l).catch(e=>{console.error(e)})}static errorMessage(e){return Common.UIString.UIString("File system error: %s",e.message)}_serializedFileOperation(e,t){const s=Promise.resolve(this._fileLocks.get(e)).then(()=>t.call(null));return this._fileLocks.set(e,s),s}getMetadata(e){let t;const s=new Promise(e=>{t=e});return this._domFileSystem.root.getFile(e,void 0,(function(e){e.getMetadata(t,r)}),r),s;function r(s){const r=IsolatedFileSystem.errorMessage(s);console.error(r+" when getting file metadata '"+e),t(null)}}initialFilePaths(){return[...this._initialFilePaths]}initialGitFolders(){return[...this._initialGitFolders]}embedderPath(){return this._embedderPath}_initializeFilePaths(){let e;const t=new Promise(t=>{e=t});let s=1;const r=function(t){for(let e=0;e<t.length;++e){const i=t[e];if(i.isDirectory){if(i.fullPath.endsWith("/.git")){const e=i.fullPath.lastIndexOf("/"),t=i.fullPath.substring(1,e);this._initialGitFolders.add(t)}if(this.isFileExcluded(i.fullPath+"/")){this._excludedEmbedderFolders.push(Common.ParsedURL.ParsedURL.urlToPlatformPath(this.path()+i.fullPath,Host.Platform.isWin()));continue}++s,this._requestEntries(i.fullPath,r)}else{if(this.isFileExcluded(i.fullPath))continue;this._initialFilePaths.add(i.fullPath.substr(1))}}0==--s&&e()}.bind(this);return this._requestEntries("",r),t}async _createFoldersIfNotExist(e){let t=await new Promise(t=>this._domFileSystem.root.getDirectory(e,void 0,t,()=>t(null)));if(t)return t;const s=e.split("/");let r="";for(const e of s)if(r=r+"/"+e,t=await this._innerCreateFolderIfNeeded(r),!t)return null;return t}_innerCreateFolderIfNeeded(e){return new Promise(t=>{this._domFileSystem.root.getDirectory(e,{create:!0},e=>t(e),s=>{const r=IsolatedFileSystem.errorMessage(s);console.error(r+" trying to create directory '"+e+"'"),t(null)})})}async createFile(e,t){const s=await this._createFoldersIfNotExist(e);if(!s)return null;const r=await this._serializedFileOperation(e,function t(r,i){return new Promise(o=>{const n=r+(i||"");s.getFile(n,{create:!0,exclusive:!0},o,s=>{if("InvalidModificationError"===s.name)return void o(t.call(this,r,i?i+1:1));const l=IsolatedFileSystem.errorMessage(s);console.error(l+" when testing if file exists '"+this.path()+"/"+e+"/"+n+"'"),o(null)})})}.bind(this,t||"NewFile"));return r?r.fullPath.substr(1):null}deleteFile(e){let t;const s=new Promise(e=>{t=e});return this._domFileSystem.root.getFile(e,void 0,function(e){e.remove(r,i.bind(this))}.bind(this),i.bind(this)),s;function r(){t(!0)}function i(s){const r=IsolatedFileSystem.errorMessage(s);console.error(r+" when deleting file '"+this.path()+"/"+e+"'"),t(!1)}}requestFileBlob(e){return new Promise(t=>{function s(s){if("NotFoundError"===s.name)return void t(null);const r=IsolatedFileSystem.errorMessage(s);console.error(r+" when getting content for file '"+this.path()+"/"+e+"'"),t(null)}this._domFileSystem.root.getFile(e,void 0,e=>{e.file(t,s.bind(this))},s.bind(this))})}requestFileContent(e){return this._serializedFileOperation(e,()=>this._innerRequestFileContent(e))}async _innerRequestFileContent(e){const t=await this.requestFileBlob(e);if(!t)return{content:null,error:ls`Blob could not be loaded.`,isEncoded:!1};const s=new FileReader,r=Common.ParsedURL.ParsedURL.extractExtension(e),i=BinaryExtensions.has(r),o=new Promise(e=>{s.onloadend=e});if(i?s.readAsBinaryString(t):s.readAsText(t),await o,s.error){const t=ls`Can't read file: ${e}: ${s.error}`;return console.error(t),{content:null,isEncoded:!1,error:t}}let n=null,l=null;try{n=s.result}catch(t){n=null,l=ls`Can't read file: ${e}: ${t.message}`}return null==n?(l=l||ls`Unknown error reading file: ${e}`,console.error(l),{content:null,isEncoded:!1,error:l}):{isEncoded:i,content:i?btoa(n):n}}async setFileContent(e,t,s){let r;Host.userMetrics.actionTaken(Host.UserMetrics.Action.FileSavedInWorkspace);function i(e){e.createWriter(o.bind(this),n.bind(this))}async function o(e){let i;e.onerror=n.bind(this),e.onwriteend=function(){e.onwriteend=r,e.truncate(i.size)},i=s?await(await fetch("data:application/octet-stream;base64,"+t)).blob():new Blob([t],{type:"text/plain"}),e.write(i)}function n(t){const s=IsolatedFileSystem.errorMessage(t);console.error(s+" when setting content for file '"+this.path()+"/"+e+"'"),r()}this._serializedFileOperation(e,()=>{const t=new Promise(e=>{r=e});return this._domFileSystem.root.getFile(e,{create:!0},i.bind(this),n.bind(this)),t})}renameFile(e,t,s){if(!(t=t?t.trim():t)||-1!==t.indexOf("/"))return void s(!1);let r,i;function o(e){i=e,i.getFile(t,null,n,l.bind(this))}function n(e){s(!1)}function l(e){"NotFoundError"===e.name?r.moveTo(i,t,a,d.bind(this)):s(!1)}function a(e){s(!0,e.name)}function d(r){const i=IsolatedFileSystem.errorMessage(r);console.error(i+" when renaming file '"+this.path()+"/"+e+"' to '"+t+"'"),s(!1)}this._domFileSystem.root.getFile(e,void 0,function(e){if(e.name===t)return void s(!1);r=e,r.getParent(o.bind(this),d.bind(this))}.bind(this),d.bind(this))}_readDirectory(e,t){const s=e.createReader();let r=[];function i(s){const r=IsolatedFileSystem.errorMessage(s);console.error(r+" when reading directory '"+e.fullPath+"'"),t([])}s.readEntries((function e(o){var n;o.length?(r=r.concat((n=o,Array.prototype.slice.call(n||[],0))),s.readEntries(e,i)):t(r.sort())}),i)}_requestEntries(e,t){this._domFileSystem.root.getDirectory(e,void 0,function(e){this._readDirectory(e,t)}.bind(this),(function(s){const r=IsolatedFileSystem.errorMessage(s);console.error(r+" when requesting entry '"+e+"'"),t([])}))}_saveExcludedFolders(){const e=this._excludedFoldersSetting.get();e[this.path()]=[...this._excludedFolders],this._excludedFoldersSetting.set(e)}addExcludedFolder(e){this._excludedFolders.add(e),this._saveExcludedFolders(),this._manager.dispatchEventToListeners(Events.ExcludedFolderAdded,e)}removeExcludedFolder(e){this._excludedFolders.delete(e),this._saveExcludedFolders(),this._manager.dispatchEventToListeners(Events.ExcludedFolderRemoved,e)}fileSystemRemoved(){const e=this._excludedFoldersSetting.get();delete e[this.path()],this._excludedFoldersSetting.set(e)}isFileExcluded(e){if(this._excludedFolders.has(e))return!0;const t=this._manager.workspaceFolderExcludePatternSetting().asRegExp();return!(!t||!t.test(e))}excludedFolders(){return this._excludedFolders}searchInPath(e,t){return new Promise(s=>{const r=this._manager.registerCallback((function(e){s(e.map(e=>Common.ParsedURL.ParsedURL.platformPathToURL(e))),t.worked(1)}));Host.InspectorFrontendHost.InspectorFrontendHostInstance.searchInPath(r,this._embedderPath,e)})}indexContent(e){e.setTotalWork(1);const t=this._manager.registerProgress(e);Host.InspectorFrontendHost.InspectorFrontendHostInstance.indexPath(t,this._embedderPath,JSON.stringify(this._excludedEmbedderFolders))}mimeFromPath(e){return Common.ResourceType.ResourceType.mimeFromURL(e)||"text/plain"}canExcludeFolder(e){return!!e&&"overrides"!==this.type()}contentType(e){const t=Common.ParsedURL.ParsedURL.extractExtension(e);return _styleSheetExtensions.has(t)?Common.ResourceType.resourceTypes.Stylesheet:_documentExtensions.has(t)?Common.ResourceType.resourceTypes.Document:ImageExtensions.has(t)?Common.ResourceType.resourceTypes.Image:_scriptExtensions.has(t)?Common.ResourceType.resourceTypes.Script:BinaryExtensions.has(t)?Common.ResourceType.resourceTypes.Other:Common.ResourceType.resourceTypes.Document}tooltipForURL(e){const t=Common.ParsedURL.ParsedURL.urlToPlatformPath(e,Host.Platform.isWin()).trimMiddle(150);return ls`Linked to ${t}`}supportsAutomapping(){return"overrides"!==this.type()}}const _styleSheetExtensions=new Set(["css","scss","sass","less"]),_documentExtensions=new Set(["htm","html","asp","aspx","phtml","jsp"]),_scriptExtensions=new Set(["asp","aspx","c","cc","cljs","coffee","cpp","cs","dart","java","js","jsp","jsx","h","m","mjs","mm","py","sh","ts","tsx","ls"]),ImageExtensions=new Set(["jpeg","jpg","svg","gif","webp","png","ico","tiff","tif","bmp"]);export const BinaryExtensions=new Set(["cmd","com","exe","a","ar","iso","tar","bz2","gz","lz","lzma","z","7z","apk","arc","cab","dmg","jar","pak","rar","zip","3gp","aac","aiff","flac","m4a","mmf","mp3","ogg","oga","raw","sln","wav","wma","webm","mkv","flv","vob","ogv","gifv","avi","mov","qt","mp4","m4p","m4v","mpg","mpeg","jpeg","jpg","gif","webp","png","ico","tiff","tif","bmp"]);