import*as Common from"../common/common.js";import*as Platform from"../platform/platform.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{ElementsPanel}from"./ElementsPanel.js";export class ClassesPaneWidget extends UI.Widget.Widget{constructor(){super(!0),this.registerRequiredCSS("elements/classesPaneWidget.css"),this.contentElement.className="styles-element-classes-pane";const t=this.contentElement.createChild("div","title-container");this._input=t.createChild("div","new-class-input monospace"),this.setDefaultFocusedElement(this._input),this._classesContainer=this.contentElement.createChild("div","source-code"),this._classesContainer.classList.add("styles-element-classes-container"),this._prompt=new ClassNamePrompt(this._nodeClasses.bind(this)),this._prompt.setAutocompletionTimeout(0),this._prompt.renderAsBlock();const e=this._prompt.attach(this._input);this._prompt.setPlaceholder(Common.UIString.UIString("Add new class")),this._prompt.addEventListener(UI.TextPrompt.Events.TextChanged,this._onTextChanged,this),e.addEventListener("keydown",this._onKeyDown.bind(this),!1),SDK.SDKModel.TargetManager.instance().addModelListener(SDK.DOMModel.DOMModel,SDK.DOMModel.Events.DOMMutated,this._onDOMMutated,this),this._mutatingNodes=new Set,this._pendingNodeClasses=new Map,this._updateNodeThrottler=new Common.Throttler.Throttler(0),this._previousTarget=null,UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode,this._onSelectedNodeChanged,this)}_splitTextIntoClasses(t){return t.split(/[,\s]/).map(t=>t.trim()).filter(t=>t.length)}_onKeyDown(t){if(!isEnterKey(t)&&!isEscKey(t))return;if(isEnterKey(t)&&(t.consume(),this._prompt.acceptAutoComplete()))return;let e=t.target.textContent;isEscKey(t)&&(Platform.StringUtilities.isWhitespace(e)||t.consume(!0),e=""),this._prompt.clearAutocomplete(),t.target.textContent="";const s=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);if(!s)return;const n=this._splitTextIntoClasses(e);if(!n.length)return void this._installNodeClasses(s);for(const t of n)this._toggleClass(s,t,!0);const o=n.join(" "),i=n.length>1?ls`Classes ${o} added.`:ls`Class ${o} added.`;UI.ARIAUtils.alert(i,this.contentElement),this._installNodeClasses(s),this._update()}_onTextChanged(){const t=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);t&&this._installNodeClasses(t)}_onDOMMutated(t){const e=t.data;this._mutatingNodes.has(e)||(delete e[ClassesPaneWidget._classesSymbol],this._update())}_onSelectedNodeChanged(t){this._previousTarget&&this._prompt.text()&&(this._input.textContent="",this._installNodeClasses(this._previousTarget)),this._previousTarget=t.data,this._update()}wasShown(){this._update()}_update(){if(!this.isShowing())return;let t=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);if(t&&(t=t.enclosingElementOrSelf()),this._classesContainer.removeChildren(),this._input.disabled=!t,!t)return;const e=this._nodeClasses(t),s=[...e.keys()];s.sort(String.caseInsensetiveComparator);for(let t=0;t<s.length;++t){const n=s[t],o=UI.UIUtils.CheckboxLabel.create(n,e.get(n));o.classList.add("monospace"),o.checkboxElement.addEventListener("click",this._onClick.bind(this,n),!1),this._classesContainer.appendChild(o)}}_onClick(t,e){const s=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);if(!s)return;const n=e.target.checked;this._toggleClass(s,t,n),this._installNodeClasses(s)}_nodeClasses(t){let e=t[ClassesPaneWidget._classesSymbol];if(!e){const s=(t.getAttribute("class")||"").split(/\s/);e=new Map;for(let t=0;t<s.length;++t){const n=s[t].trim();n.length&&e.set(n,!0)}t[ClassesPaneWidget._classesSymbol]=e}return e}_toggleClass(t,e,s){this._nodeClasses(t).set(e,s)}_installNodeClasses(t){const e=this._nodeClasses(t),s=new Set;for(const t of e.keys())e.get(t)&&s.add(t);const n=this._splitTextIntoClasses(this._prompt.textWithCurrentSuggestion());for(const t of n)s.add(t);const o=[...s.values()].sort();this._pendingNodeClasses.set(t,o.join(" ")),this._updateNodeThrottler.schedule(this._flushPendingClasses.bind(this))}_flushPendingClasses(){const t=[];for(const s of this._pendingNodeClasses.keys()){this._mutatingNodes.add(s);const n=s.setAttributeValuePromise("class",this._pendingNodeClasses.get(s)).then(e.bind(this,s));t.push(n)}return this._pendingNodeClasses.clear(),Promise.all(t);function e(t){this._mutatingNodes.delete(t)}}}ClassesPaneWidget._classesSymbol=Symbol("ClassesPaneWidget._classesSymbol");export class ButtonProvider{constructor(){this._button=new UI.Toolbar.ToolbarToggle(Common.UIString.UIString("Element Classes"),""),this._button.setText(".cls"),this._button.element.classList.add("monospace"),this._button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._clicked,this),this._view=new ClassesPaneWidget}_clicked(){ElementsPanel.instance().showToolbarPane(this._view.isShowing()?null:this._view,this._button)}item(){return this._button}}export class ClassNamePrompt extends UI.TextPrompt.TextPrompt{constructor(t){super(),this._nodeClasses=t,this.initialize(this._buildClassNameCompletions.bind(this)," "),this.disableDefaultSuggestionForEmptyInput(),this._selectedFrameId="",this._classNamesPromise=null}async _getClassNames(t){const e=[],s=new Set;this._selectedFrameId=t.frameId();const n=t.domModel().cssModel(),o=n.allStyleSheets();for(const t of o){if(t.frameId!==this._selectedFrameId)continue;const o=n.classNamesPromise(t.id).then(t=>{for(const e of t)s.add(e)});e.push(o)}const i=t.domModel().classNamesPromise(t.ownerDocument.id).then(t=>{for(const e of t)s.add(e)});return e.push(i),await Promise.all(e),[...s]}_buildClassNameCompletions(t,e,s){e&&!s||(this._classNamesPromise=null);const n=UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);return n&&(e||s||t.trim())?(this._classNamesPromise&&this._selectedFrameId===n.frameId()||(this._classNamesPromise=this._getClassNames(n)),this._classNamesPromise.then(t=>{const s=this._nodeClasses(n);return t=t.filter(t=>!s.get(t)),"."===e[0]&&(t=t.map(t=>"."+t)),t.filter(t=>t.startsWith(e)).sort().map(t=>({text:t}))})):Promise.resolve([])}}