import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";export class LighthouseController extends Common.ObjectWrapper.ObjectWrapper{constructor(e){super(),e.registerStatusCallback(e=>this.dispatchEventToListeners(Events.AuditProgressChanged,{message:e}));for(const e of Presets)e.setting.addChangeListener(this.recomputePageAuditability.bind(this));SDK.SDKModel.TargetManager.instance().observeModels(SDK.ServiceWorkerManager.ServiceWorkerManager,this),SDK.SDKModel.TargetManager.instance().addEventListener(SDK.SDKModel.Events.InspectedURLChanged,this.recomputePageAuditability,this)}modelAdded(e){this._manager||(this._manager=e,this._serviceWorkerListeners=[this._manager.addEventListener(SDK.ServiceWorkerManager.Events.RegistrationUpdated,this.recomputePageAuditability,this),this._manager.addEventListener(SDK.ServiceWorkerManager.Events.RegistrationDeleted,this.recomputePageAuditability,this)],this.recomputePageAuditability())}modelRemoved(e){this._manager===e&&(Common.EventTarget.EventTarget.removeEventListeners(this._serviceWorkerListeners),this._manager=null,this.recomputePageAuditability())}_hasActiveServiceWorker(){if(!this._manager)return!1;const e=this._manager.target();if(!e)return!1;const t=Common.ParsedURL.ParsedURL.fromString(e.inspectedURL()),s=t&&t.securityOrigin();for(const e of this._manager.registrations().values())if(e.securityOrigin===s)for(const t of e.versions.values())if(t.controlledClients.length>1)return!0;return!1}_hasAtLeastOneCategory(){return Presets.some(e=>e.setting.get())}_unauditablePageMessage(){if(!this._manager)return null;const e=this._manager.target(),t=e&&e.inspectedURL();return t&&!/^(http|chrome-extension)/.test(t)?Common.UIString.UIString("Can only audit HTTP/HTTPS pages and Chrome extensions. Navigate to a different page to start an audit."):null}async _evaluateInspectedURL(){const e=this._manager.target(),t=e.model(SDK.RuntimeModel.RuntimeModel),s=t&&t.defaultExecutionContext();let i=e.inspectedURL();if(!s)return i;try{const e=await s.evaluate({expression:"window.location.href",objectGroup:"lighthouse",includeCommandLineAPI:!1,silent:!1,returnByValue:!0,generatePreview:!1},!1,!1);!e.exceptionDetails&&e.object&&(i=e.object.value,e.object.release())}catch(e){console.error(e)}return i}getFlags(){const e={internalDisableDeviceScreenEmulation:!0};for(const t of RuntimeSettings)t.setFlags(e,t.setting.get());return e}getCategoryIDs(){const e=[];for(const t of Presets)t.setting.get()&&e.push(t.configID);return e}async getInspectedURL(e){return(e&&e.force||!this._inspectedURL)&&(this._inspectedURL=await this._evaluateInspectedURL()),this._inspectedURL}recomputePageAuditability(){const e=this._hasActiveServiceWorker(),t=this._hasAtLeastOneCategory(),s=this._unauditablePageMessage();let i="";e?i=Common.UIString.UIString("Multiple tabs are being controlled by the same service worker. Close your other tabs on the same origin to audit this page."):t?s&&(i=s):i=Common.UIString.UIString("At least one category must be selected."),this.dispatchEventToListeners(Events.PageAuditabilityChanged,{helpText:i})}}export const Presets=[{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_perf",!0),configID:"performance",title:ls`Performance`,description:ls`How long does this app take to show content and become usable`},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_pwa",!0),configID:"pwa",title:ls`Progressive Web App`,description:ls`Does this page meet the standard of a Progressive Web App`},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_best_practices",!0),configID:"best-practices",title:ls`Best practices`,description:ls`Does this page follow best practices for modern web development`},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_a11y",!0),configID:"accessibility",title:ls`Accessibility`,description:ls`Is this page usable by people with disabilities or impairments`},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_seo",!0),configID:"seo",title:ls`SEO`,description:ls`Is this page optimized for search engine results ranking`},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.cat_pubads",!1),plugin:!0,configID:"lighthouse-plugin-publisher-ads",title:ls`Publisher Ads`,description:ls`Is this page optimized for ad speed and quality`}];export const RuntimeSettings=[{setting:Common.Settings.Settings.instance().createSetting("lighthouse.device_type","mobile"),description:ls`Apply mobile emulation during auditing`,setFlags:(e,t)=>{e.emulatedFormFactor=t},options:[{label:ls`Mobile`,value:"mobile"},{label:ls`Desktop`,value:"desktop"}]},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.throttling",!0),title:ls`Simulated throttling`,learnMore:"https://github.com/GoogleChrome/lighthouse/blob/master/docs/throttling.md#devtools-lighthouse-panel-throttling",description:ls`Simulate a slower page load, based on data from an initial unthrottled load. If disabled, the page is actually slowed with applied throttling.`,setFlags:(e,t)=>{e.throttlingMethod=t?"simulate":"devtools"}},{setting:Common.Settings.Settings.instance().createSetting("lighthouse.clear_storage",!0),title:ls`Clear storage`,description:ls`Reset storage (localStorage, IndexedDB, etc) before auditing. (Good for performance & PWA testing)`,setFlags:(e,t)=>{e.disableStorageReset=!t}}];export const Events={PageAuditabilityChanged:Symbol("PageAuditabilityChanged"),AuditProgressChanged:Symbol("AuditProgressChanged"),RequestLighthouseStart:Symbol("RequestLighthouseStart"),RequestLighthouseCancel:Symbol("RequestLighthouseCancel")};export let Preset;export let RuntimeSetting;