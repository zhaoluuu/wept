import*as Common from"../common/common.js";import*as Emulation from"../emulation/emulation.js";import*as HostModule from"../host/host.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";import{Events,LighthouseController}from"./LighthouseController.js";import{ProtocolService}from"./LighthouseProtocolService.js";import{LighthouseReportRenderer,LighthouseReportUIFeatures}from"./LighthouseReportRenderer.js";import{Item,ReportSelector}from"./LighthouseReportSelector.js";import{StartView}from"./LighthouseStartView.js";import{StatusView}from"./LighthouseStatusView.js";export class LighthousePanel extends UI.Panel.Panel{constructor(){super("lighthouse"),this.registerRequiredCSS("third_party/lighthouse/report-assets/report.css"),this.registerRequiredCSS("lighthouse/lighthousePanel.css"),this._protocolService=new ProtocolService,this._controller=new LighthouseController(this._protocolService),this._startView=new StartView(this._controller),this._statusView=new StatusView(this._controller),this._unauditableExplanation=null,this._cachedRenderedReports=new Map,this._dropTarget=new UI.DropTarget.DropTarget(this.contentElement,[UI.DropTarget.Type.File],Common.UIString.UIString("Drop Lighthouse JSON here"),this._handleDrop.bind(this)),this._controller.addEventListener(Events.PageAuditabilityChanged,this._refreshStartAuditUI.bind(this)),this._controller.addEventListener(Events.AuditProgressChanged,this._refreshStatusUI.bind(this)),this._controller.addEventListener(Events.RequestLighthouseStart,t=>{this._startLighthouse(t)}),this._controller.addEventListener(Events.RequestLighthouseCancel,t=>{this._cancelLighthouse()}),this._renderToolbar(),this._auditResultsElement=this.contentElement.createChild("div","lighthouse-results-container"),this._renderStartView(),this._controller.recomputePageAuditability()}_refreshStartAuditUI(t){this._isLHAttached||(this._unauditableExplanation=t.data.helpText,this._startView.setUnauditableExplanation(t.data.helpText),this._startView.setStartButtonEnabled(!t.data.helpText))}_refreshStatusUI(t){this._statusView.updateStatus(t.data.message)}_refreshToolbarUI(){this._clearButton.setEnabled(this._reportSelector.hasItems())}_clearAll(){this._reportSelector.clearAll(),this._renderStartView(),this._refreshToolbarUI()}_renderToolbar(){const t=this.element.createChild("div","lighthouse-toolbar-container"),e=new UI.Toolbar.Toolbar("",t);this._newButton=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Perform an auditâ€¦"),"largeicon-add"),e.appendToolbarItem(this._newButton),this._newButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._renderStartView.bind(this)),e.appendSeparator(),this._reportSelector=new ReportSelector(()=>this._renderStartView()),e.appendToolbarItem(this._reportSelector.comboBox()),this._clearButton=new UI.Toolbar.ToolbarButton(Common.UIString.UIString("Clear all"),"largeicon-clear"),e.appendToolbarItem(this._clearButton),this._clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click,this._clearAll.bind(this)),this._settingsPane=new UI.Widget.HBox,this._settingsPane.show(this.contentElement),this._settingsPane.element.classList.add("lighthouse-settings-pane"),this._settingsPane.element.appendChild(this._startView.settingsToolbar().element),this._showSettingsPaneSetting=Common.Settings.Settings.instance().createSetting("lighthouseShowSettingsToolbar",!1),this._rightToolbar=new UI.Toolbar.Toolbar("",t),this._rightToolbar.appendSeparator(),this._rightToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingToggle(this._showSettingsPaneSetting,"largeicon-settings-gear",ls`Lighthouse settings`)),this._showSettingsPaneSetting.addChangeListener(this._updateSettingsPaneVisibility.bind(this)),this._updateSettingsPaneVisibility(),this._refreshToolbarUI()}_updateSettingsPaneVisibility(){this._settingsPane.element.classList.toggle("hidden",!this._showSettingsPaneSetting.get())}_toggleSettingsDisplay(t){this._rightToolbar.element.classList.toggle("hidden",!t),this._settingsPane.element.classList.toggle("hidden",!t),this._updateSettingsPaneVisibility()}_renderStartView(){this._auditResultsElement.removeChildren(),this._statusView.hide(),this._reportSelector.selectNewReport(),this.contentElement.classList.toggle("in-progress",!1),this._startView.show(this.contentElement),this._toggleSettingsDisplay(!0),this._startView.setUnauditableExplanation(this._unauditableExplanation),this._startView.setStartButtonEnabled(!this._unauditableExplanation),this._unauditableExplanation||this._startView.focusStartButton(),this._newButton.setEnabled(!1),this._refreshToolbarUI(),this.setDefaultFocusedChild(this._startView)}_renderStatusView(t){this.contentElement.classList.toggle("in-progress",!0),this._statusView.setInspectedURL(t),this._statusView.show(this.contentElement)}_beforePrint(){this._statusView.show(this.contentElement),this._statusView.toggleCancelButton(!1),this._statusView.renderText(ls`Printing`,ls`The print popup window is open. Please close it to continue.`)}_afterPrint(){this._statusView.hide(),this._statusView.toggleCancelButton(!0)}_renderReport(t,e){this._toggleSettingsDisplay(!1),this.contentElement.classList.toggle("in-progress",!1),this._startView.hideWidget(),this._statusView.hide(),this._auditResultsElement.removeChildren(),this._newButton.setEnabled(!0),this._refreshToolbarUI();const i=this._cachedRenderedReports.get(t);if(i)return void this._auditResultsElement.appendChild(i);const s=this._auditResultsElement.createChild("div","lh-vars lh-root lh-devtools"),o=new DOM(this._auditResultsElement.ownerDocument),n=new LighthouseReportRenderer(o),r=self.Runtime.cachedResources["third_party/lighthouse/report-assets/templates.html"],a=(new DOMParser).parseFromString(r,"text/html");if(!a)return;n.setTemplateContext(a);const l=n.renderReport(t,s);LighthouseReportRenderer.addViewTraceButton(l,e),this._waitForMainTargetLoad().then(()=>{LighthouseReportRenderer.linkifyNodeDetails(l),LighthouseReportRenderer.linkifySourceLocationDetails(l)}),LighthouseReportRenderer.handleDarkMode(l);const h=new LighthouseReportUIFeatures(o);h.setBeforePrint(this._beforePrint.bind(this)),h.setAfterPrint(this._afterPrint.bind(this)),h.setTemplateContext(a),h.initFeatures(t),this._cachedRenderedReports.set(t,s)}_waitForMainTargetLoad(){return SDK.SDKModel.TargetManager.instance().mainTarget().model(SDK.ResourceTreeModel.ResourceTreeModel).once(SDK.ResourceTreeModel.Events.Load)}_buildReportUI(t,e){if(null===t)return;const i=new Item(t,()=>this._renderReport(t,e),this._renderStartView.bind(this));this._reportSelector.prepend(i),this._refreshToolbarUI(),this._renderReport(t)}_handleDrop(t){const e=t.items;if(!e.length)return;if("file"===e[0].kind){const t=e[0].webkitGetAsEntry();if(!t.isFile)return;t.file(t=>{const e=new FileReader;e.onload=()=>this._loadedFromFile(e.result),e.readAsText(t)})}}_loadedFromFile(t){const e=JSON.parse(t);e.lighthouseVersion&&this._buildReportUI(e)}async _startLighthouse(t){HostModule.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseStarted);try{const e=await this._controller.getInspectedURL({force:!0}),i=this._controller.getCategoryIDs(),s=this._controller.getFlags();await this._setupEmulationAndProtocolConnection(),this._renderStatusView(e);const o=await this._protocolService.startLighthouse(e,i,s);if(o&&o.fatal){const t=new Error(o.message);throw t.stack=o.stack,t}if(!o)throw new Error("Auditing failed to produce a result");HostModule.userMetrics.actionTaken(Host.UserMetrics.Action.LighthouseFinished),await this._resetEmulationAndProtocolConnection(),this._buildReportUI(o.lhr,o.artifacts),this._newButton.element.focus();t.data&&UI.UIUtils.markAsFocusedByKeyboard(this._newButton.element)}catch(t){await this._resetEmulationAndProtocolConnection(),t instanceof Error&&this._statusView.renderBugReport(t)}}async _cancelLighthouse(){this._statusView.updateStatus(ls`Cancelling`),await this._resetEmulationAndProtocolConnection(),this._renderStartView()}async _setupEmulationAndProtocolConnection(){const t=this._controller.getFlags(),e=self.singleton(Emulation.DeviceModeModel.DeviceModeModel);if(this._stateBefore={emulation:{enabled:e.enabledSetting().get(),outlineEnabled:e.deviceOutlineSetting().get(),toolbarControlsEnabled:e.toolbarControlsEnabledSetting().get()},network:{conditions:SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions()}},e.toolbarControlsEnabledSetting().set(!1),"desktop"===t.emulatedFormFactor)e.enabledSetting().set(!1),e.emulate(Emulation.DeviceModeModel.Type.None,null,null);else if("mobile"===t.emulatedFormFactor){e.enabledSetting().set(!0),e.deviceOutlineSetting().set(!0);for(const t of Emulation.EmulatedDevices.EmulatedDevicesList.instance().standard())"Moto G4"===t.title&&e.emulate(Emulation.DeviceModeModel.Type.Device,t,t.modes[0],1)}await this._protocolService.attach(),this._isLHAttached=!0}async _resetEmulationAndProtocolConnection(){if(!this._isLHAttached)return;if(this._isLHAttached=!1,await this._protocolService.detach(),this._stateBefore){const t=self.singleton(Emulation.DeviceModeModel.DeviceModeModel);t.enabledSetting().set(this._stateBefore.emulation.enabled),t.deviceOutlineSetting().set(this._stateBefore.emulation.outlineEnabled),t.toolbarControlsEnabledSetting().set(this._stateBefore.emulation.toolbarControlsEnabled),SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(this._stateBefore.network.conditions),delete this._stateBefore}Emulation.InspectedPagePlaceholder.instance().update(!0);const t=SDK.SDKModel.TargetManager.instance().mainTarget().model(SDK.ResourceTreeModel.ResourceTreeModel),e=await this._controller.getInspectedURL();await t.navigate(e)}}