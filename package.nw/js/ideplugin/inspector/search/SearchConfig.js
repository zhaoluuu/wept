import*as Common from"../common/common.js";import*as Workspace from"../workspace/workspace.js";export class SearchConfig{constructor(e,s,r){this._query=e,this._ignoreCase=s,this._isRegex=r,this._parse()}static fromPlainObject(e){return new SearchConfig(e.query,e.ignoreCase,e.isRegex)}query(){return this._query}ignoreCase(){return this._ignoreCase}isRegex(){return this._isRegex}toPlainObject(){return{query:this.query(),ignoreCase:this.ignoreCase(),isRegex:this.isRegex()}}_parse(){const e=/(\s*(?!-?f(ile)?:)[^\\ ]|\\.)+/,s=e.source+"(\\s+"+e.source+")*",r=["(\\s*"+FilePatternRegex.source+"\\s*)","("+/"([^\\"]|\\.)+"/.source+")","("+s+")"].join("|"),t=new RegExp(r,"g"),i=this._query.match(t)||[];this._fileQueries=[],this._queries=[];for(let e=0;e<i.length;++e){const s=i[e];if(!s)continue;const r=this._parseFileQuery(s);if(r)this._fileQueries.push(r),this._fileRegexQueries=this._fileRegexQueries||[],this._fileRegexQueries.push({regex:new RegExp(r.text,this.ignoreCase?"i":""),isNegative:r.isNegative});else if(this._isRegex)this._queries.push(s);else if(s.startsWith('"')){if(!s.endsWith('"'))continue;this._queries.push(this._parseQuotedQuery(s))}else this._queries.push(this._parseUnquotedQuery(s))}}filePathMatchesFileQuery(e){if(!this._fileRegexQueries)return!0;for(let s=0;s<this._fileRegexQueries.length;++s)if(!!e.match(this._fileRegexQueries[s].regex)===this._fileRegexQueries[s].isNegative)return!1;return!0}queries(){return this._queries}_parseUnquotedQuery(e){return e.replace(/\\(.)/g,"$1")}_parseQuotedQuery(e){return e.substring(1,e.length-1).replace(/\\(.)/g,"$1")}_parseFileQuery(e){const s=e.match(FilePatternRegex);if(!s)return null;const r=!!s[1];e=s[3];let t="";for(let s=0;s<e.length;++s){const r=e[s];if("*"===r)t+=".*";else if("\\"===r){++s;" "===e[s]&&(t+=" ")}else-1!==String.regexSpecialCharacters().indexOf(e.charAt(s))&&(t+="\\"),t+=e.charAt(s)}return new QueryTerm(t,r)}}export const FilePatternRegex=/(-)?f(ile)?:((?:[^\\ ]|\\.)+)/;export class QueryTerm{constructor(e,s){this.text=e,this.isNegative=s}}export class SearchResult{label(){}description(){}matchesCount(){}matchLabel(e){}matchLineContent(e){}matchRevealable(e){}}export class SearchScope{performSearch(e,s,r,t){}performIndexing(e){}stopSearch(){}}export let RegexQuery;