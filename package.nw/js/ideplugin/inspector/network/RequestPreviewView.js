import*as Common from"../common/common.js";import*as SDK from"../sdk/sdk.js";import*as SourceFrame from"../source_frame/source_frame.js";import*as TextUtils from"../text_utils/text_utils.js";import*as UI from"../ui/ui.js";import{RequestHTMLView}from"./RequestHTMLView.js";import{RequestResponseView}from"./RequestResponseView.js";import{SignedExchangeInfoView}from"./SignedExchangeInfoView.js";export class RequestPreviewView extends RequestResponseView{constructor(e){super(e)}async showPreview(){const e=await super.showPreview();if(!(e instanceof UI.View.SimpleView))return e;const t=new UI.Toolbar.Toolbar("network-item-preview-toolbar",this.element);return e.toolbarItems().then(e=>{e.map(e=>t.appendToolbarItem(e))}),e}async _htmlPreview(){const e=await this.request.contentData();if(e.error)return new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString("Failed to load response data"));if(!new Set(["text/html","text/plain","application/xhtml+xml"]).has(this.request.mimeType))return null;const t=e.encoded?window.atob(e.content):e.content,r=await SourceFrame.JSONView.JSONView.createView(t);if(r)return r;const i=TextUtils.ContentProvider.contentAsDataURL(e.content,this.request.mimeType,e.encoded,this.request.charset());return i?new RequestHTMLView(i):null}async createPreview(){if(this.request.signedExchangeInfo())return new SignedExchangeInfoView(this.request);const e=await this._htmlPreview();if(e)return e;const t=await SourceFrame.PreviewFactory.PreviewFactory.createPreview(this.request,this.request.mimeType);return t||new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString("Preview not available"))}}