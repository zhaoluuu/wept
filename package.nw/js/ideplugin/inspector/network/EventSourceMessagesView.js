import*as Common from"../common/common.js";import*as DataGrid from"../data_grid/data_grid.js";import*as Host from"../host/host.js";import*as SDK from"../sdk/sdk.js";import*as UI from"../ui/ui.js";export class EventSourceMessagesView extends UI.Widget.VBox{constructor(e){super(),this.registerRequiredCSS("network/eventSourceMessagesView.css"),this.element.classList.add("event-source-messages-view"),this._request=e;const t=[{id:"id",title:Common.UIString.UIString("Id"),sortable:!0,weight:8},{id:"type",title:Common.UIString.UIString("Type"),sortable:!0,weight:8},{id:"data",title:Common.UIString.UIString("Data"),sortable:!1,weight:88},{id:"time",title:Common.UIString.UIString("Time"),sortable:!0,weight:8}];this._dataGrid=new DataGrid.SortableDataGrid.SortableDataGrid({displayName:ls`Event Source`,columns:t}),this._dataGrid.setStriped(!0),this._dataGrid.setStickToBottom(!0),this._dataGrid.setRowContextMenuCallback(this._onRowContextMenu.bind(this)),this._dataGrid.markColumnAsSortedBy("time",DataGrid.DataGrid.Order.Ascending),this._sortItems(),this._dataGrid.addEventListener(DataGrid.DataGrid.Events.SortingChanged,this._sortItems,this),this._dataGrid.setName("EventSourceMessagesView"),this._dataGrid.asWidget().show(this.element)}wasShown(){this._dataGrid.rootNode().removeChildren();const e=this._request.eventSourceMessages();for(let t=0;t<e.length;++t)this._dataGrid.insertChild(new EventSourceMessageNode(e[t]));this._request.addEventListener(SDK.NetworkRequest.Events.EventSourceMessageAdded,this._messageAdded,this)}willHide(){this._request.removeEventListener(SDK.NetworkRequest.Events.EventSourceMessageAdded,this._messageAdded,this)}_messageAdded(e){const t=e.data;this._dataGrid.insertChild(new EventSourceMessageNode(t))}_sortItems(){const e=this._dataGrid.sortColumnId();if(!e)return;const t=Comparators[e];t&&this._dataGrid.sortNodes(t,!this._dataGrid.isSortOrderAscending())}_onRowContextMenu(e,t){e.clipboardSection().appendItem(Common.UIString.UIString("Copy message"),Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText.bind(Host.InspectorFrontendHost.InspectorFrontendHostInstance,t.data.data))}}export class EventSourceMessageNode extends DataGrid.SortableDataGrid.SortableDataGridNode{constructor(e){const t=new Date(1e3*e.time),s=("0"+t.getHours()).substr(-2)+":"+("0"+t.getMinutes()).substr(-2)+":"+("0"+t.getSeconds()).substr(-2)+"."+("00"+t.getMilliseconds()).substr(-3),o=createElement("div");o.createTextChild(s),o.title=t.toLocaleString(),super({id:e.eventId,type:e.eventName,data:e.data,time:o}),this._message=e}}export function EventSourceMessageNodeComparator(e,t,s){const o=t._message[e],r=s._message[e];return o<r?-1:o>r?1:0}export const Comparators={id:EventSourceMessageNodeComparator.bind(null,"eventId"),type:EventSourceMessageNodeComparator.bind(null,"eventName"),time:EventSourceMessageNodeComparator.bind(null,"time")};