import*as Bindings from"../bindings/bindings.js";import*as SDK from"../sdk/sdk.js";export class LanguageExtensionEndpoint{constructor(e,s,n){this._commands=Extensions.extensionAPI.LanguageExtensionPluginCommands,this._pluginName=e,this._supportedScriptTypes=s,this._port=n,this._port.onmessage=this._onResponse.bind(this),this._nextRequestId=0,this._pendingRequests=new Map}_sendRequest(e,s){return new Promise((n,t)=>{const r=this._nextRequestId++;this._pendingRequests.set(r,{resolve:n,reject:t}),this._port.postMessage({requestId:r,method:e,parameters:s})})}_onResponse({data:{requestId:e,result:s,error:n}}){if(!this._pendingRequests.has(e))return void console.error("No pending request "+e);const{resolve:t,reject:r}=this._pendingRequests.get(e);this._pendingRequests.delete(e),n?r(new Error(n.message)):t(s)}handleScript(e){const s=e.scriptLanguage();return!!s&&!!e.debugSymbols&&s===this._supportedScriptTypes.language&&this._supportedScriptTypes.symbol_types.includes(e.debugSymbols.type)}addRawModule(e,s,n){try{return this._sendRequest(this._commands.AddRawModule,{rawModuleId:e,symbolsURL:s,rawModule:n})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}removeRawModule(e){try{return this._sendRequest(this._commands.RemoveRawModule,{rawModuleId:e})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}sourceLocationToRawLocation(e){try{return this._sendRequest(this._commands.SourceLocationToRawLocation,{sourceLocation:e})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}rawLocationToSourceLocation(e){try{return this._sendRequest(this._commands.RawLocationToSourceLocation,{rawLocation:e})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}listVariablesInScope(e){try{return this._sendRequest(this._commands.ListVariablesInScope,{rawLocation:e})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}evaluateVariable(e,s){try{return this._sendRequest(this._commands.EvaluateVariable,{name:e,location:s})}catch(e){throw new Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginError("EXTENSION_ERROR",e.message)}}dispose(){}}