import*as Common from"../common/common.js";import*as Components from"../components/components.js";import*as Host from"../host/host.js";import*as UI from"../ui/ui.js";export class SettingsScreen extends UI.Widget.VBox{constructor(){super(!0),this.registerRequiredCSS("settings/settingsScreen.css"),this.contentElement.classList.add("settings-window-main"),this.contentElement.classList.add("vbox");const e=createElement("div"),t=UI.Utils.createShadowRootWithCoreStyles(e,"settings/settingsScreen.css").createChild("div","settings-window-title");UI.ARIAUtils.markAsHeading(t,1),t.textContent=ls`Settings`,this._tabbedLocation=UI.ViewManager.ViewManager.instance().createTabbedLocation(()=>SettingsScreen._revealSettingsScreen(),"settings-view");const n=this._tabbedLocation.tabbedPane();if(n.leftToolbar().appendToolbarItem(new UI.Toolbar.ToolbarItem(e)),n.setShrinkableTabs(!1),n.makeVerticalTabLayout(),!Root.Runtime.experiments.isEnabled("customKeyboardShortcuts")){const e=new UI.View.SimpleView(ls`Shortcuts`);self.UI.shortcutsScreen.createShortcutsTabView().show(e.element),this._tabbedLocation.appendView(e)}n.show(this.contentElement),n.selectTab("preferences"),n.addEventListener(UI.TabbedPane.Events.TabInvoked,this._tabInvoked,this),this._reportTabOnReveal=!1}static _revealSettingsScreen(){const e=self.runtime.sharedInstance(SettingsScreen);if(e.isShowing())return e;e._reportTabOnReveal=!0;const t=new UI.Dialog.Dialog;return t.contentElement.tabIndex=-1,t.addCloseButton(),t.setOutsideClickCallback(()=>{}),t.setPointerEventsBehavior(UI.GlassPane.PointerEventsBehavior.PierceGlassPane),t.setOutsideTabIndexBehavior(UI.Dialog.OutsideTabIndexBehavior.PreserveMainViewTabIndex),e.show(t.contentElement),t.show(),e}static async _showSettingsScreen(e={}){const{name:t,focusTabHeader:n}=e,s=SettingsScreen._revealSettingsScreen();s._selectTab(t||"preferences");const i=s._tabbedLocation.tabbedPane();await i.waitForTabElementUpdate(),n?i.focusSelectedTabHeader():i.focus()}resolveLocation(e){return this._tabbedLocation}_selectTab(e){this._tabbedLocation.tabbedPane().selectTab(e,!0)}_tabInvoked(e){const t=e.data;if(!t.isUserGesture)return;const n=t.prevTabId,s=t.tabId;!this._reportTabOnReveal&&n&&n===s||(this._reportTabOnReveal=!1,this._reportSettingsPanelShown(s))}_reportSettingsPanelShown(e){e!==ls`Shortcuts`?Host.userMetrics.settingsPanelShown(e):Host.userMetrics.settingsPanelShown("shortcuts")}}class SettingsTab extends UI.Widget.VBox{constructor(e,t){super(),this.element.classList.add("settings-tab-container"),t&&(this.element.id=t);this.element.createChild("header").createChild("h1").createTextChild(e),this.containerElement=this.element.createChild("div","settings-container-wrapper").createChild("div","settings-tab settings-content settings-container")}_appendSection(e){const t=this.containerElement.createChild("div","settings-block");if(e){UI.ARIAUtils.markAsGroup(t);const n=t.createChild("div","settings-section-title");n.textContent=e,UI.ARIAUtils.markAsHeading(n,2),UI.ARIAUtils.setAccessibleName(t,e)}return t}}export class GenericSettingsTab extends SettingsTab{constructor(){super(Common.UIString.UIString("Preferences"),"preferences-tab-content");const e=["","Appearance","Sources","Elements","Network","Performance","Console","Extensions","Persistence","Debugger","Global"];this._nameToSection=new Map;for(const t of e)this._createSectionElement(t);self.runtime.extensions("setting").forEach(this._addSetting.bind(this)),self.runtime.extensions(UI.SettingsUI.SettingUI).forEach(this._addSettingUI.bind(this)),this._appendSection().appendChild(UI.UIUtils.createTextButton(Common.UIString.UIString("Restore defaults and reload"),(function(){Common.Settings.Settings.instance().clearAll(),Components.Reload.reload()})))}static isSettingVisible(e){const t=e.descriptor();return"title"in t&&"category"in t}_addSetting(e){if(!GenericSettingsTab.isSettingVisible(e))return;const t=this._sectionElement(e.descriptor().category);if(!t)return;const n=Common.Settings.Settings.instance().moduleSetting(e.descriptor().settingName),s=UI.SettingsUI.createControlForSetting(n);s&&t.appendChild(s)}_addSettingUI(e){const t=e.descriptor().category||"";e.instance().then(function(e){const n=e.settingElement();if(n){let e=this._sectionElement(t);e||(e=this._createSectionElement(t)),e.appendChild(n)}}.bind(this))}_createSectionElement(e){const t=e&&Common.UIString.UIString(e),n=this._appendSection(t);return this._nameToSection.set(e,n),n}_sectionElement(e){return this._nameToSection.get(e)||null}}export class ExperimentsSettingsTab extends SettingsTab{constructor(){super(Common.UIString.UIString("Experiments"),"experiments-tab-content");const e=Root.Runtime.experiments.allConfigurableExperiments().sort(),t=e.filter(e=>e.unstable),n=e.filter(e=>!e.unstable);if(n.length){const e=this._appendSection(),t=Common.UIString.UIString("These experiments could be dangerous and may require restart.");e.appendChild(this._createExperimentsWarningSubsection(t));for(const t of n)e.appendChild(this._createExperimentCheckbox(t))}if(t.length){const e=this._appendSection(),n=Common.UIString.UIString("These experiments are particularly unstable. Enable at your own risk.");e.appendChild(this._createExperimentsWarningSubsection(n));for(const n of t)e.appendChild(this._createExperimentCheckbox(n))}}_createExperimentsWarningSubsection(e){const t=createElement("div");t.createChild("span","settings-experiments-warning-subsection-warning").textContent=Common.UIString.UIString("WARNING:"),t.createTextChild(" ");return t.createChild("span","settings-experiments-warning-subsection-message").textContent=e,t}_createExperimentCheckbox(e){const t=UI.UIUtils.CheckboxLabel.create(Common.UIString.UIString(e.title),e.isEnabled()),n=t.checkboxElement;n.name=e.name,n.addEventListener("click",(function(){e.setEnabled(n.checked),Host.userMetrics.experimentChanged(e.name,e.isEnabled()),UI.InspectorView.InspectorView.instance().displayReloadRequiredWarning(ls`One or more settings have changed which requires a reload to take effect.`)}),!1);const s=createElement("p");return s.className=e.unstable&&!e.isEnabled()?"settings-experiment-unstable":"",s.appendChild(t),s}}export class ActionDelegate{handleAction(e,t){let n;switch(t){case"settings.show":return SettingsScreen._showSettingsScreen({focusTabHeader:!0}),!0;case"settings.documentation":return Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(UI.UIUtils.addReferrerToURL("https://developers.google.com/web/tools/chrome-devtools/")),!0;case"settings.shortcuts":return Host.userMetrics.actionTaken(Host.UserMetrics.Action.SettingsOpenedFromMenu),n={name:ls`Shortcuts`,focusTabHeader:!0},Root.Runtime.experiments.isEnabled("customKeyboardShortcuts")&&(n={name:"keybinds",focusTabHeader:!0}),SettingsScreen._showSettingsScreen(n),!0}return!1}}export class Revealer{reveal(e){console.assert(e instanceof Common.Settings.Setting);const t=e;let n=!1;return self.runtime.extensions("setting").forEach((function(e){if(!GenericSettingsTab.isSettingVisible(e))return;e.descriptor().settingName===t.name&&(Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront(),SettingsScreen._showSettingsScreen(),n=!0)})),self.runtime.extensions(UI.SettingsUI.SettingUI).forEach((function(e){const s=e.descriptor().settings;s&&-1!==s.indexOf(t.name)&&(Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront(),SettingsScreen._showSettingsScreen(),n=!0)})),self.runtime.extensions("view").forEach((function(e){if("settings-view"!==e.descriptor().location)return;const s=e.descriptor().settings;s&&-1!==s.indexOf(t.name)&&(Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront(),SettingsScreen._showSettingsScreen({name:e.descriptor().id}),n=!0)})),n?Promise.resolve():Promise.reject()}}