{
  "App": {
    "prefix": "App",
    "body": [
      "App({",
      "",
      "  /**",
      "   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）",
      "   */",
      "  onLaunch: function () {",
      "    $1",
      "  },",
      "",
      "  /**",
      "   * 当小程序启动，或从后台进入前台显示，会触发 onShow",
      "   */",
      "  onShow: function (options) {",
      "    $2",
      "  },",
      "",
      "  /**",
      "   * 当小程序从前台进入后台，会触发 onHide",
      "   */",
      "  onHide: function () {",
      "    $3",
      "  },",
      "",
      "  /**",
      "   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息",
      "   */",
      "  onError: function (msg) {",
      "    $4",
      "  }",
      "})",
      ""
    ],
    "description": "Contruct an App instance. App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。"
  },
  "Page": {
    "prefix": "Page",
    "body": [
      "Page({",
      "",
      "  /**",
      "   * 页面的初始数据",
      "   */",
      "  data: {",
      "    $1",
      "  },",
      "",
      "  /**",
      "   * 生命周期函数--监听页面加载",
      "   */",
      "  onLoad: function (options) {",
      "    $2",
      "  },",
      "",
      "  /**",
      "   * 生命周期函数--监听页面初次渲染完成",
      "   */",
      "  onReady: function () {",
      "    $3",
      "  },",
      "",
      "  /**",
      "   * 生命周期函数--监听页面显示",
      "   */",
      "  onShow: function () {",
      "    $4",
      "  },",
      "",
      "  /**",
      "   * 生命周期函数--监听页面隐藏",
      "   */",
      "  onHide: function () {",
      "    $5",
      "  },",
      "",
      "  /**",
      "   * 生命周期函数--监听页面卸载",
      "   */",
      "  onUnload: function () {",
      "    $6",
      "  },",
      "",
      "  /**",
      "   * 页面相关事件处理函数--监听用户下拉动作",
      "   */",
      "  onPullDownRefresh: function () {",
      "    $7",
      "  },",
      "",
      "  /**",
      "   * 页面上拉触底事件的处理函数",
      "   */",
      "  onReachBottom: function () {",
      "    $8",
      "  },",
      "",
      "  /**",
      "   * 用户点击右上角分享",
      "   */",
      "  onShareAppMessage: function () {",
      "    $9",
      "  }",
      "})"
    ],
    "description": "Contruct a Page instance. Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。"
  },
  "batchGetStorageSync": {
    "prefix": "batchGetStorageSync",
    "body": [
      "wx.batchGetStorageSync([$1])"
    ],
    "description": "/** [Array.&lt;any&gt; wx.batchGetStorageSync(Array.&lt;string&gt; keyList)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchGetStorageSync.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：不支持\n*\n* 从本地缓存中同步批量获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  var valueList = wx.batchGetStorageSync(['key'])\n  if (valueList) {\n    // Do something with return value\n  }\n} catch (e) {\n  // Do something when catch error\n}\n```\n*\n* ****\n*\n* 对于多个key的读取, 批量读取在性能上优于多次getStorageSync读取 */",
    "detail": "function",
    "kind": 9
  },
  "base64ToArrayBuffer": {
    "prefix": "base64ToArrayBuffer",
    "body": [
      "wx.base64ToArrayBuffer('${1:base64}')"
    ],
    "description": "/** [ArrayBuffer wx.base64ToArrayBuffer(string base64)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.base64ToArrayBuffer.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：支持\n         * @deprecated 基础库版本 [2.4.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 将 Base64 字符串转成 ArrayBuffer 对象 */",
    "detail": "function",
    "kind": 9
  },
  "getAccountInfoSync": {
    "prefix": "getAccountInfoSync",
    "body": [
      "wx.getAccountInfoSync()"
    ],
    "description": "/** [Object wx.getAccountInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/account-info/wx.getAccountInfoSync.html)\n*\n* 需要基础库： `2.2.2`\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 获取当前帐号信息。线上小程序版本号仅支持在正式版小程序中获取，开发版和体验版中无法获取。\n*\n* **示例代码**\n*\n* ```js\nconst accountInfo = wx.getAccountInfoSync();\nconsole.log(accountInfo.miniProgram.appId) // 小程序 appId\nconsole.log(accountInfo.plugin.appId) // 插件 appId\nconsole.log(accountInfo.plugin.version) // 插件版本号， 'a.b.c' 这样的形式\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getAppAuthorizeSetting": {
    "prefix": "getAppAuthorizeSetting",
    "body": [
      "wx.getAppAuthorizeSetting()"
    ],
    "description": "/** [Object wx.getAppAuthorizeSetting()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getAppAuthorizeSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取微信APP授权设置\n*\n* **示例代码**\n*\n* ```js\nconst appAuthorizeSetting = wx.getAppAuthorizeSetting()\n\nconsole.log(appAuthorizeSetting.albumAuthorized)\nconsole.log(appAuthorizeSetting.bluetoothAuthorized)\nconsole.log(appAuthorizeSetting.cameraAuthorized)\nconsole.log(appAuthorizeSetting.locationAuthorized)\nconsole.log(appAuthorizeSetting.locationReducedAccuracy)\nconsole.log(appAuthorizeSetting.microphoneAuthorized)\nconsole.log(appAuthorizeSetting.notificationAlertAuthorized)\nconsole.log(appAuthorizeSetting.notificationAuthorized)\nconsole.log(appAuthorizeSetting.notificationBadgeAuthorized)\nconsole.log(appAuthorizeSetting.notificationSoundAuthorized)\nconsole.log(appAuthorizeSetting.phoneCalendarAuthorized)\n```\n*\n* **返回值说明**\n*\n* `'authorized'` 表示已经获得授权，无需再次请求授权；\n* `'denied'` 表示请求授权被拒绝，无法再次请求授权；（此情况需要引导用户[打开系统设置](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openAppAuthorizeSetting.html)，在设置页中打开权限）\n* `'non determined'` 表示尚未请求授权，会在微信下一次调用系统相应权限时请求；（仅 iOS 会出现。此种情况下引导用户打开系统设置，不展示开关） */",
    "detail": "function",
    "kind": 9
  },
  "getAppBaseInfo": {
    "prefix": "getAppBaseInfo",
    "body": [
      "wx.getAppBaseInfo()"
    ],
    "description": "/** [Object wx.getAppBaseInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getAppBaseInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取微信APP基础信息\n*\n* **示例代码**\n*\n* ```js\nconst appBaseInfo = wx.getAppBaseInfo()\n\nconsole.log(appBaseInfo.SDKVersion)\nconsole.log(appBaseInfo.enableDebug)\nconsole.log(appBaseInfo.host)\nconsole.log(appBaseInfo.language)\nconsole.log(appBaseInfo.version)\nconsole.log(appBaseInfo.theme)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBatteryInfoSync": {
    "prefix": "getBatteryInfoSync",
    "body": [
      "wx.getBatteryInfoSync()"
    ],
    "description": "/** [Object wx.getBatteryInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * [wx.getBatteryInfo](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html) 的同步版本 */",
    "detail": "function",
    "kind": 9
  },
  "getDeviceInfo": {
    "prefix": "getDeviceInfo",
    "body": [
      "wx.getDeviceInfo()"
    ],
    "description": "/** [Object wx.getDeviceInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getDeviceInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取设备基础信息\n*\n* **示例代码**\n*\n* ```js\nconst deviceInfo = wx.getDeviceInfo()\n\nconsole.log(deviceInfo.abi)\nconsole.log(deviceInfo.benchmarkLevel)\nconsole.log(deviceInfo.brand)\nconsole.log(deviceInfo.model)\nconsole.log(deviceInfo.platform)\nconsole.log(deviceInfo.system)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getEnterOptionsSync": {
    "prefix": "getEnterOptionsSync",
    "body": [
      "wx.getEnterOptionsSync()"
    ],
    "description": "/** [Object wx.getEnterOptionsSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getEnterOptionsSync.html)\n         *\n         * 需要基础库： `2.9.4`\n         *\n         * 在插件中使用：需要基础库 `2.9.4`\n         *\n         * 获取本次小程序启动时的参数。如果当前是冷启动，则返回值与 [`App.onLaunch`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object) 的回调参数一致；如果当前是热启动，则返回值与 [`App.onShow`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object) 一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无 `referrerInfo` 的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "getExptInfoSync": {
    "prefix": "getExptInfoSync",
    "body": [
      "wx.getExptInfoSync([$1])"
    ],
    "description": "/** [Object wx.getExptInfoSync(Array.&lt;string&gt; keys)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.getExptInfoSync.html)\n         *\n         * 需要基础库： `2.17.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 给定实验参数数组，获取对应的实验参数值\n         *\n         * **提示**\n         *\n         * 假设实验参数有 `color`, `size`\n         * 调用 wx.getExptInfoSync() 会返回 `{color:'#fff',size:20}` 类似的结果\n         * 而 wx.getExptInfoSync(['color']) 则只会返回 `{color:'#fff'}` */",
    "detail": "function",
    "kind": 9
  },
  "getExtConfigSync": {
    "prefix": "getExtConfigSync",
    "body": [
      "wx.getExtConfigSync()"
    ],
    "description": "/** [Object wx.getExtConfigSync()](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* [wx.getExtConfig](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html) 的同步版本。\n*\n* **Tips**\n*\n* 1. 本接口暂时无法通过 [wx.canIUse](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html) 判断是否兼容，开发者需要自行判断 [wx.getExtConfigSync](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html) 是否存在来兼容\n*\n* ****\n*\n* ```js\nlet extConfig = wx.getExtConfigSync? wx.getExtConfigSync(): {}\nconsole.log(extConfig)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getLaunchOptionsSync": {
    "prefix": "getLaunchOptionsSync",
    "body": [
      "wx.getLaunchOptionsSync()"
    ],
    "description": "/** [Object wx.getLaunchOptionsSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：需要基础库 `2.9.4`\n         *\n         * 获取小程序启动时的参数。与 [`App.onLaunch`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onlaunchobject-object) 的回调参数一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         * | 1069   | 移动应用                    | 来源App |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无`referrerInfo`的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "getMenuButtonBoundingClientRect": {
    "prefix": "getMenuButtonBoundingClientRect",
    "body": [
      "wx.getMenuButtonBoundingClientRect()"
    ],
    "description": "/** [Object wx.getMenuButtonBoundingClientRect()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。\n*\n* **示例代码**\n*\n* ```js\nconst res = wx.getMenuButtonBoundingClientRect()\n\nconsole.log(res.width)\nconsole.log(res.height)\nconsole.log(res.top)\nconsole.log(res.right)\nconsole.log(res.bottom)\nconsole.log(res.left)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSkylineInfoSync": {
    "prefix": "getSkylineInfoSync",
    "body": [
      "wx.getSkylineInfoSync()"
    ],
    "description": "/** [Object wx.getSkylineInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSkylineInfoSync.html)\n         *\n         * 需要基础库： `2.26.2`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 获取当前运行环境对于 [Skyline 渲染引擎](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 的支持情况 */",
    "detail": "function",
    "kind": 9
  },
  "getStorageInfoSync": {
    "prefix": "getStorageInfoSync",
    "body": [
      "wx.getStorageInfoSync()"
    ],
    "description": "/** [Object wx.getStorageInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfoSync.html)\n*\n* 在插件中使用：不支持\n*\n* [wx.getStorageInfo](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.getStorageInfo({\n  success (res) {\n    console.log(res.keys)\n    console.log(res.currentSize)\n    console.log(res.limitSize)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getStorageInfoSync()\n  console.log(res.keys)\n  console.log(res.currentSize)\n  console.log(res.limitSize)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSystemInfoSync": {
    "prefix": "getSystemInfoSync",
    "body": [
      "wx.getSystemInfoSync()"
    ],
    "description": "/** [Object wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* [wx.getSystemInfo](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfo.html) 的同步版本\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfo({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getSystemInfoSync()\n  console.log(res.model)\n  console.log(res.pixelRatio)\n  console.log(res.windowWidth)\n  console.log(res.windowHeight)\n  console.log(res.language)\n  console.log(res.version)\n  console.log(res.platform)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSystemSetting": {
    "prefix": "getSystemSetting",
    "body": [
      "wx.getSystemSetting()"
    ],
    "description": "/** [Object wx.getSystemSetting()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取设备设置\n*\n* **示例代码**\n*\n* ```js\nconst systemSetting = wx.getSystemSetting()\n\nconsole.log(systemSetting.bluetoothEnabled)\nconsole.log(systemSetting.deviceOrientation)\nconsole.log(systemSetting.locationEnabled)\nconsole.log(systemSetting.wifiEnabled)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getWindowInfo": {
    "prefix": "getWindowInfo",
    "body": [
      "wx.getWindowInfo()"
    ],
    "description": "/** [Object wx.getWindowInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getWindowInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取窗口信息\n*\n* **示例代码**\n*\n* ```js\nconst windowInfo = wx.getWindowInfo()\n\nconsole.log(windowInfo.pixelRatio)\nconsole.log(windowInfo.screenWidth)\nconsole.log(windowInfo.screenHeight)\nconsole.log(windowInfo.windowWidth)\nconsole.log(windowInfo.windowHeight)\nconsole.log(windowInfo.statusBarHeight)\nconsole.log(windowInfo.safeArea)\nconsole.log(windowInfo.screenTop)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getRendererUserAgent": {
    "prefix": "getRendererUserAgent",
    "body": [
      "wx.getRendererUserAgent({",
      "  success: (userAgent) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [Promise<string> wx.getRendererUserAgent(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getRendererUserAgent.html)\n*\n* 需要基础库： `2.26.3`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取 Webview 小程序的 UserAgent\n*\n* **示例代码**\n*\n* ```js\n// v2.30.4 前，仅支持 promise 风格调用\nwx.getRendererUserAgent().then(userAgent => console.log(userAgent))\n// v2.30.4 起，除 promise 风格调用外，也支持 invoke 风格使用\nwx.getRendererUserAgent({\n  success(res) { console.log(res.userAgent) }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createAnimation": {
    "prefix": "createAnimation",
    "body": [
      "wx.createAnimation({",
      "  delay: ${1:0},",
      "  duration: ${2:0},",
      "  timingFunction: ${3:timingFunction},",
      "  transformOrigin: '${4:transformOrigin}',",
      "})"
    ],
    "description": "/** [[Animation](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html) wx.createAnimation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/wx.createAnimation.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建一个动画实例 [animation](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html)。调用实例的方法来描述动画。最后通过动画实例的 export 方法导出动画数据传递给组件的 animation 属性。 */",
    "detail": "function",
    "kind": 9
  },
  "createAudioContext": {
    "prefix": "createAudioContext",
    "body": [
      "wx.createAudioContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[AudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html) wx.createAudioContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createAudioContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         * @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n         *\n         * 创建 [audio](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html) 上下文 [AudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "getBackgroundAudioManager": {
    "prefix": "getBackgroundAudioManager",
    "body": [
      "wx.getBackgroundAudioManager()"
    ],
    "description": "/** [[BackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html) wx.getBackgroundAudioManager()](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取**全局唯一**的背景音频管理器。\n         * 小程序切入后台，如果音频处于播放状态，可以继续播放。但是后台状态不能通过调用API操纵音频的播放状态。\n         *\n         * 从微信客户端6.7.2版本开始，若需要在小程序切后台后继续播放音频，需要在 [app.json](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html) 中配置 `requiredBackgroundModes` 属性。开发版和体验版上可以直接生效，正式版还需通过审核。 */",
    "detail": "function",
    "kind": 9
  },
  "createCacheManager": {
    "prefix": "createCacheManager",
    "body": [
      "wx.createCacheManager({",
      "  extra: {",
      "    apiList: [$1],",
      "  },",
      "  maxAge: ${3:0},",
      "  mode: ${4:mode},",
      "  origin: '${5:origin}',",
      "})"
    ],
    "description": "/** [[CacheManager](https://developers.weixin.qq.com/miniprogram/dev/api/storage/cachemanager/CacheManager.html) wx.createCacheManager(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/cachemanager/wx.createCacheManager.html)\n*\n* 需要基础库： `2.24.0`\n*\n* 在插件中使用：不支持\n*\n* 创建缓存管理器\n*\n* **示例代码**\n*\n* <a href=\"https://github.com/wechat-miniprogram/miniprogram-offline-demo\" target=\"_blank\">查看完整示例代码</a>\n*\n* ```js\nconst cacheManager = createCacheManager()\ncacheManager.addRule(/https:\\/\\/(?:.*)/ig) // 表示所有 https 请求都匹配\n\ncacheManager.on('request', evt => {\n // 在弱网时接收到 wx.request 请求\n return new Promise((resolve, reject) => {\n   const matchRes = cm.match(evt)\n   if (matchRes && matchRes.data) {\n     // 有缓存，返回\n     resolve(matchRes.data)\n   } else {\n     // 没缓存，抛错\n     reject({ errMsg: 'no cache' })\n   }\n })\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createCameraContext": {
    "prefix": "createCameraContext",
    "body": [
      "wx.createCameraContext()"
    ],
    "description": "/** [[CameraContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html) wx.createCameraContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/wx.createCameraContext.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [camera](https://developers.weixin.qq.com/miniprogram/dev/component/camera.html) 上下文 [CameraContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "createCanvasContext": {
    "prefix": "createCanvasContext",
    "body": [
      "wx.createCanvasContext('${1:canvasId}', ${2:component})"
    ],
    "description": "/** [[CanvasContext](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html) wx.createCanvasContext(string canvasId, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         * @deprecated 基础库版本 [2.9.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [Canvas](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.html) 替换\n         *\n         * 创建 canvas 的绘图上下文 [CanvasContext](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html) 对象 */",
    "detail": "function",
    "kind": 9
  },
  "downloadFile": {
    "prefix": "downloadFile",
    "body": [
      "wx.downloadFile({",
      "  url: '${1:url}',",
      "  filePath: '${2:filePath}',",
      "  header: ${3:header},",
      "  timeout: ${4:0},",
      "  success: (result) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [[DownloadTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.html) wx.downloadFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/download/wx.downloadFile.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 下载文件资源到本地。客户端直接发起一个 HTTPS GET 请求，返回文件的本地临时路径 (本地路径)，单次下载允许的最大文件为 200MB。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* 注意：请在服务端响应的 header 中指定合理的 `Content-Type` 字段，以保证客户端正确处理文件类型。\n*\n* **示例代码**\n*\n* ```js\nwx.downloadFile({\n  url: 'https://example.com/audio/123', //仅为示例，并非真实的资源\n  success (res) {\n    // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容\n    if (res.statusCode === 200) {\n      wx.playVoice({\n        filePath: res.tempFilePath\n      })\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getFileSystemManager": {
    "prefix": "getFileSystemManager",
    "body": [
      "wx.getFileSystemManager()"
    ],
    "description": "/** [[FileSystemManager](https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.html) wx.getFileSystemManager()](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html)\n         *\n         * 需要基础库： `1.9.9`\n         *\n         * 在插件中使用：需要基础库 `2.19.2`\n         *\n         * 获取全局唯一的文件管理器 */",
    "detail": "function",
    "kind": 9
  },
  "createInferenceSession": {
    "prefix": "createInferenceSession",
    "body": [
      "wx.createInferenceSession({",
      "  model: '${1:model}',",
      "  allowNPU: ${2:true},",
      "  allowQuantize: ${3:true},",
      "  precesionLevel: ${4:precesionLevel},",
      "  typicalShape: ${5:typicalShape},",
      "})"
    ],
    "description": "/** [[InferenceSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/InferenceSession.html) wx.createInferenceSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/wx.createInferenceSession.html)\n*\n* 需要基础库： `2.30.0`\n*\n* 在插件中使用：需要基础库 `2.30.0`\n*\n* 创建 AI 推理 Session。使用前可参考[AI指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/inference/tutorial.html)\n*\n* **示例代码**\n*\n* ```js\n// 创建会话，加载模型\nconst session = wx.createInferenceSession({\n  model: `${wx.env.USER_DATA_PATH}/MNIST.onnx`,\n  precisionLevel: 4,\n  typicalShape:{input1:[1, 3, 224, 224], input2:[1, 1, 224, 224]},  //除非使用动态轴，一般不用显式指定\n  allowNPU: false,\n  allowQuantize: false\n})\n\n// 监听error事件\nsession.onError(err => {\n  console.error(err)\n})\n\n// 监听模型加载完成事件\nsession.onLoad(() => {\n  // 运行推理\n  // 其中input1, input2, output0 必须与使用的onnx模型中实际的输入输出名字完全一致，不可随意填写。\n  // 模型输入输出信息可以通过Netron 打开onnx模型看到\n  session.run({\n    input1: {\n      type: 'float32',\n      data: new Float32Array(3 * 224 * 224).buffer,\n      shape: [1, 3, 224, 224] // NCHW 顺序\n    },\n    // 多个input的添加方法，假设第二个input需要数据类型为uint8\n    input2: {\n      type: 'uint8',\n      data: new Uint8Array(224 * 224).buffer,\n      shape: [1, 1, 224, 224]\n    },\n  }).then(res => {\n    console.log(res.output0)\n  })\n})\n\n// 销毁Session\n// session完成创建后可以多次调用run进行推理，直到调用`session.destroy()`释放相关内存。\n\n// 销毁会话\nsession.destroy()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createInnerAudioContext": {
    "prefix": "createInnerAudioContext",
    "body": [
      "wx.createInnerAudioContext({",
      "  useWebAudioImplement: ${1:true},",
      "})"
    ],
    "description": "/** [[InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) wx.createInnerAudioContext(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 创建内部 [audio](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html) 上下文 [InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) 对象。\n*\n* **示例代码**\n*\n* ```js\nconst innerAudioContext = wx.createInnerAudioContext({\n  useWebAudioImplement: false // 是否使用 WebAudio 作为底层音频驱动，默认关闭。对于短音频、播放频繁的音频建议开启此选项，开启后将获得更优的性能表现。由于开启此选项后也会带来一定的内存增长，因此对于长音频建议关闭此选项\n})\ninnerAudioContext.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46'\n\ninnerAudioContext.play() // 播放\n\ninnerAudioContext.pause() // 暂停\n\ninnerAudioContext.stop() // 停止\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createIntersectionObserver": {
    "prefix": "createIntersectionObserver",
    "body": [
      "wx.createIntersectionObserver(${1:component}, {",
      "  initialRatio: ${2:0},",
      "  observeAll: ${3:true},",
      "  thresholds: [$4],",
      "})"
    ],
    "description": "/** [[IntersectionObserver](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.html) wx.createIntersectionObserver(Object component, Object options)](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createIntersectionObserver.html)\n         *\n         * 需要基础库： `1.9.3`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建并返回一个 IntersectionObserver 对象实例。在自定义组件或包含自定义组件的页面中，应使用 `this.createIntersectionObserver([options])` 来代替。\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/LAbMxkmI7F2A) */",
    "detail": "function",
    "kind": 9
  },
  "createInterstitialAd": {
    "prefix": "createInterstitialAd",
    "body": [
      "wx.createInterstitialAd({",
      "  adUnitId: '${1:adUnitId}',",
      "})"
    ],
    "description": "/** [[InterstitialAd](https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.html) wx.createInterstitialAd(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createInterstitialAd.html)\n         *\n         * 需要基础库： `2.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.1`\n         *\n         * 创建插屏广告组件。请通过 [wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html) 返回对象的 SDKVersion 判断基础库版本号后再使用该 API。每次调用该方法创建插屏广告都会返回一个全新的实例（小程序端的插屏广告实例不允许跨页面使用）。 */",
    "detail": "function",
    "kind": 9
  },
  "createLivePlayerContext": {
    "prefix": "createLivePlayerContext",
    "body": [
      "wx.createLivePlayerContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[LivePlayerContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html) wx.createLivePlayerContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePlayerContext.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [live-player](https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html) 上下文 [LivePlayerContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "createLivePusherContext": {
    "prefix": "createLivePusherContext",
    "body": [
      "wx.createLivePusherContext()"
    ],
    "description": "/** [[LivePusherContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html) wx.createLivePusherContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePusherContext.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [live-pusher](https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html) 上下文 [LivePusherContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "getLogManager": {
    "prefix": "getLogManager",
    "body": [
      "wx.getLogManager({",
      "  level: ${1:0},",
      "})"
    ],
    "description": "/** [[LogManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.html) wx.getLogManager(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getLogManager.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：不支持\n*\n* 获取日志管理器对象。\n*\n* **示例代码**\n*\n* ```js\nconst logger = wx.getLogManager({level: 1})\nlogger.log({str: 'hello world'}, 'basic log', 100, [1, 2, 3])\nlogger.info({str: 'hello world'}, 'info log', 100, [1, 2, 3])\nlogger.debug({str: 'hello world'}, 'debug log', 100, [1, 2, 3])\nlogger.warn({str: 'hello world'}, 'warn log', 100, [1, 2, 3])\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createMapContext": {
    "prefix": "createMapContext",
    "body": [
      "wx.createMapContext('${1:mapId}', ${2:component})"
    ],
    "description": "/** [[MapContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html) wx.createMapContext(string mapId, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/wx.createMapContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [map](https://developers.weixin.qq.com/miniprogram/dev/component/map.html) 上下文 [MapContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "createMediaAudioPlayer": {
    "prefix": "createMediaAudioPlayer",
    "body": [
      "wx.createMediaAudioPlayer()"
    ],
    "description": "/** [[MediaAudioPlayer](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/MediaAudioPlayer.html) wx.createMediaAudioPlayer()](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createMediaAudioPlayer.html)\n*\n* 需要基础库： `2.13.0`\n*\n* 在插件中使用：支持\n*\n* 创建媒体音频播放器对象 [MediaAudioPlayer](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/MediaAudioPlayer.html) 对象，可用于播放视频解码器 [VideoDecoder](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/VideoDecoder.html) 输出的音频。\n*\n* **示例代码**\n*\n* ```js\n  // 创建视频解码器，具体参数见 createVideoDecoder 文档\n  const videoDecoder = wx.createVideoDecoder()\n  // 创建媒体音频播放器\n  const mediaAudioPlayer = wx.createMediaAudioPlayer()\n  // 启动视频解码器\n  videoDecoder.start()\n  // 启动播放器\n  mediaAudioPlayer.start().then(() => {\n    // 添加播放器音频来源\n    mediaAudioPlayer.addAudioSource(videoDecoder).then(res => {\n      videoDecoder.getFrameData() // 建议在 requestAnimationFrame 里获取每一帧视频数据\n      console.log(res)\n    })\n\n    // 移除播放器音频来源\n    mediaAudioPlayer.removeAudioSource(videoDecoder).then()\n    // 停止播放器\n    mediaAudioPlayer.stop().then()\n    // 销毁播放器\n    mediaAudioPlayer.destroy().then()\n    // 设置播放器音量\n    mediaAudioPlayer.volume = 0.5\n  })\n```\n*\n* **完整demo（小游戏）**\n*\n* - https://developers.weixin.qq.com/s/SF2duHmb7MjI */",
    "detail": "function",
    "kind": 9
  },
  "createMediaContainer": {
    "prefix": "createMediaContainer",
    "body": [
      "wx.createMediaContainer()"
    ],
    "description": "/** [[MediaContainer](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-processing/MediaContainer.html) wx.createMediaContainer()](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-processing/wx.createMediaContainer.html)\n         *\n         * 需要基础库： `2.9.0`\n         *\n         * 在插件中使用：需要基础库 `2.10.0`\n         *\n         * 创建音视频处理容器，最终可将容器中的轨道合成一个视频 */",
    "detail": "function",
    "kind": 9
  },
  "createMediaRecorder": {
    "prefix": "createMediaRecorder",
    "body": [
      "wx.createMediaRecorder(${1:canvas}, {",
      "  duration: ${2:0},",
      "  fps: ${3:0},",
      "  gop: ${4:0},",
      "  videoBitsPerSecond: ${5:0},",
      "})"
    ],
    "description": "/** [[MediaRecorder](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/MediaRecorder.html) wx.createMediaRecorder(Object canvas, Object options)](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/wx.createMediaRecorder.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：需要基础库 `2.11.0`\n*\n* 创建 WebGL 画面录制器，可逐帧录制在 WebGL 上渲染的画面并导出视频文件\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/MCz3kPmC7zpa)\n*\n* **低版本异步接口兼容**\n*\n* 对基础库 2.16.1 版本前的 mediaRecorder，所有的接口都没有返回 Promise 对象，若需要兼容低版本，则可采用如下方式的写法：\n* ```javascript\n// 启动 mediaRecorder\nawait new Promise(resolve => {\n  recorder.on('start', resolve)\n  recorder.start()\n})\n\n// 逐帧绘制\nwhile (frames--) {\n  await new Promise(resolve => recorder.requestFrame(resolve))\n  render()\n}\n\n// 绘制完成，生成视频\nconst {tempFilePath} = await new Promise(resolve => {\n  recorder.on('stop', resolve)\n  recorder.stop()\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getNFCAdapter": {
    "prefix": "getNFCAdapter",
    "body": [
      "wx.getNFCAdapter()"
    ],
    "description": "/** [[NFCAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/NFCAdapter.html) wx.getNFCAdapter()](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.getNFCAdapter.html)\n         *\n         * 需要基础库： `2.11.2`\n         *\n         * 在插件中使用：需要基础库 `2.11.2`\n         *\n         * 获取 NFC 实例\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/1WsbDwmb75ig) */",
    "detail": "function",
    "kind": 9
  },
  "createOffscreenCanvas": {
    "prefix": "createOffscreenCanvas",
    "body": [
      "wx.createOffscreenCanvas({",
      "  compInst: ${1:compInst},",
      "  height: ${2:0},",
      "  type: ${3:type},",
      "  width: ${4:0},",
      "})"
    ],
    "description": "/** [[OffscreenCanvas](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/OffscreenCanvas.html) wx.createOffscreenCanvas(object object, number width, number height, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createOffscreenCanvas.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：需要基础库 `2.16.1`\n         *\n         * 创建离屏 canvas 实例\n         *\n         * **离屏 Canvas 类型不可混用**\n         *\n         * 由于 webgl canvas 和 2d canvas 的底层实现方式不同，因此必须要在调用 `wx.createOffscreenCanvas` 时提前指定类型。\n         *\n         * 指定类型后，离屏 canvas `getContext(type)` 调用不允许混用，如不能对 webgl canvas 调用 `getContext('2d')`。\n         *\n         * 同样的，不同类型 canvas 调用 `createImage` 创建的图片对象也不支持混用，使用时请注意尽量使用 canvas 自身的 `createImage` 创建图片对象。\n         *\n         * **与 MediaRecorder 结合**\n         *\n         * 离屏 webgl canvas 支持作为参数传递给 [`wx.createMediaRecorder`](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/wx.createMediaRecorder.html), 离屏 2d canvas 暂不支持。\n         *\n         * **旧版 createOffscreenCanvas**\n         *\n         * 旧版函数签名为 `wx.createOffscreenCanvas(width: number, height: number, this: object): OffscreenCanvas`，从基础库 2.7.0 开始支持\n         *\n         * 从基础库 2.16.1 开始改为 `wx.createOffscreenCanvas(options: object): OffscreenCanvas`，向下兼容旧版入参。\n         * 但需注意旧版入参只能创建 webgl 类型，如需创建 2d 类型则必须使用新版。 */",
    "detail": "function",
    "kind": 9
  },
  "getPerformance": {
    "prefix": "getPerformance",
    "body": [
      "wx.getPerformance()"
    ],
    "description": "/** [[Performance](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/Performance.html) wx.getPerformance()](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.getPerformance.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：支持\n*\n* 获取当前小程序性能相关的信息。关于小程序启动性能优化的更多内容，请参考[启动性能指南](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start.html)。\n*\n* ****\n*\n* 目前支持获取以下几类性能指标，具体内容请参考 [PerformanceEntry](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/PerformanceEntry.html)：\n*\n* | 指标类型（entryType） | 指标名称          | 最低版本 ｜\n* | ------------------- | ---------------- | ------ |\n* | 路由（navigation）   | route: 路由性能 | |\n* | 路由（navigation）   | appLaunch: 小程序启动耗时 | |\n* | 渲染（render）       | firstRender: 页面首次渲染耗时 | |\n* | 渲染（render）       | firstPaint: 页面首次绘制 | <2.21.2> |\n* | 渲染（render）       | firstContentfulPaint: 页面首次内容绘制 |  <2.21.2> |\n* | 渲染（render）       | largestContentfulPaint: 页面最大内容绘制 | <2.23.1> |\n* | 脚本（script）       | evaluateScript: 注入脚本耗时  | |\n* | 包加载（loadPackage）| downloadPackage: 代码包下载耗时  | <2.24.0> |\n* | 资源（resource）     | resourceTiming: 视图层资源加载耗时  | <2.24.0> |\n*\n* **示例代码**\n*\n* ```js\nconst performance = wx.getPerformance()\nconst observer = performance.createObserver((entryList) => {\n  console.log(entryList.getEntries())\n})\nobserver.observe({ entryTypes: ['render', 'script', 'navigation'] })\n```\n*\n* **注意**\n*\n* - 目前，当开启代码 [按需注入](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/lazyload.html) 时，`evaluateScript` 将仅包含公有部分代码（2.21.2 开始会区分公共部分/页面和组件的部分），页面和组件的代码注入的时间会包含在 `firstRender` 中（因为页面和组件的代码注入过程成为了首次渲染过程的一部分）。因此开启按需注入后，脚本耗时降低，渲染时间提高属于正常现象，优化效果可以关注整体启动耗时（`appLaunch`）来评估。\n* - firstPaint 和 firstContentfulPaint 指标在开启 vConsole 的情况下，由于绘制 vConsole 面板，会导致数据提前。 */",
    "detail": "function",
    "kind": 9
  },
  "preDownloadSubpackage": {
    "prefix": "preDownloadSubpackage",
    "body": [
      "wx.preDownloadSubpackage({",
      "  complete: ${1:complete},",
      "  fail: ${2:fail},",
      "  packageType: '${3:packageType}',",
      "  success: ${4:success},",
      "})"
    ],
    "description": "/** [[PreDownloadSubpackageTask](https://developers.weixin.qq.com/miniprogram/dev/api/base/subpackage/PreDownloadSubpackageTask.html) wx.preDownloadSubpackage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/subpackage/wx.preDownloadSubpackage.html)\n*\n* 需要基础库： `2.27.3`\n*\n* 在插件中使用：不支持\n*\n* 触发分包预下载。\n*\n* **示例代码**\n*\n* ```js\n// 首先要在 app.json / game.json 中配置workers作为分包\n{\n  \"workers\": {\n    \"path\": \"myWorkersFolder\",\n    \"isSubpackage\": true  // true 表示把 worker 打包为分包。默认 false。填 false 时等同于 { \"workers\": \"workers\" }\n  }\n}\n```\n* ```js\n// 然后调用 wx.preDownloadSubpackage 下载 worker 分包，下载成功后才可以创建 worker\nvar task = wx.preDownloadSubpackage({\n  packageType: \"workers\",\n  success(res) {\n    console.log(\"load worker success\", res)\n    wx.createWorker(\"myWorkersFolder/request/index.js\")   // 创建 worker。 如果 worker 分包没下载完就调 createWorker 的话将报错\n  },\n  fail(res) {\n    console.log(\"load worker fail\", res)\n  }\n})\n\ntask.onProgressUpdate(res => {\n  console.log(res.progress) // 可通过 onProgressUpdate 接口监听下载进度\n  console.log(res.totalBytesWritten)\n  console.log(res.totalBytesExpectedToWrite)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getRealtimeLogManager": {
    "prefix": "getRealtimeLogManager",
    "body": [
      "wx.getRealtimeLogManager()"
    ],
    "description": "/** [[RealtimeLogManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.html) wx.getRealtimeLogManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getRealtimeLogManager.html)\n*\n* 需要基础库： `2.7.1`\n*\n* 在插件中使用：需要基础库 `2.16.0`\n*\n* 获取实时日志管理器对象。\n*\n* **示例代码**\n*\n* ```js\n// 小程序端\nconst logger = wx.getRealtimeLogManager()\nlogger.info({str: 'hello world'}, 'info log', 100, [1, 2, 3])\nlogger.error({str: 'hello world'}, 'error log', 100, [1, 2, 3])\nlogger.warn({str: 'hello world'}, 'warn log', 100, [1, 2, 3])\n\n// 插件端，基础库 2.16.0 版本后支持，只允许采用 key-value 的新格式上报\nconst logManager = wx.getRealtimeLogManager()\nconst logger = logManager.tag('plugin-log1')\nlogger.info('key1', 'value1')\nlogger.error('key2', {str: 'value2'})\nlogger.warn('key3', 'value3')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getRecorderManager": {
    "prefix": "getRecorderManager",
    "body": [
      "wx.getRecorderManager()"
    ],
    "description": "/** [[RecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.html) wx.getRecorderManager()](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.94`\n         *\n         * 获取**全局唯一**的录音管理器 RecorderManager */",
    "detail": "function",
    "kind": 9
  },
  "request": {
    "prefix": "request",
    "body": [
      "wx.request({",
      "  url: '${1:url}',",
      "  data: ${2:data},",
      "  dataType: ${3:dataType},",
      "  enableCache: ${4:true},",
      "  enableChunked: ${5:true},",
      "  enableHttp2: ${6:true},",
      "  enableHttpDNS: ${7:true},",
      "  enableQuic: ${8:true},",
      "  forceCellularNetwork: ${9:true},",
      "  header: ${10:header},",
      "  httpDNSServiceId: '${11:httpDNSServiceId}',",
      "  method: ${12:method},",
      "  responseType: ${13:responseType},",
      "  timeout: ${14:0},",
      "  success: (result) => {$15},",
      "  fail: (err) => {$16},",
      "  complete: (res) => {$17},",
      "})"
    ],
    "description": "/** [[RequestTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.html) wx.request(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 发起 HTTPS 网络请求。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **data 参数说明**\n*\n* 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：\n* - 对于 `GET` 方法的数据，会将数据转换成 query string（`encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...`）\n* - 对于 `POST` 方法且 `header['content-type']` 为 `application/json` 的数据，会对数据进行 JSON 序列化\n* - 对于 `POST` 方法且 `header['content-type']` 为 `application/x-www-form-urlencoded` 的数据，会将数据转换成 query string `（encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）`\n*\n* **示例代码**\n*\n* ```js\nwx.request({\n  url: 'example.php', //仅为示例，并非真实的接口地址\n  data: {\n    x: '',\n    y: ''\n  },\n  header: {\n    'content-type': 'application/json' // 默认值\n  },\n  success (res) {\n    console.log(res.data)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createRewardedVideoAd": {
    "prefix": "createRewardedVideoAd",
    "body": [
      "wx.createRewardedVideoAd({",
      "  adUnitId: '${1:adUnitId}',",
      "  multiton: ${2:true},",
      "})"
    ],
    "description": "/** [[RewardedVideoAd](https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.html) wx.createRewardedVideoAd(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createRewardedVideoAd.html)\n         *\n         * 需要基础库： `2.0.4`\n         *\n         * 在插件中使用：需要基础库 `2.8.1`\n         *\n         * 创建激励视频广告组件。请通过 [wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html) 返回对象的 SDKVersion 判断基础库版本号后再使用该 API（小游戏端要求 >= 2.0.4， 小程序端要求 >= 2.6.0）。调用该方法创建的激励视频广告是一个单例（小游戏端是全局单例，小程序端是页面内单例，在小程序端的单例对象不允许跨页面使用）。 */",
    "detail": "function",
    "kind": 9
  },
  "createSelectorQuery": {
    "prefix": "createSelectorQuery",
    "body": [
      "wx.createSelectorQuery()"
    ],
    "description": "/** [[SelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html) wx.createSelectorQuery()](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 `this.createSelectorQuery()` 来代替。\n*\n* **示例代码**\n*\n* ```js\nconst query = wx.createSelectorQuery()\nquery.select('#the-id').boundingClientRect()\nquery.selectViewport().scrollOffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "connectSocket": {
    "prefix": "connectSocket",
    "body": [
      "wx.connectSocket({",
      "  url: '${1:url}',",
      "  forceCellularNetwork: ${2:true},",
      "  header: ${3:header},",
      "  perMessageDeflate: ${4:true},",
      "  protocols: [$5],",
      "  tcpNoDelay: ${6:true},",
      "  timeout: ${7:0},",
      "  success: (res) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [[SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) wx.connectSocket(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.connectSocket.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 创建一个 WebSocket 连接。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **并发数**\n*\n* - 1.7.0 及以上版本，最多可以同时存在 5 个 WebSocket 连接。\n* - 1.7.0 以下版本，一个小程序同时只能有一个 WebSocket 连接，如果当前已存在一个 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。\n*\n* **示例代码**\n*\n* ```js\nwx.connectSocket({\n  url: 'wss://example.qq.com',\n  header:{\n    'content-type': 'application/json'\n  },\n  protocols: ['protocol1']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createTCPSocket": {
    "prefix": "createTCPSocket",
    "body": [
      "wx.createTCPSocket()"
    ],
    "description": "/** [[TCPSocket](https://developers.weixin.qq.com/miniprogram/dev/api/network/tcp/TCPSocket.html) wx.createTCPSocket()](https://developers.weixin.qq.com/miniprogram/dev/api/network/tcp/wx.createTCPSocket.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：支持\n         *\n         * 创建一个 TCP Socket 实例。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n         *\n         * **连接限制**\n         *\n         * - 允许与局域网内的非本机 IP 通信\n         * - 允许与配置过的服务器域名通信，详见[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)\n         * - 禁止与以下端口号连接：`1024 以下` `1099` `1433` `1521` `1719` `1720` `1723` `2049` `2375` `3128` `3306` `3389` `3659` `4045` `5060` `5061` `5432` `5984` `6379` `6000` `6566` `7001` `7002` `8000-8100` `8443` `8888` `9200` `9300` `10051` `10080` `11211` `27017` `27018` `27019`\n         * - 每 5 分钟内最多创建 20 个 TCPSocket */",
    "detail": "function",
    "kind": 9
  },
  "createUDPSocket": {
    "prefix": "createUDPSocket",
    "body": [
      "wx.createUDPSocket()"
    ],
    "description": "/** [[UDPSocket](https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.html) wx.createUDPSocket()](https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/wx.createUDPSocket.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.1`\n         *\n         * 创建一个 UDP Socket 实例。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。 */",
    "detail": "function",
    "kind": 9
  },
  "getUpdateManager": {
    "prefix": "getUpdateManager",
    "body": [
      "wx.getUpdateManager()"
    ],
    "description": "/** [[UpdateManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html) wx.getUpdateManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html)\n         *\n         * 需要基础库： `1.9.90`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取**全局唯一**的版本更新管理器，用于管理小程序更新。关于小程序的更新机制，可以查看[运行机制](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html)文档。\n         *\n         * **示例代码**\n         *\n         * [示例代码](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html#示例代码) */",
    "detail": "function",
    "kind": 9
  },
  "uploadFile": {
    "prefix": "uploadFile",
    "body": [
      "wx.uploadFile({",
      "  filePath: '${1:filePath}',",
      "  name: '${2:name}',",
      "  url: '${3:url}',",
      "  formData: ${4:formData},",
      "  header: ${5:header},",
      "  timeout: ${6:0},",
      "  success: (result) => {$7},",
      "  fail: (res) => {$8},",
      "  complete: (res) => {$9},",
      "})"
    ],
    "description": "/** [[UploadTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.html) wx.uploadFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将本地资源上传到服务器。客户端发起一个 HTTPS POST 请求，其中 `content-type` 为 `multipart/form-data`。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseImage({\n  success (res) {\n    const tempFilePaths = res.tempFilePaths\n    wx.uploadFile({\n      url: 'https://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址\n      filePath: tempFilePaths[0],\n      name: 'file',\n      formData: {\n        'user': 'test'\n      },\n      success (res){\n        const data = res.data\n        //do something\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getUserCryptoManager": {
    "prefix": "getUserCryptoManager",
    "body": [
      "wx.getUserCryptoManager()"
    ],
    "description": "/** [[UserCryptoManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/crypto/UserCryptoManager.html) wx.getUserCryptoManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/crypto/wx.getUserCryptoManager.html)\n         *\n         * 需要基础库： `2.17.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取用户加密模块 */",
    "detail": "function",
    "kind": 9
  },
  "createVKSession": {
    "prefix": "createVKSession",
    "body": [
      "wx.createVKSession({",
      "  track: {",
      "    plane: {",
      "      mode: ${1:mode},",
      "    },",
      "    OCR: {",
      "      mode: ${3:mode},",
      "    },",
      "    OSD: ${5:true},",
      "    body: {",
      "      mode: ${6:mode},",
      "    },",
      "    face: {",
      "      mode: ${8:mode},",
      "    },",
      "    hand: {",
      "      mode: ${10:mode},",
      "    },",
      "    marker: ${12:true},",
      "    threeDof: ${13:true},",
      "  },",
      "  gl: ${15:gl},",
      "  version: ${16:version},",
      "})"
    ],
    "description": "/** [[VKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/VKSession.html) wx.createVKSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html)\n*\n* 需要基础库： `2.20.0`\n*\n* 在插件中使用：需要基础库 `2.20.0`\n*\n* 创建 vision kit 会话对象。\n*\n* **示例代码**\n*\n* v1 版本：[VisionKit基础能力使用参考](https://github.com/wechat-miniprogram/miniprogram-demo/tree/master/miniprogram/packageAPI/pages/ar/visionkit-basic)\n* v2 版本：[VisionKit-v2基础能力使用参考](https://github.com/wechat-miniprogram/miniprogram-demo/tree/master/miniprogram/packageAPI/pages/ar/visionkit-basic-v2)\n* ```js\n// 以下 demo 以 v2 为例\n// 创建 session 对象\nconst ssession = wx.createVKSession({\n  track: {\n    plane: {mode: 3},\n  },\n  version: 'v2',\n  gl, // WebGLRenderingContext\n})\n\n// 逐帧分析\nconst onFrame = timestamp => {\n  // 开发者可以自己控制帧率\n  const frame = session.getVKFrame(canvasWidth, canvasHeight)\n    if (frame) {\n      // 分析完毕，可以拿到帧对象\n      doRender(frame)\n    }\n\n  session.requestAnimationFrame(onFrame)\n}\nsession.start(err => {\n  if (!err) session.requestAnimationFrame(onFrame)\n})\n\n// 渲染函数\nconst doRender = frame => {\n  // ...\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createVideoContext": {
    "prefix": "createVideoContext",
    "body": [
      "wx.createVideoContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[VideoContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html) wx.createVideoContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.createVideoContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [video](https://developers.weixin.qq.com/miniprogram/dev/component/video.html) 上下文 [VideoContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "createVideoDecoder": {
    "prefix": "createVideoDecoder",
    "body": [
      "wx.createVideoDecoder()"
    ],
    "description": "/** [[VideoDecoder](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/VideoDecoder.html) wx.createVideoDecoder()](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/wx.createVideoDecoder.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 创建视频解码器，可逐帧获取解码后的数据 */",
    "detail": "function",
    "kind": 9
  },
  "createWebAudioContext": {
    "prefix": "createWebAudioContext",
    "body": [
      "wx.createWebAudioContext()"
    ],
    "description": "/** [[WebAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/WebAudioContext.html) wx.createWebAudioContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createWebAudioContext.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 创建 WebAudio 上下文。 */",
    "detail": "function",
    "kind": 9
  },
  "createWorker": {
    "prefix": "createWorker",
    "body": [
      "wx.createWorker('${1:scriptPath}', {",
      "  useExperimentalWorker: ${2:true},",
      "})"
    ],
    "description": "/** [[Worker](https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.html) wx.createWorker(string scriptPath, object options)](https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html)\n*\n* 需要基础库： `1.9.90`\n*\n* 在插件中使用：需要基础库 `2.18.1`\n*\n* 创建一个 Worker 线程\n*\n* **示例代码**\n*\n* ```js\n// 创建普通worker\nwx.createWorker('workers/index.js')\n```\n* ```js\nfunction createNewWorker() {\n  const worker = wx.createWorker('workers/index.js', {\n    useExperimentalWorker: true\n  })\n  // 监听worker被系统回收事件\n  worker.onProcessKilled(() => {\n    // 重新创建一个worker\n    createNewWorker()\n  })\n}\n// 创建实验worker\ncreateNewWorker()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getStorageSync": {
    "prefix": "getStorageSync",
    "body": [
      "wx.getStorageSync('${1:key}')"
    ],
    "description": "/** [any wx.getStorageSync(string key)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中同步获取指定 key 的内容。\n*\n* **注意**\n*\n* storage 应只用来进行数据的持久化存储，不应用于运行时的数据传递或全局状态管理。启动过程中过多的同步读写存储，会显著影响启动耗时。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  var value = wx.getStorageSync('key')\n  if (value) {\n    // Do something with return value\n  }\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "canIUse": {
    "prefix": "canIUse",
    "body": [
      "wx.canIUse('${1:schema}')"
    ],
    "description": "/** [boolean wx.canIUse(string schema)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html)\n*\n* 需要基础库： `1.1.1`\n*\n* 在插件中使用：不支持\n*\n* 判断小程序的API，回调，参数，组件等是否在当前版本可用。\n*\n* **参数说明**\n*\n* - `${API}` 代表 API 名字\n* - `${method}` 代表调用方式，有效值为return, success, object, callback\n* - `${param}` 代表参数或者返回值\n* - `${option}` 代表参数的可选值或者返回值的属性\n* - `${component}` 代表组件名字\n* - `${attribute}` 代表组件属性\n* - `${option}` 代表组件属性的可选值\n*\n* **示例代码**\n*\n* ```js\n// 对象的属性或方法\nwx.canIUse('console.log')\nwx.canIUse('CameraContext.onCameraFrame')\nwx.canIUse('CameraFrameListener.start')\nwx.canIUse('Image.src')\n\n// wx接口参数、回调或者返回值\nwx.canIUse('openBluetoothAdapter')\nwx.canIUse('getSystemInfoSync.return.safeArea.left')\nwx.canIUse('getSystemInfo.success.screenWidth')\nwx.canIUse('showToast.object.image')\nwx.canIUse('onCompassChange.callback.direction')\nwx.canIUse('request.object.method.GET')\n\n// 组件的属性\nwx.canIUse('live-player')\nwx.canIUse('text.selectable')\nwx.canIUse('button.open-type.contact')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "checkIsPictureInPictureActive": {
    "prefix": "checkIsPictureInPictureActive",
    "body": [
      "wx.checkIsPictureInPictureActive()"
    ],
    "description": "/** [boolean wx.checkIsPictureInPictureActive()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.checkIsPictureInPictureActive.html)\n         *\n         * 需要基础库： `2.29.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 返回当前是否存在小窗播放（小窗在 video/live-player/live-pusher 下可用） */",
    "detail": "function",
    "kind": 9
  },
  "isVKSupport": {
    "prefix": "isVKSupport",
    "body": [
      "wx.isVKSupport(${1:version})"
    ],
    "description": "/** [boolean wx.isVKSupport(string version)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.isVKSupport.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：需要基础库 `2.22.0`\n*\n* 判断支持版本\n*\n* **示例代码**\n*\n* ```js\nconst isSupportV2 = wx.isVKSupport('v2')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "arrayBufferToBase64": {
    "prefix": "arrayBufferToBase64",
    "body": [
      "wx.arrayBufferToBase64(${1:arrayBuffer})"
    ],
    "description": "/** [string wx.arrayBufferToBase64(ArrayBuffer arrayBuffer)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.arrayBufferToBase64.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：支持\n         * @deprecated 基础库版本 [2.4.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 将 ArrayBuffer 对象转成 Base64 字符串 */",
    "detail": "function",
    "kind": 9
  },
  "createBufferURL": {
    "prefix": "createBufferURL",
    "body": [
      "wx.createBufferURL(${1:buffer})"
    ],
    "description": "/** [string wx.createBufferURL(ArrayBuffer|TypedArray buffer)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.createBufferURL.html)\n         *\n         * 需要基础库： `2.14.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 根据传入的 buffer 创建一个唯一的 URL 存在内存中 */",
    "detail": "function",
    "kind": 9
  },
  "addCard": {
    "prefix": "addCard",
    "body": [
      "wx.addCard({",
      "  cardList: [$1],",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.addCard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.addCard.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 批量添加卡券。只有通过 [认证](https://developers.weixin.qq.com/miniprogram/product/renzheng.html) 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 [微信卡券接口文档](https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1490190158&version=1&lang=zh_CN&platform=2)。\n*\n* **cardExt 说明**\n*\n* cardExt 是卡券的扩展参数，其值是一个 JSON 字符串。\n*\n* **示例代码**\n*\n* ```js\nwx.addCard({\n  cardList: [\n    {\n      cardId: '',\n      cardExt: '{\"code\": \"\", \"openid\": \"\", \"timestamp\": \"\", \"signature\":\"\"}'\n    }, {\n      cardId: '',\n      cardExt: '{\"code\": \"\", \"openid\": \"\", \"timestamp\": \"\", \"signature\":\"\"}'\n    }\n  ],\n  success (res) {\n    console.log(res.cardList) // 卡券添加结果\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "addFileToFavorites": {
    "prefix": "addFileToFavorites",
    "body": [
      "wx.addFileToFavorites({",
      "  filePath: '${1:filePath}',",
      "  fileName: '${2:fileName}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.addFileToFavorites(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/favorites/wx.addFileToFavorites.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 收藏文件 */",
    "detail": "function",
    "kind": 9
  },
  "addPhoneCalendar": {
    "prefix": "addPhoneCalendar",
    "body": [
      "wx.addPhoneCalendar({",
      "  startTime: ${1:0},",
      "  title: '${2:title}',",
      "  alarm: ${3:true},",
      "  alarmOffset: ${4:0},",
      "  allDay: ${5:true},",
      "  description: '${6:description}',",
      "  endTime: '${7:endTime}',",
      "  location: '${8:location}',",
      "  success: (res) => {$9},",
      "  fail: (res) => {$10},",
      "  complete: (res) => {$11},",
      "})"
    ],
    "description": "/** [wx.addPhoneCalendar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/calendar/wx.addPhoneCalendar.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 向系统日历添加事件 */",
    "detail": "function",
    "kind": 9
  },
  "addPhoneContact": {
    "prefix": "addPhoneContact",
    "body": [
      "wx.addPhoneContact({",
      "  firstName: '${1:firstName}',",
      "  addressCity: '${2:addressCity}',",
      "  addressCountry: '${3:addressCountry}',",
      "  addressPostalCode: '${4:addressPostalCode}',",
      "  addressState: '${5:addressState}',",
      "  addressStreet: '${6:addressStreet}',",
      "  email: '${7:email}',",
      "  homeAddressCity: '${8:homeAddressCity}',",
      "  homeAddressCountry: '${9:homeAddressCountry}',",
      "  homeAddressPostalCode: '${10:homeAddressPostalCode}',",
      "  homeAddressState: '${11:homeAddressState}',",
      "  homeAddressStreet: '${12:homeAddressStreet}',",
      "  homeFaxNumber: '${13:homeFaxNumber}',",
      "  homePhoneNumber: '${14:homePhoneNumber}',",
      "  hostNumber: '${15:hostNumber}',",
      "  lastName: '${16:lastName}',",
      "  middleName: '${17:middleName}',",
      "  mobilePhoneNumber: '${18:mobilePhoneNumber}',",
      "  nickName: '${19:nickName}',",
      "  organization: '${20:organization}',",
      "  photoFilePath: '${21:photoFilePath}',",
      "  remark: '${22:remark}',",
      "  title: '${23:title}',",
      "  url: '${24:url}',",
      "  weChatNumber: '${25:weChatNumber}',",
      "  workAddressCity: '${26:workAddressCity}',",
      "  workAddressCountry: '${27:workAddressCountry}',",
      "  workAddressPostalCode: '${28:workAddressPostalCode}',",
      "  workAddressState: '${29:workAddressState}',",
      "  workAddressStreet: '${30:workAddressStreet}',",
      "  workFaxNumber: '${31:workFaxNumber}',",
      "  workPhoneNumber: '${32:workPhoneNumber}',",
      "  success: (res) => {$33},",
      "  fail: (res) => {$34},",
      "  complete: (res) => {$35},",
      "})"
    ],
    "description": "/** [wx.addPhoneContact(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 添加手机通讯录联系人。用户可以选择将该表单以「新增联系人」或「添加到已有联系人」的方式，写入手机系统通讯录。 */",
    "detail": "function",
    "kind": 9
  },
  "addPhoneRepeatCalendar": {
    "prefix": "addPhoneRepeatCalendar",
    "body": [
      "wx.addPhoneRepeatCalendar({",
      "  startTime: ${1:0},",
      "  title: '${2:title}',",
      "  alarm: ${3:true},",
      "  alarmOffset: ${4:0},",
      "  allDay: ${5:true},",
      "  description: '${6:description}',",
      "  endTime: '${7:endTime}',",
      "  location: '${8:location}',",
      "  repeatEndTime: ${9:0},",
      "  repeatInterval: ${10:repeatInterval},",
      "  success: (res) => {$11},",
      "  fail: (res) => {$12},",
      "  complete: (res) => {$13},",
      "})"
    ],
    "description": "/** [wx.addPhoneRepeatCalendar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/calendar/wx.addPhoneRepeatCalendar.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 向系统日历添加重复事件 */",
    "detail": "function",
    "kind": 9
  },
  "addVideoToFavorites": {
    "prefix": "addVideoToFavorites",
    "body": [
      "wx.addVideoToFavorites({",
      "  videoPath: '${1:videoPath}',",
      "  thumbPath: '${2:thumbPath}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.addVideoToFavorites(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/favorites/wx.addVideoToFavorites.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 收藏视频 */",
    "detail": "function",
    "kind": 9
  },
  "authPrivateMessage": {
    "prefix": "authPrivateMessage",
    "body": [
      "wx.authPrivateMessage({",
      "  shareTicket: '${1:shareTicket}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.authPrivateMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.authPrivateMessage.html)\n*\n* 需要基础库： `2.13.0`\n*\n* 在插件中使用：不支持\n*\n* 验证私密消息。用法详情见 [小程序私密消息使用指南](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share/private-message.html)\n*\n* **示例代码**\n*\n* ```js\nwx.authPrivateMessage({\n  shareTicket: 'xxxxxx',\n  success(res) {\n    console.log('authPrivateMessage success', res)\n    // res\n    // {\n    //   errMsg: 'authPrivateMessage:ok'\n    //   valid: true\n    //   iv: 'xxxx',\n    //   encryptedData: 'xxxxxx'\n    // }\n  },\n  fail(res) {\n    console.log('authPrivateMessage fail', res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "authorize": {
    "prefix": "authorize",
    "body": [
      "wx.authorize({",
      "  scope: '${1:scope}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.authorize(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：不支持\n*\n* 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。更多用法详见 [用户授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)。\n* > 小程序插件可以使用 [wx.authorizeForMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorizeForMiniProgram.html)\n*\n* **示例代码**\n*\n* ```js\n// 可以通过 wx.getSetting 先查询一下用户是否授权了 \"scope.record\" 这个 scope\nwx.getSetting({\n  success(res) {\n    if (!res.authSetting['scope.record']) {\n      wx.authorize({\n        scope: 'scope.record',\n        success () {\n          // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问\n          wx.startRecord()\n        }\n      })\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "authorizeForMiniProgram": {
    "prefix": "authorizeForMiniProgram",
    "body": [
      "wx.authorizeForMiniProgram({",
      "  scope: ${1:scope},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.authorizeForMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorizeForMiniProgram.html)\n*\n* 需要基础库： `2.14.4`\n*\n* 在插件中使用：需要基础库 `2.14.4`\n*\n* **仅小程序插件中能调用该接口**，用法同 [wx.authorize](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html)。目前仅支持三种 scope（见下）\n*\n* **示例代码**\n*\n* ```js\nwx.authorizeForMiniProgram({\n  scope: 'scope.record',\n  success () {\n    // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问\n    wx.startRecord()\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "batchGetStorage": {
    "prefix": "batchGetStorage",
    "body": [
      "wx.batchGetStorage({",
      "  keyList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.batchGetStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchGetStorage.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：不支持\n*\n* 从本地缓存中异步批量获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\nwx.batchGetStorage({\n  keyList: ['key'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "batchSetStorage": {
    "prefix": "batchSetStorage",
    "body": [
      "wx.batchSetStorage({",
      "  kvList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.batchSetStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchSetStorage.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据批量存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\nwx.setStorage({\n  key:\"key\",\n  data:\"value\"\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.batchSetStorage({\n  kvList: [{\n    key: 'key',\n    value: 'value',\n  }],\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "batchSetStorageSync": {
    "prefix": "batchSetStorageSync",
    "body": [
      "wx.batchSetStorageSync([$1])"
    ],
    "description": "/** [wx.batchSetStorageSync(Array.&lt;Object&gt; kvList)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchSetStorageSync.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据批量存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  wx.batchSetStorageSync([{key: 'key', value: 'value'}])\n} catch (e) { }\n``` */",
    "detail": "function",
    "kind": 9
  },
  "canvasGetImageData": {
    "prefix": "canvasGetImageData",
    "body": [
      "wx.canvasGetImageData({",
      "  canvasId: '${1:canvasId}',",
      "  height: ${2:0},",
      "  width: ${3:0},",
      "  x: ${4:0},",
      "  y: ${5:0},",
      "  success: (result) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "}, ${10:component})"
    ],
    "description": "/** [wx.canvasGetImageData(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasGetImageData.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取 canvas 区域隐含的像素数据。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/yufmRjmZ7W8f)\n*\n* ```js\nwx.canvasGetImageData({\n  canvasId: 'myCanvas',\n  x: 0,\n  y: 0,\n  width: 100,\n  height: 100,\n  success(res) {\n    console.log(res.width) // 100\n    console.log(res.height) // 100\n    console.log(res.data instanceof Uint8ClampedArray) // true\n    console.log(res.data.length) // 100 * 100 * 4\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "canvasPutImageData": {
    "prefix": "canvasPutImageData",
    "body": [
      "wx.canvasPutImageData({",
      "  canvasId: '${1:canvasId}',",
      "  data: ${2:data},",
      "  height: ${3:0},",
      "  width: ${4:0},",
      "  x: ${5:0},",
      "  y: ${6:0},",
      "  success: (res) => {$7},",
      "  fail: (res) => {$8},",
      "  complete: (res) => {$9},",
      "}, ${11:component})"
    ],
    "description": "/** [wx.canvasPutImageData(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 将像素数据绘制到画布。在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 <canvas> 组件 */",
    "detail": "function",
    "kind": 9
  },
  "canvasToTempFilePath": {
    "prefix": "canvasToTempFilePath",
    "body": [
      "wx.canvasToTempFilePath({",
      "  canvas: ${1:canvas},",
      "  canvasId: '${2:canvasId}',",
      "  destHeight: ${3:0},",
      "  destWidth: ${4:0},",
      "  fileType: ${5:fileType},",
      "  height: ${6:0},",
      "  quality: ${7:0},",
      "  width: ${8:0},",
      "  x: ${9:0},",
      "  y: ${10:0},",
      "  success: (result) => {$11},",
      "  fail: (res) => {$12},",
      "  complete: (res) => {$13},",
      "}, ${15:component})"
    ],
    "description": "/** [wx.canvasToTempFilePath(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 把当前画布指定区域的内容导出生成指定大小的图片。在 `draw()` 回调里调用该方法才能保证图片导出成功。暂不支持离屏 canvas。 */",
    "detail": "function",
    "kind": 9
  },
  "checkIsAddedToMyMiniProgram": {
    "prefix": "checkIsAddedToMyMiniProgram",
    "body": [
      "wx.checkIsAddedToMyMiniProgram({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.checkIsAddedToMyMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/my-miniprogram/wx.checkIsAddedToMyMiniProgram.html)\n         *\n         * 需要基础库： `2.29.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 检查小程序是否被添加至 「我的小程序」 */",
    "detail": "function",
    "kind": 9
  },
  "checkIsOpenAccessibility": {
    "prefix": "checkIsOpenAccessibility",
    "body": [
      "wx.checkIsOpenAccessibility({",
      "  success: (option) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.checkIsOpenAccessibility(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accessibility/wx.checkIsOpenAccessibility.html)\n         *\n         * 需要基础库： `2.13.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 检测是否开启视觉无障碍功能。 */",
    "detail": "function",
    "kind": 9
  },
  "checkIsSoterEnrolledInDevice": {
    "prefix": "checkIsSoterEnrolledInDevice",
    "body": [
      "wx.checkIsSoterEnrolledInDevice({",
      "  checkAuthMode: ${1:checkAuthMode},",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.checkIsSoterEnrolledInDevice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSoterEnrolledInDevice.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：不支持\n*\n* 获取设备内是否录入如指纹等生物信息的接口\n*\n* **示例代码**\n*\n* ```js\nwx.checkIsSoterEnrolledInDevice({\n  checkAuthMode: 'fingerPrint',\n  success(res) {\n    console.log(res.isEnrolled)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "checkIsSupportSoterAuthentication": {
    "prefix": "checkIsSupportSoterAuthentication",
    "body": [
      "wx.checkIsSupportSoterAuthentication({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.checkIsSupportSoterAuthentication(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSupportSoterAuthentication.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：不支持\n*\n* 获取本机支持的 SOTER 生物认证方式\n*\n* **示例代码**\n*\n* ```js\nwx.checkIsSupportSoterAuthentication({\n  success(res) {\n    // res.supportMode = [] 不具备任何被SOTER支持的生物识别方式\n    // res.supportMode = ['fingerPrint'] 只支持指纹识别\n    // res.supportMode = ['fingerPrint', 'facial'] 支持指纹识别和人脸识别\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "checkSession": {
    "prefix": "checkSession",
    "body": [
      "wx.checkSession({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.checkSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html)\n*\n* 在插件中使用：不支持\n*\n* 检查登录态是否过期。\n* 通过 wx.login 接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用 wx.checkSession 接口检测当前用户登录态是否有效。\n*\n* 登录态过期后开发者可以再调用 wx.login 获取新的用户登录态。调用成功说明当前 session_key 未过期，调用失败说明 session_key 已过期。\n*\n* **示例代码**\n*\n* ```js\nwx.checkSession({\n  success () {\n    //session_key 未过期，并且在本生命周期一直有效\n  },\n  fail () {\n    // session_key 已经失效，需要重新执行登录流程\n    wx.login() //重新登录\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "chooseAddress": {
    "prefix": "chooseAddress",
    "body": [
      "wx.chooseAddress({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.chooseAddress(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.16.1`\n*\n* 获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。\n* ## 使用方法\n* 自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n* ## 申请开通\n* 暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n* 接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/024hHnmd772y)\n* ```js\nwx.chooseAddress({\n  success (res) {\n    console.log(res.userName)\n    console.log(res.postalCode)\n    console.log(res.provinceName)\n    console.log(res.cityName)\n    console.log(res.countyName)\n    console.log(res.detailInfo)\n    console.log(res.nationalCode)\n    console.log(res.telNumber)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "chooseContact": {
    "prefix": "chooseContact",
    "body": [
      "wx.chooseContact({",
      "  success: (option) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.chooseContact(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.chooseContact.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉起手机通讯录，选择联系人。 */",
    "detail": "function",
    "kind": 9
  },
  "chooseImage": {
    "prefix": "chooseImage",
    "body": [
      "wx.chooseImage({",
      "  count: ${1:0},",
      "  sizeType: [$2],",
      "  sourceType: [$3],",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.chooseImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [2.21.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.chooseMedia](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html) 替换\n*\n* 从本地相册选择图片或使用相机拍照。\n*\n* ****\n*\n* ```js\nwx.chooseImage({\n  count: 1,\n  sizeType: ['original', 'compressed'],\n  sourceType: ['album', 'camera'],\n  success (res) {\n    // tempFilePath可以作为img标签的src属性显示图片\n    const tempFilePaths = res.tempFilePaths\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "chooseInvoice": {
    "prefix": "chooseInvoice",
    "body": [
      "wx.chooseInvoice({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.chooseInvoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.16.1`\n         *\n         * 选择用户已有的发票。\n         *\n         * **通过 cardId 和 encryptCode 获得报销发票的信息**\n         *\n         * 请参考[微信电子发票文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=21517918939oae3U)中，「查询报销发票信息」部分。\n         * 其中 `access_token` 的获取请参考[auth.getAccessToken](#)文档 */",
    "detail": "function",
    "kind": 9
  },
  "chooseInvoiceTitle": {
    "prefix": "chooseInvoiceTitle",
    "body": [
      "wx.chooseInvoiceTitle({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.chooseInvoiceTitle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.16.1`\n*\n* 选择用户的发票抬头。当前小程序必须关联一个公众号，且这个公众号是完成了[微信认证](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1496554031_RD4xe)的，才能调用 chooseInvoiceTitle。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/GJ4S9nmQ7x2E)\n*\n* ```js\nwx.chooseInvoiceTitle({\n  success(res) {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "chooseLicensePlate": {
    "prefix": "chooseLicensePlate",
    "body": [
      "wx.chooseLicensePlate({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.chooseLicensePlate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/license-plate/wx.chooseLicensePlate.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 选择车牌号 */",
    "detail": "function",
    "kind": 9
  },
  "chooseLocation": {
    "prefix": "chooseLocation",
    "body": [
      "wx.chooseLocation({",
      "  latitude: ${1:0},",
      "  longitude: ${2:0},",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.chooseLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * @warning **为确保选择地理位置接口的合理使用，位置接口调整参考 [选择地理位置接口调整公告](https://developers.weixin.qq.com/community/develop/doc/0006e45df2cac030e6edf367c56001)**\n         *\n         * 打开地图选择位置。\n         *  ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *  ## 申请开通\n         *  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n         *  接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         * **示例**\n         *\n         * ![](https://res.wx.qq.com/op_res/WDFC8aB4FI8rJ9oEmbYfbH_Fl3EIv91471YVxezVfLRESkUuCgfODZcbOoyteKU4j-OLZa2EFKY9BDPd3g-tfg#width:260px) */",
    "detail": "function",
    "kind": 9
  },
  "chooseMedia": {
    "prefix": "chooseMedia",
    "body": [
      "wx.chooseMedia({",
      "  camera: ${1:camera},",
      "  count: ${2:0},",
      "  maxDuration: ${3:0},",
      "  mediaType: [$4],",
      "  sizeType: [$5],",
      "  sourceType: [$6],",
      "  success: (result) => {$7},",
      "  fail: (res) => {$8},",
      "  complete: (res) => {$9},",
      "})"
    ],
    "description": "/** [wx.chooseMedia(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html)\n*\n* 需要基础库： `2.10.0`\n*\n* 在插件中使用：需要基础库 `2.11.1`\n*\n* 拍摄或从手机相册中选择图片或视频。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseMedia({\n  count: 9,\n  mediaType: ['image','video'],\n  sourceType: ['album', 'camera'],\n  maxDuration: 30,\n  camera: 'back',\n  success(res) {\n    console.log(res.tempFiles.tempFilePath)\n    console.log(res.tempFiles.size)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "chooseMessageFile": {
    "prefix": "chooseMessageFile",
    "body": [
      "wx.chooseMessageFile({",
      "  count: ${1:0},",
      "  extension: [$2],",
      "  type: ${3:type},",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.chooseMessageFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html)\n*\n* 需要基础库： `2.5.0`\n*\n* 在插件中使用：不支持\n*\n* 从客户端会话选择文件。\n*\n* ****\n*\n* ```js\nwx.chooseMessageFile({\n  count: 10,\n  type: 'image',\n  success (res) {\n    // tempFilePath可以作为img标签的src属性显示图片\n    const tempFilePaths = res.tempFiles\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "choosePoi": {
    "prefix": "choosePoi",
    "body": [
      "wx.choosePoi({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.choosePoi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.choosePoi.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **为确保选择地理位置接口的合理使用，位置接口调整参考 [选择地理位置接口调整公告](https://developers.weixin.qq.com/community/develop/doc/0006e45df2cac030e6edf367c56001)**\n         *\n         * 打开POI列表选择位置，支持模糊定位（精确到市）和精确定位混选。\n         *  ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *  ## 申请开通\n         *  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n         *  接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         * **示例**\n         *\n         * ![](https://res.wx.qq.com/op_res/lzDsNyBNifLczyLX0ms7ZpPQysgAgdhrQTGzzTQPiXkAB2HJIf1Slvl4rnN9I1q0AT3xqoGTg98jMsNexDLbbA#width:260px) */",
    "detail": "function",
    "kind": 9
  },
  "chooseVideo": {
    "prefix": "chooseVideo",
    "body": [
      "wx.chooseVideo({",
      "  camera: ${1:camera},",
      "  compressed: ${2:true},",
      "  maxDuration: ${3:0},",
      "  sourceType: [$4],",
      "  success: (result) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.chooseVideo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [2.21.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.chooseMedia](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html) 替换\n*\n* 拍摄视频或从手机相册中选视频。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseVideo({\n  sourceType: ['album','camera'],\n  maxDuration: 60,\n  camera: 'back',\n  success(res) {\n    console.log(res.tempFilePath)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "clearStorage": {
    "prefix": "clearStorage",
    "body": [
      "wx.clearStorage({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.clearStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html)\n*\n* 在插件中使用：不支持\n*\n* 清理本地数据缓存。\n*\n* **示例代码**\n*\n* ```js\nwx.clearStorage()\n```\n*\n* ```js\ntry {\n  wx.clearStorageSync()\n} catch(e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "clearStorageSync": {
    "prefix": "clearStorageSync",
    "body": [
      "wx.clearStorageSync()"
    ],
    "description": "/** [wx.clearStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorageSync.html)\n*\n* 在插件中使用：不支持\n*\n* [wx.clearStorage](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.clearStorage()\n```\n*\n* ```js\ntry {\n  wx.clearStorageSync()\n} catch(e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "closeBLEConnection": {
    "prefix": "closeBLEConnection",
    "body": [
      "wx.closeBLEConnection({",
      "  deviceId: '${1:deviceId}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.closeBLEConnection(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 断开与蓝牙低功耗设备的连接。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.closeBLEConnection({\n  deviceId,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "closeBluetoothAdapter": {
    "prefix": "closeBluetoothAdapter",
    "body": [
      "wx.closeBluetoothAdapter({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.closeBluetoothAdapter(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 成对调用。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.closeBluetoothAdapter({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "closeSocket": {
    "prefix": "closeSocket",
    "body": [
      "wx.closeSocket({",
      "  code: ${1:0},",
      "  reason: '${2:reason}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.closeSocket(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.closeSocket.html)\n*\n* 在插件中使用：不支持\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 关闭 WebSocket 连接。\n*\n* **示例代码**\n*\n* ```js\nwx.connectSocket({\n  url: 'test.php'\n})\n\n//注意这里有时序问题，\n//如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。\n//必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。\nwx.onSocketOpen(function() {\n  wx.closeSocket()\n})\n\nwx.onSocketClose(function(res) {\n  console.log('WebSocket 已关闭！')\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "compressImage": {
    "prefix": "compressImage",
    "body": [
      "wx.compressImage({",
      "  src: '${1:src}',",
      "  compressedHeight: ${2:0},",
      "  compressedWidth: ${3:0},",
      "  quality: ${4:0},",
      "  success: (result) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.compressImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.12.0`\n*\n* 压缩图片接口，可选压缩质量\n*\n* **示例代码**\n*\n* ```js\nwx.compressImage({\n  src: '', // 图片路径\n  quality: 80 // 压缩质量\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "compressVideo": {
    "prefix": "compressVideo",
    "body": [
      "wx.compressVideo({",
      "  bitrate: ${1:0},",
      "  fps: ${2:0},",
      "  quality: ${3:quality},",
      "  resolution: ${4:0},",
      "  src: '${5:src}',",
      "  success: (result) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.compressVideo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.compressVideo.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.1`\n         *\n         * 压缩视频接口。开发者可指定压缩质量 `quality` 进行压缩。当需要更精细的控制时，可指定 `bitrate`、`fps`、和 `resolution`，当 `quality` 传入时，这三个参数将被忽略。原视频的相关信息可通过 [getVideoInfo](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.getVideoInfo.html) 获取。 */",
    "detail": "function",
    "kind": 9
  },
  "connectWifi": {
    "prefix": "connectWifi",
    "body": [
      "wx.connectWifi({",
      "  SSID: '${1:SSID}',",
      "  password: '${2:password}',",
      "  BSSID: '${3:BSSID}',",
      "  maunal: ${4:true},",
      "  partialInfo: ${5:true},",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.connectWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.connectWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。\n*\n* **示例代码**\n*\n* ```js\nwx.connectWifi({\n  SSID: '',\n  password: '',\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 微信客户端 7.0.22 以上版本，connectWifi 的实现在 Android 10 及以上的手机无法生效，对于 Android 10 及以上版本，设备连接 wifi 之后，（受系统能力限制）其他进程无法使用当前连接的 wifi ；即连接上的 wifi 只对当前小程序有效，如果想要对整个系统生效，需要配置 maunal 来连接 wifi。\n* - iOS 系统底层没有给开发者提供因 wifi 密码错误而连接失败的事件，但用户可以收到密码错误的系统弹窗。建议开发者通过 onWifiConnected 事件来判断 wifi 是否连接成功；即设置定时器，若超时后仍没有 onWifiConnected 事件，则认定此次 wifi 连接无效。\n* - Android / iOS 在系统已经连上目标 wifi 的情况下，小程序再次连接目标 wifi，此时无论输入的密码是否正确，系统都会默认此次连接成功，且没有 onWifiConnected 事件。\n* - onWifiConnected 事件可能会返回空对象，此时代表 wifi 断开连接，开发者可忽略这种情况。 */",
    "detail": "function",
    "kind": 9
  },
  "createBLEConnection": {
    "prefix": "createBLEConnection",
    "body": [
      "wx.createBLEConnection({",
      "  deviceId: '${1:deviceId}',",
      "  timeout: ${2:0},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.createBLEConnection(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 连接蓝牙低功耗设备。\n*\n* 若小程序在之前已有搜索过某个蓝牙设备，并成功建立连接，可直接传入之前搜索获取的 deviceId 直接尝试连接该设备，无需再次进行搜索操作。\n*\n* **注意**\n*\n* - 请保证尽量成对的调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 和 [wx.closeBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html) 接口。安卓如果重复调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 创建连接，有可能导致系统持有同一设备多个连接的实例，导致调用 `closeBLEConnection` 的时候并不能真正的断开与设备的连接。\n* - 蓝牙连接随时可能断开，建议监听 [wx.onBLEConnectionStateChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html) 回调事件，当蓝牙设备断开时按需执行重连操作\n* - 若对未连接的设备或已断开连接的设备调用数据读写操作的接口，会返回 10006 错误，建议进行重连操作。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.createBLEConnection({\n  deviceId,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "createBLEPeripheralServer": {
    "prefix": "createBLEPeripheralServer",
    "body": [
      "wx.createBLEPeripheralServer({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.createBLEPeripheralServer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.createBLEPeripheralServer.html)\n         *\n         * 需要基础库： `2.10.3`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 建立本地作为蓝牙低功耗外围设备的服务端，可创建多个。 */",
    "detail": "function",
    "kind": 9
  },
  "cropImage": {
    "prefix": "cropImage",
    "body": [
      "wx.cropImage({",
      "  cropScale: ${1:cropScale},",
      "  src: '${2:src}',",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.cropImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.cropImage.html)\n*\n* 需要基础库： `2.26.0`\n*\n* 在插件中使用：不支持\n*\n* 裁剪图片接口\n*\n* **示例代码**\n*\n* ```js\nwx.cropImage({\n  src: '', // 图片路径\n  cropScale: '16:9', // 裁剪比例\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "disableAlertBeforeUnload": {
    "prefix": "disableAlertBeforeUnload",
    "body": [
      "wx.disableAlertBeforeUnload({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.disableAlertBeforeUnload(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.disableAlertBeforeUnload.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 关闭小程序页面返回询问对话框。 */",
    "detail": "function",
    "kind": 9
  },
  "editImage": {
    "prefix": "editImage",
    "body": [
      "wx.editImage({",
      "  src: '${1:src}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.editImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.editImage.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：不支持\n*\n* 编辑图片接口\n*\n* **示例代码**\n*\n* ```js\nwx.editImage({\n  src: '', // 图片路径\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "enableAlertBeforeUnload": {
    "prefix": "enableAlertBeforeUnload",
    "body": [
      "wx.enableAlertBeforeUnload({",
      "  message: '${1:message}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.enableAlertBeforeUnload(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.enableAlertBeforeUnload.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启小程序页面返回询问对话框。\n         *\n         * ## 弹窗条件\n         * * 当用户在小程序内非首页页面/最底层页\n         * * 官方导航栏上的的返回\n         * * 全屏模式下自绘返回键\n         * * android 系统 back 键时\n         *\n         * ## 注意事项\n         * * 手势滑动返回时不做拦截\n         * * 在任何场景下，此功能都不应拦住用户退出小程序的行为\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/MTPm9Cmh7VfT) */",
    "detail": "function",
    "kind": 9
  },
  "exitMiniProgram": {
    "prefix": "exitMiniProgram",
    "body": [
      "wx.exitMiniProgram({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.exitMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.exitMiniProgram.html)\n         *\n         * 需要基础库： `2.17.3`\n         *\n         * 在插件中使用：需要基础库 `2.30.1`\n         *\n         * 退出当前小程序。必须有点击行为才能调用成功。 */",
    "detail": "function",
    "kind": 9
  },
  "exitVoIPChat": {
    "prefix": "exitVoIPChat",
    "body": [
      "wx.exitVoIPChat({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.exitVoIPChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.exitVoIPChat.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 退出（销毁）实时语音通话 */",
    "detail": "function",
    "kind": 9
  },
  "faceDetect": {
    "prefix": "faceDetect",
    "body": [
      "wx.faceDetect({",
      "  frameBuffer: ${1:frameBuffer},",
      "  height: ${2:0},",
      "  width: ${3:0},",
      "  enableAngle: ${4:true},",
      "  enableConf: ${5:true},",
      "  enableMultiFace: ${6:true},",
      "  enablePoint: ${7:true},",
      "  success: (result) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [wx.faceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.faceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 人脸检测，使用前需要通过 wx.initFaceDetect 进行一次初始化，推荐使用相机接口返回的帧数据。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html)\n         *\n         * ****\n         *\n         * ### 特别说明\n         * 若小程序人脸识别功能涉及采集、存储用户生物特征（如人脸照片或视频、身份证和手持身份证、身份证照和免冠照等），此类型服务需使用[微信原生人脸识别接口](https://developers.weixin.qq.com/community/develop/doc/000442d352c1202bd498ecb105c00d?highline=%E4%BA%BA%E8%84%B8%E6%A0%B8%E8%BA%AB)。 */",
    "detail": "function",
    "kind": 9
  },
  "getAvailableAudioSources": {
    "prefix": "getAvailableAudioSources",
    "body": [
      "wx.getAvailableAudioSources({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getAvailableAudioSources(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.getAvailableAudioSources.html)\n         *\n         * 需要基础库： `2.1.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 获取当前支持的音频输入源 */",
    "detail": "function",
    "kind": 9
  },
  "getBLEDeviceCharacteristics": {
    "prefix": "getBLEDeviceCharacteristics",
    "body": [
      "wx.getBLEDeviceCharacteristics({",
      "  deviceId: '${1:deviceId}',",
      "  serviceId: '${2:serviceId}',",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceCharacteristics(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceCharacteristics.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取蓝牙低功耗设备某个服务中所有特征 (characteristic)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEDeviceCharacteristics({\n  // 这里的 deviceId 需要已经通过 wx.createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 wx.getBLEDeviceServices 接口中获取\n  serviceId,\n  success (res) {\n    console.log('device getBLEDeviceCharacteristics:', res.characteristics)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBLEDeviceRSSI": {
    "prefix": "getBLEDeviceRSSI",
    "body": [
      "wx.getBLEDeviceRSSI({",
      "  deviceId: '${1:deviceId}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceRSSI(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceRSSI.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 获取蓝牙低功耗设备的信号强度 (Received Signal Strength Indication, RSSI)。 */",
    "detail": "function",
    "kind": 9
  },
  "getBLEDeviceServices": {
    "prefix": "getBLEDeviceServices",
    "body": [
      "wx.getBLEDeviceServices({",
      "  deviceId: '${1:deviceId}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceServices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceServices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取蓝牙低功耗设备所有服务 (service)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEDeviceServices({\n  // 这里的 deviceId 需要已经通过 wx.createBLEConnection 与对应设备建立连接\n  deviceId,\n  success (res) {\n    console.log('device services:', res.services)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBLEMTU": {
    "prefix": "getBLEMTU",
    "body": [
      "wx.getBLEMTU({",
      "  deviceId: '${1:deviceId}',",
      "  writeType: ${2:writeType},",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.getBLEMTU(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEMTU.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 获取蓝牙低功耗的最大传输单元。需在 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 调用成功后调用。\n*\n* **注意**\n*\n* - 小程序中 MTU 为 ATT_MTU，包含 Op-Code 和 Attribute Handle 的长度，实际可以传输的数据长度为 `ATT_MTU - 3`\n* - iOS 系统中 MTU 为固定值；安卓系统中，MTU 会在系统协商成功之后发生改变，建议使用 [wx.onBLEMTUChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEMTUChange.html) 监听。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEMTU({\n  deviceId: '',\n  writeType: 'write',\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBackgroundAudioPlayerState": {
    "prefix": "getBackgroundAudioPlayerState",
    "body": [
      "wx.getBackgroundAudioPlayerState({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBackgroundAudioPlayerState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioPlayerState.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 获取后台音乐播放状态。\n*\n* **示例代码**\n*\n* ```js\nwx.getBackgroundAudioPlayerState({\n  success (res) {\n    const status = res.status\n    const dataUrl = res.dataUrl\n    const currentPosition = res.currentPosition\n    const duration = res.duration\n    const downloadPercent = res.downloadPercent\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBackgroundFetchData": {
    "prefix": "getBackgroundFetchData",
    "body": [
      "wx.getBackgroundFetchData({",
      "  fetchType: '${1:fetchType}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getBackgroundFetchData(object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchData.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉取 backgroundFetch 客户端缓存数据。\n         * 当调用接口时，若当次请求未结束，会先返回本地的旧数据（之前打开小程序时请求的），如果本地没有旧数据会返回失败，而不会等待请求完成。 */",
    "detail": "function",
    "kind": 9
  },
  "getBackgroundFetchToken": {
    "prefix": "getBackgroundFetchToken",
    "body": [
      "wx.getBackgroundFetchToken({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBackgroundFetchToken(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchToken.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取设置过的自定义登录态。若无，则返回 fail。 */",
    "detail": "function",
    "kind": 9
  },
  "getBatteryInfo": {
    "prefix": "getBatteryInfo",
    "body": [
      "wx.getBatteryInfo({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBatteryInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 获取设备电量。同步 API [wx.getBatteryInfoSync](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html) 在 iOS 上不可用。 */",
    "detail": "function",
    "kind": 9
  },
  "getBeacons": {
    "prefix": "getBeacons",
    "body": [
      "wx.getBeacons({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBeacons(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.getBeacons.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取所有已搜索到的 Beacon 设备 */",
    "detail": "function",
    "kind": 9
  },
  "getBluetoothAdapterState": {
    "prefix": "getBluetoothAdapterState",
    "body": [
      "wx.getBluetoothAdapterState({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBluetoothAdapterState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothAdapterState.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取本机蓝牙适配器状态。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBluetoothAdapterState({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getBluetoothDevices": {
    "prefix": "getBluetoothDevices",
    "body": [
      "wx.getBluetoothDevices({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getBluetoothDevices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取在蓝牙模块生效期间所有搜索到的蓝牙设备。包括已经和本机处于连接状态的设备。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进度字符串示例\nfunction ab2hex(buffer) {\n  var hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.getBluetoothDevices({\n  success: function (res) {\n    console.log(res)\n    if (res.devices[0]) {\n      console.log(ab2hex(res.devices[0].advertisData))\n    }\n  }\n})\n```\n*\n* **注意**\n*\n* - 该接口获取到的设备列表为**蓝牙模块生效期间所有搜索到的蓝牙设备**，若在蓝牙模块使用流程结束后未及时调用 [wx.closeBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html) 释放资源，会存在调用该接口会返回之前的蓝牙使用流程中搜索到的蓝牙设备，可能设备已经不在用户身边，无法连接。 */",
    "detail": "function",
    "kind": 9
  },
  "getChannelsLiveInfo": {
    "prefix": "getChannelsLiveInfo",
    "body": [
      "wx.getChannelsLiveInfo({",
      "  finderUserName: '${1:finderUserName}',",
      "  endTime: ${2:0},",
      "  startTime: ${3:0},",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.getChannelsLiveInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsLiveInfo.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播信息 */",
    "detail": "function",
    "kind": 9
  },
  "getChannelsLiveNoticeInfo": {
    "prefix": "getChannelsLiveNoticeInfo",
    "body": [
      "wx.getChannelsLiveNoticeInfo({",
      "  finderUserName: '${1:finderUserName}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getChannelsLiveNoticeInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsLiveNoticeInfo.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播预告信息 */",
    "detail": "function",
    "kind": 9
  },
  "getChannelsShareKey": {
    "prefix": "getChannelsShareKey",
    "body": [
      "wx.getChannelsShareKey({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getChannelsShareKey(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsShareKey.html)\n         *\n         * 需要基础库： `2.22.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播卡片/视频卡片的分享来源，仅当卡片携带了分享信息、同时用户已授权该小程序获取视频号分享信息且启动场景值为 1177、1184、1195、1208 时可用。 */",
    "detail": "function",
    "kind": 9
  },
  "getClipboardData": {
    "prefix": "getClipboardData",
    "body": [
      "wx.getClipboardData({",
      "  success: (option) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getClipboardData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取系统剪贴板的内容\n*\n* **示例代码**\n*\n* ```js\nwx.getClipboardData({\n  success (res){\n    console.log(res.data)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getConnectedBluetoothDevices": {
    "prefix": "getConnectedBluetoothDevices",
    "body": [
      "wx.getConnectedBluetoothDevices({",
      "  services: [$1],",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getConnectedBluetoothDevices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getConnectedBluetoothDevices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 根据主服务 UUID 获取已连接的蓝牙设备。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getConnectedBluetoothDevices({\n  services: ['FEE7'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getConnectedWifi": {
    "prefix": "getConnectedWifi",
    "body": [
      "wx.getConnectedWifi({",
      "  partialInfo: ${1:true},",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getConnectedWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getConnectedWifi.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 获取已连接中的 Wi-Fi 信息。 */",
    "detail": "function",
    "kind": 9
  },
  "getDeviceVoIPList": {
    "prefix": "getDeviceVoIPList",
    "body": [
      "wx.getDeviceVoIPList({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getDeviceVoIPList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/device-voip/wx.getDeviceVoIPList.html)\n*\n* 需要基础库： `2.30.3`\n*\n* 在插件中使用：不支持\n*\n* 查询当前用户授权的音视频通话设备（组）信息\n*\n* **示例代码**\n*\n* ```js\nwx.getDeviceVoIPList({\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getExtConfig": {
    "prefix": "getExtConfig",
    "body": [
      "wx.getExtConfig({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getExtConfig(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 获取[第三方平台](https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html)自定义的数据字段。\n*\n* **Tips**\n*\n* 1. 本接口暂时无法通过 [wx.canIUse](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html) 判断是否兼容，开发者需要自行判断 [wx.getExtConfig](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html) 是否存在来兼容\n*\n* ****\n*\n* ```js\nif (wx.getExtConfig) {\n  wx.getExtConfig({\n    success (res) {\n      console.log(res.extConfig)\n    }\n  })\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getFuzzyLocation": {
    "prefix": "getFuzzyLocation",
    "body": [
      "wx.getFuzzyLocation({",
      "  type: '${1:type}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getFuzzyLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getFuzzyLocation.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：支持\n*\n* 获取当前的模糊地理位置。\n*  ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*  ## 申请开通\n*  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。 从2022年7月14日开始在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n* **示例代码**\n*\n*  ```js\n wx.getFuzzyLocation({\n  type: 'wgs84',\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n  }\n})\n ``` */",
    "detail": "function",
    "kind": 9
  },
  "getGroupEnterInfo": {
    "prefix": "getGroupEnterInfo",
    "body": [
      "wx.getGroupEnterInfo({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getGroupEnterInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/group/wx.getGroupEnterInfo.html)\n*\n* 需要基础库： `2.10.4`\n*\n* 在插件中使用：不支持\n*\n* 获取微信群聊场景下的小程序启动信息。群聊场景包括群聊小程序消息卡片、群待办、群工具。可用于获取当前群的 opengid。\n* ## 注意事项\n*  - 基础库 v2.10.4 开始支持获取群工具小程序启动信息\n*  - 基础库 v2.17.3 开始支持获取群聊小程序消息卡片、群待办小程序启动信息\n*\n* **示例代码**\n*\n* ```js\nwx.getGroupEnterInfo({\n  success(res) {\n    // res\n    {\n      errMsg: 'getGroupEnterInfo:ok',\n      encryptedData: '',\n      iv: ''\n    }\n  },\n  fail() {\n\n  }\n})\n```\n*\n* 敏感数据有两种获取方式，一是使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构（其中 opengid 为当前群的唯一标识）：\n*\n* ```json\n{\n \"opengid\": \"OPENGID\"\n}\n```\n*\n* **Tips**\n*\n* - 如需要展示群名称，小程序可以使用[开放数据组件](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n* - 小游戏可以通过 `wx.getGroupInfo` 接口获取群名称 */",
    "detail": "function",
    "kind": 9
  },
  "getHCEState": {
    "prefix": "getHCEState",
    "body": [
      "wx.getHCEState({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getHCEState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.getHCEState.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 判断当前设备是否支持 HCE 能力。\n*\n* **示例代码**\n*\n* ```js\nwx.getHCEState({\n  success (res) {\n    console.log(res.errCode)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getImageInfo": {
    "prefix": "getImageInfo",
    "body": [
      "wx.getImageInfo({",
      "  src: '${1:src}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getImageInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取图片信息。网络图片需先配置download域名才能生效。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/Kd47Sbmr6yYu)\n*\n* ```js\nwx.getImageInfo({\n  src: 'images/a.jpg',\n  success (res) {\n    console.log(res.width)\n    console.log(res.height)\n  }\n})\n\nwx.chooseImage({\n  success (res) {\n    wx.getImageInfo({\n      src: res.tempFilePaths[0],\n      success (res) {\n        console.log(res.width)\n        console.log(res.height)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getInferenceEnvInfo": {
    "prefix": "getInferenceEnvInfo",
    "body": [
      "wx.getInferenceEnvInfo({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getInferenceEnvInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/wx.getInferenceEnvInfo.html)\n*\n* 需要基础库： `2.30.1`\n*\n* 在插件中使用：需要基础库 `2.30.1`\n*\n* 获取通用AI推理引擎版本。使用前可参考[AI指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/inference/tutorial.html)\n*\n* **示例代码**\n*\n* ```js\n// 获取通用AI推理引擎版本\nwx.getInferenceEnvInfo({\n      complete: (res) => {\n        console.log(res.ver)\n        console.log(res.errMsg)\n      },\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getLocalIPAddress": {
    "prefix": "getLocalIPAddress",
    "body": [
      "wx.getLocalIPAddress({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getLocalIPAddress(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getLocalIPAddress.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取局域网IP地址\n*\n* **示例代码**\n*\n* ```js\nwx.getLocalIPAddress({\n  success (res) {\n    const localip = res.localip\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getLocation": {
    "prefix": "getLocation",
    "body": [
      "wx.getLocation({",
      "  altitude: ${1:true},",
      "  highAccuracyExpireTime: ${2:0},",
      "  isHighAccuracy: ${3:true},",
      "  type: '${4:type}',",
      "  success: (result) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.getLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用。开启高精度定位，接口耗时会增加，可指定 highAccuracyExpireTime 作为超时时间。地图相关使用的坐标格式应为 gcj02。\n*  高频率调用会导致耗电，如有需要可使用持续定位接口 `wx.onLocationChange`。\n*  基础库 `2.17.0` 版本起 `wx.getLocation` 增加调用频率限制，[相关公告](https://developers.weixin.qq.com/community/develop/doc/000aee91a98d206bc6dbe722b51801)。\n*\n*   ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*\n*   ## 申请开通\n*   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n*   接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n*   ### 国内主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 电商平台 |\t/\t| 售卖商品线下发货、线下收货服务 |\n*   | 商家自营 |\t/\t| 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n*   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n*   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n*   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n*   | 餐饮服务 | \t点餐平台、外卖平台、餐饮服务场所/餐饮服务管理企业\t| 线下送餐服务 |\n*   | 工具\t| 天气、信息查询、办公、设备管理 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询、智能穿戴、智能门禁、与地理位置相关的打卡服务等 |\n*   | 金融  | 银行、非金融机构自营小额贷款/融资担保/商业保理、保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n*   | 旅游  | 景区服务、住宿服务 | 提供景区导航、导览服务、酒店导航服务 |\n*   | 汽车服务 | 维修保养、汽车用品、汽车经销商/4S店、汽车厂商、汽车预售、二手车 | 提供汽车售卖、维保洗美服务、查找附近的维修点/洗车网点等导航服务 |\n*   | IT科技 | 基础电信运营商、电信业务代理商 | 提供运营商线下网点的预约、基于地理位置取号并现场报到、网点导航等服务 |\n*   | 房地产服务 | 物业管理、房屋中介、房屋装修 | 提供房地产开发商及物业公司门店导览导航服务 |\n*   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n*   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n*\n*   ### 海外主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n*   | 餐饮\t | /\t | 线下送餐服务 |\n*   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n*   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货、超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n*\n* **示例代码**\n*\n*  ```js\n wx.getLocation({\n  type: 'wgs84',\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n    const speed = res.speed\n    const accuracy = res.accuracy\n  }\n})\n ```\n*\n* **注意**\n*\n* - `2.17.0 起 `wx.getLocation` 增加调用频率限制，[相关公告](https://developers.weixin.qq.com/community/develop/doc/000aee91a98d206bc6dbe722b51801)\n* - 工具中定位模拟使用IP定位，可能会有一定误差。且工具目前仅支持 gcj02 坐标。\n* - 使用第三方服务进行逆地址解析时，请确认第三方服务默认的坐标系，正确进行坐标转换。 */",
    "detail": "function",
    "kind": 9
  },
  "getNetworkType": {
    "prefix": "getNetworkType",
    "body": [
      "wx.getNetworkType({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getNetworkType(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取网络类型\n*\n* **示例代码**\n*\n* ```js\nwx.getNetworkType({\n  success (res) {\n    const networkType = res.networkType\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getRandomValues": {
    "prefix": "getRandomValues",
    "body": [
      "wx.getRandomValues({",
      "  length: ${1:0},",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getRandomValues(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/crypto/wx.getRandomValues.html)\n*\n* 需要基础库： `2.15.0`\n*\n* 在插件中使用：不支持\n*\n* 获取密码学安全随机数\n*\n* **示例代码**\n*\n* ```js\nwx.getRandomValues({\n  length: 6 // 生成 6 个字节长度的随机数,\n  success: res => {\n    console.log(wx.arrayBufferToBase64(res.randomValues)) // 转换为 base64 字符串后打印\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getScreenBrightness": {
    "prefix": "getScreenBrightness",
    "body": [
      "wx.getScreenBrightness({",
      "  success: (option) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getScreenBrightness(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenBrightness.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取屏幕亮度\n         *\n         * **说明**\n         *\n         * - 若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。 */",
    "detail": "function",
    "kind": 9
  },
  "getScreenRecordingState": {
    "prefix": "getScreenRecordingState",
    "body": [
      "wx.getScreenRecordingState({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getScreenRecordingState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenRecordingState.html)\n         *\n         * 需要基础库： `2.24.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 查询用户是否在录屏。\n         *\n         * **示例代码**\n         *\n         * ```js\n         * wx.getScreenRecordingState({\n         *   success: function (res) {\n         *     console.log(res.state)\n         *   },\n         * }) */",
    "detail": "function",
    "kind": 9
  },
  "getSelectedTextRange": {
    "prefix": "getSelectedTextRange",
    "body": [
      "wx.getSelectedTextRange({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getSelectedTextRange(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.getSelectedTextRange.html)\n*\n* 需要基础库： `2.7.0`\n*\n* 在插件中使用：不支持\n*\n* 在input、textarea等focus之后，获取输入框的光标位置。注意：只有在focus的时候调用此接口才有效。\n*\n* **示例代码**\n*\n* ```js\nwx.getSelectedTextRange({\n  complete: res => {\n    console.log('getSelectedTextRange res', res.start, res.end)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSetting": {
    "prefix": "getSetting",
    "body": [
      "wx.getSetting({",
      "  withSubscriptions: ${1:true},",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `2.6.3`\n*\n* 在插件中使用时，接口有以下不同：\n* - `withSubscriptions` 无效（插件暂无订阅消息）\n* - 返回值中的 `authSetting` 字段中是插件的权限（如用户信息功能页授权）\n* - [2.14.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起返回值中有 `miniprogramAuthSetting` 字段，内容等于当前小程序 `getSetting` 的结果（不含订阅状态）\n*\n* 获取用户的当前设置。**返回值中只会出现小程序已经向用户请求过的[权限](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)**。\n*\n* **示例代码**\n*\n* ```js\nwx.getSetting({\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n  }\n})\n```\n*\n* ```js\nwx.getSetting({\n  withSubscriptions: true,\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n    console.log(res.subscriptionsSetting)\n    // res.subscriptionsSetting = {\n    //   mainSwitch: true, // 订阅消息总开关\n    //   itemSettings: {   // 每一项开关\n    //     SYS_MSG_TYPE_INTERACTIVE: 'accept', // 小游戏系统订阅消息\n    //     SYS_MSG_TYPE_RANK: 'accept'\n    //     zun-LzcQyW-edafCVvzPkK4de2Rllr1fFpw2A_x0oXE: 'reject', // 普通一次性订阅消息\n    //     ke_OZC_66gZxALLcsuI7ilCJSP2OJ2vWo2ooUPpkWrw: 'ban',\n    //   }\n    // }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getShareInfo": {
    "prefix": "getShareInfo",
    "body": [
      "wx.getShareInfo({",
      "  shareTicket: '${1:shareTicket}',",
      "  timeout: ${2:0},",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.getShareInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.getShareInfo.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 获取转发详细信息\n*\n* **示例代码**\n*\n* 敏感数据获取方式 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构（其中 openGId 为当前群的唯一标识）：\n*\n* ```json\n{\n \"openGId\": \"OPENGID\"\n}\n```\n*\n* **Tips**\n*\n* - 如需要展示群名称，小程序可以使用 [开放数据组件](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n* - 小游戏可以通过 [`wx.getGroupInfo`](#) 接口获取群名称 */",
    "detail": "function",
    "kind": 9
  },
  "getSkylineInfo": {
    "prefix": "getSkylineInfo",
    "body": [
      "wx.getSkylineInfo({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getSkylineInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSkylineInfo.html)\n         *\n         * 需要基础库： `2.26.2`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 获取当前运行环境对于 [Skyline 渲染引擎](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 的支持情况 */",
    "detail": "function",
    "kind": 9
  },
  "getStorage": {
    "prefix": "getStorage",
    "body": [
      "wx.getStorage(${1:option})"
    ],
    "description": "/** [wx.getStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中异步获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\nwx.getStorage({\n  key: 'key',\n  success (res) {\n    console.log(res.data)\n  }\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.setStorage({\n  key: \"key\",\n  data: \"value\",\n  encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n  success() {\n    wx.getStorage({\n      key: \"key\",\n      encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n      success(res) {\n        console.log(res.data)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getStorageInfo": {
    "prefix": "getStorageInfo",
    "body": [
      "wx.getStorageInfo({",
      "  success: (option) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getStorageInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html)\n*\n* 在插件中使用：不支持\n*\n* 异步获取当前storage的相关信息。\n*\n* **示例代码**\n*\n* ```js\nwx.getStorageInfo({\n  success (res) {\n    console.log(res.keys)\n    console.log(res.currentSize)\n    console.log(res.limitSize)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getStorageInfoSync()\n  console.log(res.keys)\n  console.log(res.currentSize)\n  console.log(res.limitSize)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSystemInfo": {
    "prefix": "getSystemInfo",
    "body": [
      "wx.getSystemInfo({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getSystemInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取系统信息。**由于历史原因，wx.getSystemInfo 是异步的调用格式，但是是同步返回，需要异步获取系统信息请使用 [wx.getSystemInfoAsync](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoAsync.html)。**\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfo({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getSystemInfoSync()\n  console.log(res.model)\n  console.log(res.pixelRatio)\n  console.log(res.windowWidth)\n  console.log(res.windowHeight)\n  console.log(res.language)\n  console.log(res.version)\n  console.log(res.platform)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getSystemInfoAsync": {
    "prefix": "getSystemInfoAsync",
    "body": [
      "wx.getSystemInfoAsync({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getSystemInfoAsync(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoAsync.html)\n*\n* 需要基础库： `2.14.1`\n*\n* 在插件中使用：不支持\n*\n* 异步获取系统信息。需要一定的微信客户端版本支持，在不支持的客户端上，会使用同步实现来返回。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfoAsync({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getUserInfo": {
    "prefix": "getUserInfo",
    "body": [
      "wx.getUserInfo({",
      "  lang: ${1:lang},",
      "  withCredentials: ${2:true},",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.getUserInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，需要在用户信息功能页中获得用户授权或满足一定条件后调用。否则将返回 fail。详见 [用户信息功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html)\n*\n* @warning **用户头像昵称获取规则已调整，参考 [用户信息接口调整说明](https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801)、[小程序用户头像昵称获取规则调整公告](https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01)**\n*\n* 获取用户信息。\n*\n* **示例代码**\n*\n* ```js\n// 必须是在用户已经授权的情况下调用\nwx.getUserInfo({\n  success: function(res) {\n    var userInfo = res.userInfo\n    var nickName = userInfo.nickName\n    var avatarUrl = userInfo.avatarUrl\n    var gender = userInfo.gender //性别 0：未知、1：男、2：女\n    var province = userInfo.province\n    var city = userInfo.city\n    var country = userInfo.country\n  }\n})\n```\n*\n* 敏感数据有两种获取方式：\n* 1. 使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法)\n* 2. 使用 [云调用直接获取开放数据](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#云调用直接获取开放数据)\n* 获取得到的开放数据为以下 json 结构：\n*\n* ```json\n{\n  \"openId\": \"OPENID\",\n  \"nickName\": \"NICKNAME\",\n  \"gender\": GENDER,\n  \"city\": \"CITY\",\n  \"province\": \"PROVINCE\",\n  \"country\": \"COUNTRY\",\n  \"avatarUrl\": \"AVATARURL\",\n  \"unionId\": \"UNIONID\",\n  \"watermark\": {\n    \"appid\":\"APPID\",\n    \"timestamp\":TIMESTAMP\n  }\n}\n```\n*\n* **小程序用户信息组件示例代码**\n*\n* ```html\n* <!-- 如果只是展示用户头像昵称，可以使用 <open-data /> 组件 -->\n* <open-data type=\"userAvatarUrl\"></open-data>\n* <open-data type=\"userNickName\"></open-data>\n* <!-- 需要使用 button 来授权登录 -->\n* <button wx:if=\"{{canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"bindGetUserInfo\">授权登录</button>\n* <view wx:else>请升级微信版本</view>\n* ```\n*\n* ```js\nPage({\n  data: {\n    canIUse: wx.canIUse('button.open-type.getUserInfo')\n  },\n  onLoad: function() {\n    // 查看是否授权\n    wx.getSetting({\n      success (res){\n        if (res.authSetting['scope.userInfo']) {\n          // 已经授权，可以直接调用 getUserInfo 获取头像昵称\n          wx.getUserInfo({\n            success: function(res) {\n              console.log(res.userInfo)\n            }\n          })\n        }\n      }\n    })\n  },\n  bindGetUserInfo (e) {\n    console.log(e.detail.userInfo)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getUserProfile": {
    "prefix": "getUserProfile",
    "body": [
      "wx.getUserProfile({",
      "  desc: '${1:desc}',",
      "  lang: ${2:lang},",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.getUserProfile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html)\n*\n* 需要基础库： `2.10.4`\n*\n* 在插件中使用：不支持\n*\n* @warning **用户头像昵称获取规则已调整，参考 [小程序用户头像昵称获取规则调整公告](https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01)**\n*\n* 获取用户信息。页面产生点击事件（例如 `button` 上 `bindtap` 的回调中）后才可调用，每次请求都会弹出授权窗口，用户同意后返回 `userInfo`。该接口用于替换 `wx.getUserInfo`，详见 [用户信息接口调整说明](https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801?highLine=login)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/tsJaq2mP7Mp4)\n*\n* **Bug & Tip**\n*\n* 1. `tip`：仅小程序中 `wx.getUserInfo` 接口进行调整，小游戏中不受影响；\n* 2. `tip`：开发者工具中仅 2.10.4 及以上版本可访问 `wx.getUserProfile` 接口，在真机上可参考示例代码进行判断，无需根据版本号或者 `canIUse` 进行条件。\n* 3. `tip`：`wx.getUserProfile` 返回的加密数据中不包含 `openId` 和 `unionId` 字段。\n* 4. `bug`：开发者工具中 `2.10.4`~`2.16.1` 基础库版本通过 `<button open-type=\"getUserInfo\">` 会返回真实数据，真机上此区间会按照公告返回匿名数据。\n*\n* ```html\n* <view class=\"container\">\n*   <view class=\"userinfo\">\n*     <block wx:if=\"{{!hasUserInfo}}\">\n*       <button wx:if=\"{{canIUseGetUserProfile}}\" bindtap=\"getUserProfile\"> 获取头像昵称 </button>\n*       <button wx:else open-type=\"getUserInfo\" bindgetuserinfo=\"getUserInfo\"> 获取头像昵称 </button>\n*     </block>\n*     <block wx:else>\n*       <image bindtap=\"bindViewTap\" class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n*       <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n*     </block>\n*   </view>\n* </view>\n* ```\n*\n* ```js\nPage({\n  data: {\n    userInfo: {},\n    hasUserInfo: false,\n    canIUseGetUserProfile: false,\n  },\n  onLoad() {\n    if (wx.getUserProfile) {\n      this.setData({\n        canIUseGetUserProfile: true\n      })\n    }\n  },\n  getUserProfile(e) {\n    // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认\n    // 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗\n    wx.getUserProfile({\n      desc: '用于完善会员资料', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写\n      success: (res) => {\n        this.setData({\n          userInfo: res.userInfo,\n          hasUserInfo: true\n        })\n      }\n    })\n  },\n  getUserInfo(e) {\n    // 不推荐使用getUserInfo获取用户信息，预计自2021年4月13日起，getUserInfo将不再弹出弹窗，并直接返回匿名的用户个人信息\n    this.setData({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  },\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getVideoInfo": {
    "prefix": "getVideoInfo",
    "body": [
      "wx.getVideoInfo({",
      "  src: '${1:src}',",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.getVideoInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.getVideoInfo.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：支持\n         *\n         * 获取视频详细信息。 */",
    "detail": "function",
    "kind": 9
  },
  "getWeRunData": {
    "prefix": "getWeRunData",
    "body": [
      "wx.getWeRunData({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getWeRunData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：不支持\n*\n* 获取用户过去三十一天微信运动步数。需要先调用 [wx.login](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html) 接口。步数信息会在用户主动进入小程序时更新。\n*\n* **示例代码**\n*\n* ```js\nwx.getWeRunData({\n  success (res) {\n    // 拿 encryptedData 到开发者后台解密开放数据\n    const encryptedData = res.encryptedData\n    // 或拿 cloudID 通过云调用直接获取开放数据\n    const cloudID = res.cloudID\n  }\n})\n```\n*\n* **开放数据 JSON 结构**\n*\n* 敏感数据有两种获取方式，一是使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构：\n*\n* ```json\n{\n  \"stepInfoList\": [\n    {\n      \"timestamp\": 1445866601,\n      \"step\": 100\n    },\n    {\n      \"timestamp\": 1445876601,\n      \"step\": 120\n    }\n  ]\n}\n```\n*\n* stepInfoList 中，每一项结构如下：\n*\n* | 属性 | 类型 | 说明 |\n* | --- | ---- | --- |\n* | timestamp | number | 时间戳，表示数据对应的时间 |\n* | step | number | 微信运动步数 | */",
    "detail": "function",
    "kind": 9
  },
  "getWifiList": {
    "prefix": "getWifiList",
    "body": [
      "wx.getWifiList({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.getWifiList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getWifiList.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 请求获取 Wi-Fi 列表。`wifiList` 数据会在 [onGetWifiList](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html) 注册的回调中返回。 **Android 调用前需要 [用户授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html) scope.userLocation。**\n         *\n         * iOS 上将跳转到系统设置中的微信设置页，需要用户手动进入「无线局域网」设置页，并在系统扫描到设备后，小程序才能收到 onGetWifiList 回调。Android 不会跳转。\n         *\n         * **注意**\n         *\n         * 因系统问题，本方法在 iOS 11.0 及 11.1 两个版本失效。但在 iOS 11.2 中已修复。 */",
    "detail": "function",
    "kind": 9
  },
  "hideHomeButton": {
    "prefix": "hideHomeButton",
    "body": [
      "wx.hideHomeButton({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.hideHomeButton(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideHomeButton.html)\n         *\n         * 需要基础库： `2.8.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏返回首页按钮。微信7.0.7版本起，当用户打开的小程序最底层页面是非首页时，默认展示“返回首页”按钮，开发者可在页面 onShow 中调用 hideHomeButton 进行隐藏。 */",
    "detail": "function",
    "kind": 9
  },
  "hideKeyboard": {
    "prefix": "hideKeyboard",
    "body": [
      "wx.hideKeyboard({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.hideKeyboard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.hideKeyboard.html)\n*\n* 需要基础库： `2.8.2`\n*\n* 在插件中使用：不支持\n*\n* 在input、textarea等focus拉起键盘之后，手动调用此接口收起键盘\n*\n* **示例代码**\n*\n* ```js\nwx.hideKeyboard({\n  complete: res => {\n    console.log('hideKeyboard res', res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "hideLoading": {
    "prefix": "hideLoading",
    "body": [
      "wx.hideLoading({",
      "  noConflict: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.hideLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 隐藏 loading 提示框 */",
    "detail": "function",
    "kind": 9
  },
  "hideNavigationBarLoading": {
    "prefix": "hideNavigationBarLoading",
    "body": [
      "wx.hideNavigationBarLoading({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.hideNavigationBarLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideNavigationBarLoading.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 在当前页面隐藏导航条加载动画 */",
    "detail": "function",
    "kind": 9
  },
  "hideShareMenu": {
    "prefix": "hideShareMenu",
    "body": [
      "wx.hideShareMenu({",
      "  menus: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.hideShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.hideShareMenu.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 隐藏当前页面的转发按钮\n*\n* ****\n*\n* ## 注意事项\n*  - \"shareAppMessage\"表示“发送给朋友”按钮，\"shareTimeline\"表示“分享到朋友圈”按钮\n*  - 隐藏“发送给朋友”按钮时必须同时隐藏“分享到朋友圈”按钮，隐藏“分享到朋友圈”按钮时则允许不隐藏“发送给朋友”按钮\n*\n* **示例代码**\n*\n* ```js\nwx.hideShareMenu({\n  menus: ['shareAppMessage', 'shareTimeline']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "hideTabBar": {
    "prefix": "hideTabBar",
    "body": [
      "wx.hideTabBar({",
      "  animation: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.hideTabBar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBar.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏 tabBar */",
    "detail": "function",
    "kind": 9
  },
  "hideTabBarRedDot": {
    "prefix": "hideTabBarRedDot",
    "body": [
      "wx.hideTabBarRedDot({",
      "  index: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.hideTabBarRedDot(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBarRedDot.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏 tabBar 某一项的右上角的红点 */",
    "detail": "function",
    "kind": 9
  },
  "hideToast": {
    "prefix": "hideToast",
    "body": [
      "wx.hideToast({",
      "  noConflict: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.hideToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 隐藏消息提示框 */",
    "detail": "function",
    "kind": 9
  },
  "initFaceDetect": {
    "prefix": "initFaceDetect",
    "body": [
      "wx.initFaceDetect({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.initFaceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.initFaceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 初始化人脸检测。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html)\n         *\n         * ****\n         *\n         * ### 特别说明\n         * 若小程序人脸识别功能涉及采集、存储用户生物特征（如人脸照片或视频、身份证和手持身份证、身份证照和免冠照等），此类型服务需使用[微信原生人脸识别接口](https://developers.weixin.qq.com/community/develop/doc/000442d352c1202bd498ecb105c00d?highline=%E4%BA%BA%E8%84%B8%E6%A0%B8%E8%BA%AB)。 */",
    "detail": "function",
    "kind": 9
  },
  "isBluetoothDevicePaired": {
    "prefix": "isBluetoothDevicePaired",
    "body": [
      "wx.isBluetoothDevicePaired({",
      "  deviceId: '${1:deviceId}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.isBluetoothDevicePaired(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.isBluetoothDevicePaired.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.19.1`\n         *\n         * 查询蓝牙设备是否配对，仅安卓支持。 */",
    "detail": "function",
    "kind": 9
  },
  "join1v1Chat": {
    "prefix": "join1v1Chat",
    "body": [
      "wx.join1v1Chat({",
      "  caller: {",
      "    nickname: '${1:nickname}',",
      "    openid: '${2:openid}',",
      "    headImage: '${3:headImage}',",
      "  },",
      "  listener: {",
      "    nickname: '${5:nickname}',",
      "    openid: '${6:openid}',",
      "    headImage: '${7:headImage}',",
      "  },",
      "  backgroundType: ${9:backgroundType},",
      "  disableSwitchVoice: ${10:true},",
      "  minWindowType: ${11:0},",
      "  roomType: ${12:roomType},",
      "  success: (res) => {$13},",
      "  fail: (res) => {$14},",
      "  complete: (res) => {$15},",
      "})"
    ],
    "description": "/** [wx.join1v1Chat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.join1v1Chat.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 加入（创建）双人通话。 */",
    "detail": "function",
    "kind": 9
  },
  "joinVoIPChat": {
    "prefix": "joinVoIPChat",
    "body": [
      "wx.joinVoIPChat({",
      "  groupId: '${1:groupId}',",
      "  nonceStr: '${2:nonceStr}',",
      "  signature: '${3:signature}',",
      "  timeStamp: ${4:0},",
      "  forceCellularNetwork: ${5:true},",
      "  muteConfig: {",
      "    muteEarphone: ${6:true},",
      "    muteMicrophone: ${7:true},",
      "  },",
      "  roomType: ${9:roomType},",
      "  success: (result) => {$10},",
      "  fail: (res) => {$11},",
      "  complete: (res) => {$12},",
      "})"
    ],
    "description": "/** [wx.joinVoIPChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.joinVoIPChat.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 加入 (创建) 实时语音通话，更多信息可见 [实时语音指南](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/voip-chat.html)。调用前需要用户授权 `scope.record`，若房间类型为视频房间需要用户授权 `scope.camera`。 */",
    "detail": "function",
    "kind": 9
  },
  "loadFontFace": {
    "prefix": "loadFontFace",
    "body": [
      "wx.loadFontFace({",
      "  family: '${1:family}',",
      "  source: '${2:source}',",
      "  desc: {",
      "    style: '${3:style}',",
      "    variant: '${4:variant}',",
      "    weight: '${5:weight}',",
      "  },",
      "  global: ${7:true},",
      "  scopes: [$8],",
      "  success: (result) => {$9},",
      "  fail: (result) => {$10},",
      "  complete: (result) => {$11},",
      "})"
    ],
    "description": "/** [wx.loadFontFace(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 动态加载网络字体，文件地址需为下载类型。[2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html)起支持全局生效，需在 `app.js` 中调用。\n*\n* 注意：\n* 1. 字体文件返回的 contet-type 参考 [font](https://www.iana.org/assignments/media-types/media-types.xhtml#font)，格式不正确时会解析失败。\n* 2. 字体链接必须是https（ios不支持http)\n* 3. 字体链接必须是同源下的，或开启了cors支持，小程序的域名是`servicewechat.com`\n* 4. 工具里提示 Faild to load font可以忽略\n* 5. [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 以前仅在调用页面生效。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/b6Zrajm67R2x)\n* ```js\nwx.loadFontFace({\n  family: 'Bitstream Vera Serif Bold',\n  source: 'url(\"https://sungd.github.io/Pacifico.ttf\")',\n  success: console.log\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "login": {
    "prefix": "login",
    "body": [
      "wx.login({",
      "  timeout: ${1:0},",
      "  success: (result) => {$2},",
      "  fail: (err) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.login(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，需要在用户信息功能页中获得用户授权或满足一定条件后调用。否则将返回 fail。详见 [用户信息功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html)\n*\n* 调用接口获取登录凭证（code）。通过凭证进而换取用户登录态信息，包括用户在当前小程序的唯一标识（openid）、微信开放平台帐号下的唯一标识（unionid，若当前小程序已绑定到微信开放平台帐号）及本次登录的会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。\n*\n* **示例代码**\n*\n* ```js\nwx.login({\n  success (res) {\n    if (res.code) {\n      //发起网络请求\n      wx.request({\n        url: 'https://example.com/onLogin',\n        data: {\n          code: res.code\n        }\n      })\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "makeBluetoothPair": {
    "prefix": "makeBluetoothPair",
    "body": [
      "wx.makeBluetoothPair({",
      "  deviceId: '${1:deviceId}',",
      "  pin: '${2:pin}',",
      "  timeout: ${3:0},",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.makeBluetoothPair(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.makeBluetoothPair.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.12.0`\n         *\n         * 蓝牙配对接口，仅安卓支持。\n         *\n         * 通常情况下（需要指定 `pin` 码或者密码时）系统会接管配对流程，直接调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 即可。该接口只应当在开发者不想让用户手动输入 `pin` 码且真机验证确认可以正常生效情况下用。 */",
    "detail": "function",
    "kind": 9
  },
  "makePhoneCall": {
    "prefix": "makePhoneCall",
    "body": [
      "wx.makePhoneCall({",
      "  phoneNumber: '${1:phoneNumber}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.makePhoneCall(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/phone/wx.makePhoneCall.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 拨打电话\n*\n* **示例代码**\n*\n* ```js\nwx.makePhoneCall({\n  phoneNumber: '1340000' //仅为示例，并非真实的电话号码\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "navigateBack": {
    "prefix": "navigateBack",
    "body": [
      "wx.navigateBack({",
      "  delta: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.navigateBack(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 关闭当前页面，返回上一页面或多级页面。可通过 [getCurrentPages](https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html) 获取当前的页面栈，决定需要返回几层。 */",
    "detail": "function",
    "kind": 9
  },
  "navigateBackMiniProgram": {
    "prefix": "navigateBackMiniProgram",
    "body": [
      "wx.navigateBackMiniProgram({",
      "  extraData: ${1:extraData},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.navigateBackMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateBackMiniProgram.html)\n*\n* 需要基础库： `1.3.0`\n*\n* 在插件中使用：不支持\n*\n* 返回到上一个小程序。只有在当前小程序是被其他小程序打开时可以调用成功\n*\n* 注意：**微信客户端 iOS 6.5.9，Android 6.5.10 及以上版本支持**\n*\n* **示例代码**\n*\n* ```js\nwx.navigateBackMiniProgram({\n  extraData: {\n    foo: 'bar'\n  },\n  success(res) {\n    // 返回成功\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "navigateTo": {
    "prefix": "navigateTo",
    "body": [
      "wx.navigateTo({",
      "  url: '${1:url}',",
      "  events: ${2:events},",
      "  routeType: '${3:routeType}',",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.navigateTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 可以返回到原页面。小程序中页面栈最多十层。\n*\n* **示例代码**\n*\n* ```js\nwx.navigateTo({\n  url: 'test?id=1',\n  events: {\n    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n    acceptDataFromOpenedPage: function(data) {\n      console.log(data)\n    },\n    someEvent: function(data) {\n      console.log(data)\n    }\n    ...\n  },\n  success: function(res) {\n    // 通过eventChannel向被打开页面传送数据\n    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })\n  }\n})\n```\n*\n* ```javascript\n//test.js\nPage({\n  onLoad: function(option){\n    console.log(option.query)\n    const eventChannel = this.getOpenerEventChannel()\n    eventChannel.emit('acceptDataFromOpenedPage', {data: 'test'});\n    eventChannel.emit('someEvent', {data: 'test'});\n    // 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据\n    eventChannel.on('acceptDataFromOpenerPage', function(data) {\n      console.log(data)\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "navigateToMiniProgram": {
    "prefix": "navigateToMiniProgram",
    "body": [
      "wx.navigateToMiniProgram({",
      "  appId: '${1:appId}',",
      "  envVersion: ${2:envVersion},",
      "  extraData: ${3:extraData},",
      "  noRelaunchIfPathUnchanged: ${4:true},",
      "  path: '${5:path}',",
      "  shortLink: '${6:shortLink}',",
      "  success: (res) => {$7},",
      "  fail: (res) => {$8},",
      "  complete: (res) => {$9},",
      "})"
    ],
    "description": "/** [wx.navigateToMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)\n*\n* 需要基础库： `1.3.0`\n*\n* 在插件中使用：需要基础库 `2.18.1`\n*\n* 打开另一个小程序\n*\n* **使用限制**\n*\n*  ##### 需要用户触发跳转\n*  从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。\n*  ##### 需要用户确认跳转\n*  从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 `fail cancel`。\n*  ##### 无需声明跳转名单，不限跳转数量（众测中）\n* 1. 从2020年4月24日起，使用跳转其他小程序功能将无需在全局配置中声明跳转名单，调用此接口时将不再校验所跳转的 AppID 是否在 navigateToMiniProgramAppIdList 中。\n* 2. 从2020年4月24日起，跳转其他小程序将不再受数量限制，使用此功能时请注意遵守运营规范。\n*\n* **运营规范**\n*\n* 平台将坚决打击小程序盒子等互推行为，使用此功能时请严格遵守[《微信小程序平台运营规范》](https://developers.weixin.qq.com/miniprogram/product/#_5-10-%E4%BA%92%E6%8E%A8%E8%A1%8C%E4%B8%BA)，若发现小程序违反运营规范将被下架处理。\n*\n* **关于调试**\n*\n* - 在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。[详情](https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#跳转小程序调试支持)\n* - 开发者工具上支持被跳转的小程序处理接收参数的调试。[详情](https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#跳转小程序调试支持)\n*\n* **示例代码**\n*\n* ```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: 'page/index/index?id=123',\n  extraData: {\n    foo: 'bar'\n  },\n  envVersion: 'develop',\n  success(res) {\n    // 打开成功\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "nextTick": {
    "prefix": "nextTick",
    "body": [
      "wx.nextTick(${1:callback})"
    ],
    "description": "/** [wx.nextTick(function callback)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/custom-component/wx.nextTick.html)\n*\n* 需要基础库： `2.2.3`\n*\n* 在插件中使用：需要基础库 `2.7.1`\n*\n* 延迟一部分操作到下一个时间片再执行。（类似于 setTimeout）\n*\n* **说明**\n*\n* 因为自定义组件中的 setData 和 triggerEvent 等接口本身是同步的操作，当这几个接口被连续调用时，都是在一个同步流程中执行完的，因此若逻辑不当可能会导致出错。\n*\n* 一个极端的案例：当父组件的 setData 引发了子组件的 triggerEvent，进而使得父组件又进行了一次 setData，期间有通过 wx:if 语句对子组件进行卸载，就有可能引发奇怪的错误，所以对于不需要在一个同步流程内完成的逻辑，可以使用此接口延迟到下一个时间片再执行。\n*\n* **示例代码**\n*\n* ```js\nComponent({\n  doSth() {\n    this.setData({ number: 1 }) // 直接在当前同步流程中执行\n\n    wx.nextTick(() => {\n      this.setData({ number: 3 }) // 在当前同步流程结束后，下一个时间片执行\n    })\n\n    this.setData({ number: 2 }) // 直接在当前同步流程中执行\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "notifyBLECharacteristicValueChange": {
    "prefix": "notifyBLECharacteristicValueChange",
    "body": [
      "wx.notifyBLECharacteristicValueChange({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "  state: ${4:true},",
      "  type: '${5:type}',",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.notifyBLECharacteristicValueChange(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 启用蓝牙低功耗设备特征值变化时的 notify 功能，订阅特征。注意：必须设备的特征支持 notify 或者 indicate 才可以成功调用。\n*\n* 另外，必须先启用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 才能监听到设备 `characteristicValueChange` 事件\n*\n* **注意**\n*\n* - 订阅操作成功后需要设备主动更新特征的 value，才会触发 [wx.onBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html) 回调。\n* - 安卓平台上，在本接口调用成功后立即调用 [wx.writeBLECharacteristicValue](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html) 接口，在部分机型上会发生 10008 系统错误\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.notifyBLECharacteristicValueChange({\n  state: true, // 启用 notify 功能\n  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  success (res) {\n    console.log('notifyBLECharacteristicValueChange success', res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offAccelerometerChange": {
    "prefix": "offAccelerometerChange",
    "body": [
      "wx.offAccelerometerChange((res) => {$1})"
    ],
    "description": "/** [wx.offAccelerometerChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.offAccelerometerChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除加速度数据事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAccelerometerChange(listener)\nwx.offAccelerometerChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offAppHide": {
    "prefix": "offAppHide",
    "body": [
      "wx.offAppHide((res) => {$1})"
    ],
    "description": "/** [wx.offAppHide(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppHide.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序切后台事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAppHide(listener)\nwx.offAppHide(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offAppShow": {
    "prefix": "offAppShow",
    "body": [
      "wx.offAppShow((res) => {$1})"
    ],
    "description": "/** [wx.offAppShow(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppShow.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序切前台事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAppShow(listener)\nwx.offAppShow(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offAudioInterruptionBegin": {
    "prefix": "offAudioInterruptionBegin",
    "body": [
      "wx.offAudioInterruptionBegin((res) => {$1})"
    ],
    "description": "/** [wx.offAudioInterruptionBegin(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionBegin.html)\n*\n* 需要基础库： `2.6.2`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除音频因为受到系统占用而被中断开始事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAudioInterruptionBegin(listener)\nwx.offAudioInterruptionBegin(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offAudioInterruptionEnd": {
    "prefix": "offAudioInterruptionEnd",
    "body": [
      "wx.offAudioInterruptionEnd((res) => {$1})"
    ],
    "description": "/** [wx.offAudioInterruptionEnd(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionEnd.html)\n*\n* 需要基础库： `2.6.2`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除音频中断结束事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAudioInterruptionEnd(listener)\nwx.offAudioInterruptionEnd(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBLECharacteristicValueChange": {
    "prefix": "offBLECharacteristicValueChange",
    "body": [
      "wx.offBLECharacteristicValueChange()"
    ],
    "description": "/** [wx.offBLECharacteristicValueChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLECharacteristicValueChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙低功耗设备的特征值变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBLECharacteristicValueChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBLEConnectionStateChange": {
    "prefix": "offBLEConnectionStateChange",
    "body": [
      "wx.offBLEConnectionStateChange((result) => {$1})"
    ],
    "description": "/** [wx.offBLEConnectionStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLEConnectionStateChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙低功耗连接状态改变事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEConnectionStateChange(listener)\nwx.offBLEConnectionStateChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBLEMTUChange": {
    "prefix": "offBLEMTUChange",
    "body": [
      "wx.offBLEMTUChange((result) => {$1})"
    ],
    "description": "/** [wx.offBLEMTUChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLEMTUChange.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 移除蓝牙低功耗的最大传输单元变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEMTUChange(listener)\nwx.offBLEMTUChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBLEPeripheralConnectionStateChanged": {
    "prefix": "offBLEPeripheralConnectionStateChanged",
    "body": [
      "wx.offBLEPeripheralConnectionStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offBLEPeripheralConnectionStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.offBLEPeripheralConnectionStateChanged.html)\n*\n* 需要基础库： `2.10.3`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 移除当前外围设备被连接或断开连接事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEPeripheralConnectionStateChanged(listener)\nwx.offBLEPeripheralConnectionStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBeaconServiceChange": {
    "prefix": "offBeaconServiceChange",
    "body": [
      "wx.offBeaconServiceChange()"
    ],
    "description": "/** [wx.offBeaconServiceChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconServiceChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除 Beacon 服务状态变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBeaconServiceChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBeaconUpdate": {
    "prefix": "offBeaconUpdate",
    "body": [
      "wx.offBeaconUpdate()"
    ],
    "description": "/** [wx.offBeaconUpdate()](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconUpdate.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除 Beacon 设备更新事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBeaconUpdate()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBluetoothAdapterStateChange": {
    "prefix": "offBluetoothAdapterStateChange",
    "body": [
      "wx.offBluetoothAdapterStateChange()"
    ],
    "description": "/** [wx.offBluetoothAdapterStateChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.offBluetoothAdapterStateChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙适配器状态变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBluetoothAdapterStateChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offBluetoothDeviceFound": {
    "prefix": "offBluetoothDeviceFound",
    "body": [
      "wx.offBluetoothDeviceFound()"
    ],
    "description": "/** [wx.offBluetoothDeviceFound()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.offBluetoothDeviceFound.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除搜索到新设备的事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBluetoothDeviceFound()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offCompassChange": {
    "prefix": "offCompassChange",
    "body": [
      "wx.offCompassChange((res) => {$1})"
    ],
    "description": "/** [wx.offCompassChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.offCompassChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除罗盘数据变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onCompassChange(listener)\nwx.offCompassChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offCopyUrl": {
    "prefix": "offCopyUrl",
    "body": [
      "wx.offCopyUrl()"
    ],
    "description": "/** [wx.offCopyUrl()](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.offCopyUrl.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 移除用户点击右上角菜单的「复制链接」按钮时触发的事件的全部监听函数 */",
    "detail": "function",
    "kind": 9
  },
  "offDeviceMotionChange": {
    "prefix": "offDeviceMotionChange",
    "body": [
      "wx.offDeviceMotionChange((res) => {$1})"
    ],
    "description": "/** [wx.offDeviceMotionChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.offDeviceMotionChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除设备方向变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onDeviceMotionChange(listener)\nwx.offDeviceMotionChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offError": {
    "prefix": "offError",
    "body": [
      "wx.offError((res) => {$1})"
    ],
    "description": "/** [wx.offError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offError.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序错误事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onError(listener)\nwx.offError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offGetWifiList": {
    "prefix": "offGetWifiList",
    "body": [
      "wx.offGetWifiList((result) => {$1})"
    ],
    "description": "/** [wx.offGetWifiList(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offGetWifiList.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除获取到 Wi-Fi 列表数据事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onGetWifiList(listener)\nwx.offGetWifiList(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offGyroscopeChange": {
    "prefix": "offGyroscopeChange",
    "body": [
      "wx.offGyroscopeChange((res) => {$1})"
    ],
    "description": "/** [wx.offGyroscopeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.offGyroscopeChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除陀螺仪数据变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onGyroscopeChange(listener)\nwx.offGyroscopeChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offHCEMessage": {
    "prefix": "offHCEMessage",
    "body": [
      "wx.offHCEMessage((result) => {$1})"
    ],
    "description": "/** [wx.offHCEMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.offHCEMessage.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除接收 NFC 设备消息事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onHCEMessage(listener)\nwx.offHCEMessage(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offKeyboardHeightChange": {
    "prefix": "offKeyboardHeightChange",
    "body": [
      "wx.offKeyboardHeightChange((result) => {$1})"
    ],
    "description": "/** [wx.offKeyboardHeightChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.offKeyboardHeightChange.html)\n*\n* 需要基础库： `2.9.2`\n*\n* 在插件中使用：不支持\n*\n* 移除键盘高度变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onKeyboardHeightChange(listener)\nwx.offKeyboardHeightChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLazyLoadError": {
    "prefix": "offLazyLoadError",
    "body": [
      "wx.offLazyLoadError((result) => {$1})"
    ],
    "description": "/** [wx.offLazyLoadError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offLazyLoadError.html)\n*\n* 需要基础库： `2.24.3`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序异步组件加载失败事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLazyLoadError(listener)\nwx.offLazyLoadError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocalServiceDiscoveryStop": {
    "prefix": "offLocalServiceDiscoveryStop",
    "body": [
      "wx.offLocalServiceDiscoveryStop((res) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceDiscoveryStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceDiscoveryStop.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务停止搜索的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceDiscoveryStop(listener)\nwx.offLocalServiceDiscoveryStop(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocalServiceFound": {
    "prefix": "offLocalServiceFound",
    "body": [
      "wx.offLocalServiceFound((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceFound.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务发现的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceFound(listener)\nwx.offLocalServiceFound(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocalServiceLost": {
    "prefix": "offLocalServiceLost",
    "body": [
      "wx.offLocalServiceLost((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceLost(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceLost.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务离开的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceLost(listener)\nwx.offLocalServiceLost(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocalServiceResolveFail": {
    "prefix": "offLocalServiceResolveFail",
    "body": [
      "wx.offLocalServiceResolveFail((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceResolveFail(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceResolveFail.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务解析失败的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceResolveFail(listener)\nwx.offLocalServiceResolveFail(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocationChange": {
    "prefix": "offLocationChange",
    "body": [
      "wx.offLocationChange((result) => {$1})"
    ],
    "description": "/** [wx.offLocationChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：不支持\n*\n* 移除实时地理位置变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocationChange(listener)\nwx.offLocationChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offLocationChangeError": {
    "prefix": "offLocationChangeError",
    "body": [
      "wx.offLocationChangeError((result) => {$1})"
    ],
    "description": "/** [wx.offLocationChangeError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChangeError.html)\n*\n* 需要基础库： `2.19.5`\n*\n* 在插件中使用：不支持\n*\n* 移除持续定位接口返回失败时触发。的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocationChangeError(listener)\nwx.offLocationChangeError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offMemoryWarning": {
    "prefix": "offMemoryWarning",
    "body": [
      "wx.offMemoryWarning((result) => {$1})"
    ],
    "description": "/** [wx.offMemoryWarning(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/memory/wx.offMemoryWarning.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：不支持\n*\n* 移除内存不足告警事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onMemoryWarning(listener)\nwx.offMemoryWarning(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offNetworkStatusChange": {
    "prefix": "offNetworkStatusChange",
    "body": [
      "wx.offNetworkStatusChange((res) => {$1})"
    ],
    "description": "/** [wx.offNetworkStatusChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkStatusChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除网络状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onNetworkStatusChange(listener)\nwx.offNetworkStatusChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offNetworkWeakChange": {
    "prefix": "offNetworkWeakChange",
    "body": [
      "wx.offNetworkWeakChange((result) => {$1})"
    ],
    "description": "/** [wx.offNetworkWeakChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkWeakChange.html)\n*\n* 需要基础库： `2.21.0`\n*\n* 在插件中使用：不支持\n*\n* 移除弱网状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onNetworkWeakChange(listener)\nwx.offNetworkWeakChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offPageNotFound": {
    "prefix": "offPageNotFound",
    "body": [
      "wx.offPageNotFound((result) => {$1})"
    ],
    "description": "/** [wx.offPageNotFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offPageNotFound.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序要打开的页面不存在事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onPageNotFound(listener)\nwx.offPageNotFound(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offScreenRecordingStateChanged": {
    "prefix": "offScreenRecordingStateChanged",
    "body": [
      "wx.offScreenRecordingStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offScreenRecordingStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offScreenRecordingStateChanged.html)\n*\n* 需要基础库： `2.24.0`\n*\n* 在插件中使用：不支持\n*\n* 移除用户录屏事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onScreenRecordingStateChanged(listener)\nwx.offScreenRecordingStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offThemeChange": {
    "prefix": "offThemeChange",
    "body": [
      "wx.offThemeChange((result) => {$1})"
    ],
    "description": "/** [wx.offThemeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offThemeChange.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：不支持\n*\n* 移除系统主题改变事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onThemeChange(listener)\nwx.offThemeChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offUnhandledRejection": {
    "prefix": "offUnhandledRejection",
    "body": [
      "wx.offUnhandledRejection((result) => {$1})"
    ],
    "description": "/** [wx.offUnhandledRejection(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offUnhandledRejection.html)\n*\n* 需要基础库： `2.10.0`\n*\n* 在插件中使用：不支持\n*\n* 移除未处理的 Promise 拒绝事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onUnhandledRejection(listener)\nwx.offUnhandledRejection(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offUserCaptureScreen": {
    "prefix": "offUserCaptureScreen",
    "body": [
      "wx.offUserCaptureScreen(${1:callback})"
    ],
    "description": "/** [wx.offUserCaptureScreen(function callback)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offUserCaptureScreen.html)\n         *\n         * 需要基础库： `2.9.3`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 用户主动截屏事件。取消事件监听。 */",
    "detail": "function",
    "kind": 9
  },
  "offVoIPChatInterrupted": {
    "prefix": "offVoIPChatInterrupted",
    "body": [
      "wx.offVoIPChatInterrupted((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatInterrupted(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatInterrupted.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除被动断开实时语音通话事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatInterrupted(listener)\nwx.offVoIPChatInterrupted(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offVoIPChatMembersChanged": {
    "prefix": "offVoIPChatMembersChanged",
    "body": [
      "wx.offVoIPChatMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatMembersChanged.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除实时语音通话成员在线状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatMembersChanged(listener)\nwx.offVoIPChatMembersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offVoIPChatSpeakersChanged": {
    "prefix": "offVoIPChatSpeakersChanged",
    "body": [
      "wx.offVoIPChatSpeakersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatSpeakersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatSpeakersChanged.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除实时语音通话成员通话状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatSpeakersChanged(listener)\nwx.offVoIPChatSpeakersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offVoIPChatStateChanged": {
    "prefix": "offVoIPChatStateChanged",
    "body": [
      "wx.offVoIPChatStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatStateChanged.html)\n*\n* 需要基础库： `2.16.0`\n*\n* 在插件中使用：不支持\n*\n* 移除房间状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatStateChanged(listener)\nwx.offVoIPChatStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offVoIPVideoMembersChanged": {
    "prefix": "offVoIPVideoMembersChanged",
    "body": [
      "wx.offVoIPVideoMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPVideoMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPVideoMembersChanged.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：不支持\n*\n* 移除实时语音通话成员视频状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPVideoMembersChanged(listener)\nwx.offVoIPVideoMembersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offWifiConnected": {
    "prefix": "offWifiConnected",
    "body": [
      "wx.offWifiConnected((result) => {$1})"
    ],
    "description": "/** [wx.offWifiConnected(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offWifiConnected.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除连接上 Wi-Fi 的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWifiConnected(listener)\nwx.offWifiConnected(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offWifiConnectedWithPartialInfo": {
    "prefix": "offWifiConnectedWithPartialInfo",
    "body": [
      "wx.offWifiConnectedWithPartialInfo((result) => {$1})"
    ],
    "description": "/** [wx.offWifiConnectedWithPartialInfo(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offWifiConnectedWithPartialInfo.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 移除连接上 Wi-Fi 的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWifiConnectedWithPartialInfo(listener)\nwx.offWifiConnectedWithPartialInfo(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "offWindowResize": {
    "prefix": "offWindowResize",
    "body": [
      "wx.offWindowResize((result) => {$1})"
    ],
    "description": "/** [wx.offWindowResize(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.offWindowResize.html)\n*\n* 需要基础库： `2.3.0`\n*\n* 在插件中使用：不支持\n*\n* 移除窗口尺寸变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWindowResize(listener)\nwx.offWindowResize(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onAccelerometerChange": {
    "prefix": "onAccelerometerChange",
    "body": [
      "wx.onAccelerometerChange((result) => {$1})"
    ],
    "description": "/** [wx.onAccelerometerChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.onAccelerometerChange.html)\n*\n* 在插件中使用：不支持\n*\n* 监听加速度数据事件。频率根据 [wx.startAccelerometer()](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html) 的 interval 参数, 接口调用后会自动开始监听。\n*\n* **示例代码**\n*\n* ```js\nwx.onAccelerometerChange(callback)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onAppHide": {
    "prefix": "onAppHide",
    "body": [
      "wx.onAppHide((res) => {$1})"
    ],
    "description": "/** [wx.onAppHide(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序切后台事件。该事件与 [`App.onHide`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onhide) 的回调时机一致。 */",
    "detail": "function",
    "kind": 9
  },
  "onAppShow": {
    "prefix": "onAppShow",
    "body": [
      "wx.onAppShow((options) => {$1})"
    ],
    "description": "/** [wx.onAppShow(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序切前台事件。该事件与 [`App.onShow`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onshowobject-object) 的回调参数一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无`referrerInfo`的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "onAudioInterruptionBegin": {
    "prefix": "onAudioInterruptionBegin",
    "body": [
      "wx.onAudioInterruptionBegin((res) => {$1})"
    ],
    "description": "/** [wx.onAudioInterruptionBegin(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionBegin.html)\n         *\n         * 需要基础库： `2.6.2`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听音频因为受到系统占用而被中断开始事件。以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天、有声广告开始播放、实名认证页面弹出等。此事件触发后，小程序内所有音频会暂停。 */",
    "detail": "function",
    "kind": 9
  },
  "onAudioInterruptionEnd": {
    "prefix": "onAudioInterruptionEnd",
    "body": [
      "wx.onAudioInterruptionEnd((res) => {$1})"
    ],
    "description": "/** [wx.onAudioInterruptionEnd(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionEnd.html)\n         *\n         * 需要基础库： `2.6.2`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听音频中断结束事件。在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功 */",
    "detail": "function",
    "kind": 9
  },
  "onBLECharacteristicValueChange": {
    "prefix": "onBLECharacteristicValueChange",
    "body": [
      "wx.onBLECharacteristicValueChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLECharacteristicValueChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙低功耗设备的特征值变化事件。必须先调用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 接口才能接收到设备推送的 notification。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进制字符串示例\nfunction ab2hex(buffer) {\n  let hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.onBLECharacteristicValueChange(function(res) {\n  console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)\n  console.log(ab2hex(res.value))\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBLEConnectionStateChange": {
    "prefix": "onBLEConnectionStateChange",
    "body": [
      "wx.onBLEConnectionStateChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLEConnectionStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙低功耗连接状态改变事件。包括开发者主动连接或断开连接，设备丢失，连接异常断开等等\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBLEConnectionStateChange(function(res) {\n  // 该方法回调中可以用于处理连接意外断开等异常情况\n  console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBLEMTUChange": {
    "prefix": "onBLEMTUChange",
    "body": [
      "wx.onBLEMTUChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLEMTUChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEMTUChange.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 监听蓝牙低功耗的最大传输单元变化事件（仅安卓触发）。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBLEMTUChange(function (res) {\n  console.log('bluetooth mtu is', res.mtu)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBLEPeripheralConnectionStateChanged": {
    "prefix": "onBLEPeripheralConnectionStateChanged",
    "body": [
      "wx.onBLEPeripheralConnectionStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onBLEPeripheralConnectionStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.onBLEPeripheralConnectionStateChanged.html)\n         *\n         * 需要基础库： `2.10.3`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 监听当前外围设备被连接或断开连接事件 */",
    "detail": "function",
    "kind": 9
  },
  "onBackgroundAudioPause": {
    "prefix": "onBackgroundAudioPause",
    "body": [
      "wx.onBackgroundAudioPause((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioPause(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPause.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐暂停事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onBackgroundAudioPlay": {
    "prefix": "onBackgroundAudioPlay",
    "body": [
      "wx.onBackgroundAudioPlay((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioPlay(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPlay.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐播放事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onBackgroundAudioStop": {
    "prefix": "onBackgroundAudioStop",
    "body": [
      "wx.onBackgroundAudioStop((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioStop.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐停止事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onBackgroundFetchData": {
    "prefix": "onBackgroundFetchData",
    "body": [
      "wx.onBackgroundFetchData((result) => {$1})"
    ],
    "description": "/** [wx.onBackgroundFetchData(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.onBackgroundFetchData.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听收到 backgroundFetch 数据事件。如果监听时请求已经完成，则事件不会触发。建议和 [wx.getBackgroundFetchData](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchData.html) 配合使用 */",
    "detail": "function",
    "kind": 9
  },
  "onBeaconServiceChange": {
    "prefix": "onBeaconServiceChange",
    "body": [
      "wx.onBeaconServiceChange((result) => {$1})"
    ],
    "description": "/** [wx.onBeaconServiceChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconServiceChange.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 监听 Beacon 服务状态变化事件，仅能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onBeaconServiceChange(res => {\n   console.log(res.available, res.discovering)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBeaconUpdate": {
    "prefix": "onBeaconUpdate",
    "body": [
      "wx.onBeaconUpdate((result) => {$1})"
    ],
    "description": "/** [wx.onBeaconUpdate(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconUpdate.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 监听 Beacon 设备更新事件，仅能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onBeaconUpdate(res => {\n   console.log(res.beacons)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBluetoothAdapterStateChange": {
    "prefix": "onBluetoothAdapterStateChange",
    "body": [
      "wx.onBluetoothAdapterStateChange((result) => {$1})"
    ],
    "description": "/** [wx.onBluetoothAdapterStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙适配器状态变化事件\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBluetoothAdapterStateChange(function (res) {\n  console.log('adapterState changed, now is', res)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onBluetoothDeviceFound": {
    "prefix": "onBluetoothDeviceFound",
    "body": [
      "wx.onBluetoothDeviceFound((result) => {$1})"
    ],
    "description": "/** [wx.onBluetoothDeviceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听搜索到新设备的事件\n*\n* **注意**\n*\n* - 若在 [wx.onBluetoothDeviceFound](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html) 回调了某个设备，则此设备会添加到 [wx.getBluetoothDevices](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html) 接口获取到的数组中。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进度字符串示例\nfunction ab2hex(buffer) {\n  var hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.onBluetoothDeviceFound(function(res) {\n  var devices = res.devices;\n  console.log('new device list has founded')\n  console.dir(devices)\n  console.log(ab2hex(devices[0].advertisData))\n})\n```\n*\n* **注意**\n*\n* - 蓝牙设备在被搜索到时，系统返回的 `name` 字段一般为广播包中的 `LocalName` 字段中的设备名称，而如果与蓝牙设备建立连接，系统返回的 `name` 字段会改为从蓝牙设备上获取到的 `GattName`。若需要动态改变设备名称并展示，建议使用 `localName` 字段。\n* - 安卓下部分机型需要有位置权限才能搜索到设备，需留意是否开启了位置权限 */",
    "detail": "function",
    "kind": 9
  },
  "onCompassChange": {
    "prefix": "onCompassChange",
    "body": [
      "wx.onCompassChange((result) => {$1})"
    ],
    "description": "/** [wx.onCompassChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.onCompassChange.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听罗盘数据变化事件。频率：5 次/秒，接口调用后会自动开始监听，可使用 wx.stopCompass 停止监听。\n         *\n         * **accuracy 在 iOS/Android 的差异**\n         *\n         * 由于平台差异，accuracy 在 iOS/Android 的值不同。\n         *\n         * - iOS：accuracy 是一个 number 类型的值，表示相对于磁北极的偏差。0 表示设备指向磁北，90 表示指向东，180 表示指向南，依此类推。\n         * - Android：accuracy 是一个 string 类型的枚举值。\n         *\n         * | 值              | 说明                                                                                   |\n         * | --------------- | -------------------------------------------------------------------------------------- |\n         * | high            | 高精度                                                                                 |\n         * | medium          | 中等精度                                                                               |\n         * | low             | 低精度                                                                                 |\n         * | no-contact      | 不可信，传感器失去连接                                                                 |\n         * | unreliable      | 不可信，原因未知                                                                       |\n         * | unknow ${value} | 未知的精度枚举值，即该 Android 系统此时返回的表示精度的 value 不是一个标准的精度枚举值 | */",
    "detail": "function",
    "kind": 9
  },
  "onCopyUrl": {
    "prefix": "onCopyUrl",
    "body": [
      "wx.onCopyUrl((result) => {$1})"
    ],
    "description": "/** [wx.onCopyUrl(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.onCopyUrl.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听用户点击右上角菜单的「复制链接」按钮时触发的事件。本接口为 Beta 版本，暂只在 Android 平台支持。 */",
    "detail": "function",
    "kind": 9
  },
  "onDeviceMotionChange": {
    "prefix": "onDeviceMotionChange",
    "body": [
      "wx.onDeviceMotionChange((result) => {$1})"
    ],
    "description": "/** [wx.onDeviceMotionChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.onDeviceMotionChange.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听设备方向变化事件。频率根据 [wx.startDeviceMotionListening()](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html) 的 interval 参数。可以使用 [wx.stopDeviceMotionListening()](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html) 停止监听。 */",
    "detail": "function",
    "kind": 9
  },
  "onError": {
    "prefix": "onError",
    "body": [
      "wx.onError((message, stack) => {$1})"
    ],
    "description": "/** [wx.onError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序错误事件。如脚本错误或 API 调用报错等。该事件与 [`App.onError`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onerrorstring-error) 的回调时机与参数一致。 */",
    "detail": "function",
    "kind": 9
  },
  "onGetWifiList": {
    "prefix": "onGetWifiList",
    "body": [
      "wx.onGetWifiList((result) => {$1})"
    ],
    "description": "/** [wx.onGetWifiList(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听获取到 Wi-Fi 列表数据事件 */",
    "detail": "function",
    "kind": 9
  },
  "onGyroscopeChange": {
    "prefix": "onGyroscopeChange",
    "body": [
      "wx.onGyroscopeChange((result) => {$1})"
    ],
    "description": "/** [wx.onGyroscopeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.onGyroscopeChange.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听陀螺仪数据变化事件。频率根据 [wx.startGyroscope()](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html) 的 interval 参数。可以使用 [wx.stopGyroscope()](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html) 停止监听。 */",
    "detail": "function",
    "kind": 9
  },
  "onHCEMessage": {
    "prefix": "onHCEMessage",
    "body": [
      "wx.onHCEMessage((result) => {$1})"
    ],
    "description": "/** [wx.onHCEMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.onHCEMessage.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听接收 NFC 设备消息事件。仅能注册一个监听 */",
    "detail": "function",
    "kind": 9
  },
  "onKeyboardHeightChange": {
    "prefix": "onKeyboardHeightChange",
    "body": [
      "wx.onKeyboardHeightChange((result) => {$1})"
    ],
    "description": "/** [wx.onKeyboardHeightChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.onKeyboardHeightChange.html)\n*\n* 需要基础库： `2.7.0`\n*\n* 在插件中使用：不支持\n*\n* 监听键盘高度变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onKeyboardHeightChange(res => {\n  console.log(res.height)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onLazyLoadError": {
    "prefix": "onLazyLoadError",
    "body": [
      "wx.onLazyLoadError((result) => {$1})"
    ],
    "description": "/** [wx.onLazyLoadError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onLazyLoadError.html)\n         *\n         * 需要基础库： `2.24.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序异步组件加载失败事件。\n         *\n         * **注意**\n         *\n         * - 加载异步组件通常需要下载分包，若分包下载超时，则会触发 errMsg 为 \"loadSubpackage: timeout\" 的回调，默认超时等待时间为 5 秒。\n         * - 可以通过第二个参数指定超时时间（单位：ms），该设置全局有效，多次指定超时时间则覆盖前面。\n         * - 分包确认下载失败时，会再次触发 errMsg 为 \"loadSubpackage: fail\" 的回调。\n         * - 若在页面中使用该接口进行监听，请确保在必要时手动调用 offLazyLoadError 取消监听，以避免非预期的内存泄漏。 */",
    "detail": "function",
    "kind": 9
  },
  "onLocalServiceDiscoveryStop": {
    "prefix": "onLocalServiceDiscoveryStop",
    "body": [
      "wx.onLocalServiceDiscoveryStop((res) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceDiscoveryStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceDiscoveryStop.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务停止搜索的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onLocalServiceFound": {
    "prefix": "onLocalServiceFound",
    "body": [
      "wx.onLocalServiceFound((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceFound.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务发现的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onLocalServiceLost": {
    "prefix": "onLocalServiceLost",
    "body": [
      "wx.onLocalServiceLost((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceLost(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceLost.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务离开的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onLocalServiceResolveFail": {
    "prefix": "onLocalServiceResolveFail",
    "body": [
      "wx.onLocalServiceResolveFail((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceResolveFail(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceResolveFail.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务解析失败的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onLocationChange": {
    "prefix": "onLocationChange",
    "body": [
      "wx.onLocationChange((result) => {$1})"
    ],
    "description": "/** [wx.onLocationChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：不支持\n*\n* 监听实时地理位置变化事件，需结合 [wx.startLocationUpdateBackground](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html)、[wx.startLocationUpdate](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html)使用。\n*\n*  ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*\n*   ## 申请开通\n*   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n*   接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n*   ### 国内主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 电商平台 |\t/\t| 售卖商品线下发货、收货、送货服务 |\n*   | 商家自营 |\t/\t| 提供售卖商品线下发货、收货、送货服务、线下商超导览、导航服务 |\n*   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n*   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n*   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n*   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n*   | 餐饮服务 | \t点餐平台、外卖平台\t| 线下送餐服务 |\n*   | 工具\t| 天气、信息查询 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询等 |\n*   | 金融 | 保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n*   | 旅游 | 景区服务 | 提供景区导航、导览服务 |\n*   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n*   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n*\n*   ### 海外主体开放类目\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n*   | 餐饮\t | /\t | 线下送餐服务 |\n*   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n*   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n*\n* **示例代码**\n*\n* ```js\n const _locationChangeFn = function(res) {\n  console.log('location change', res)\n }\n wx.onLocationChange(_locationChangeFn)\n wx.offLocationChange(_locationChangeFn)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onLocationChangeError": {
    "prefix": "onLocationChangeError",
    "body": [
      "wx.onLocationChangeError((result) => {$1})"
    ],
    "description": "/** [wx.onLocationChangeError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChangeError.html)\n         *\n         * 需要基础库： `2.19.5`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听持续定位接口返回失败时触发。 */",
    "detail": "function",
    "kind": 9
  },
  "onMemoryWarning": {
    "prefix": "onMemoryWarning",
    "body": [
      "wx.onMemoryWarning((result) => {$1})"
    ],
    "description": "/** [wx.onMemoryWarning(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/memory/wx.onMemoryWarning.html)\n         *\n         * 需要基础库： `2.0.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听内存不足告警事件。\n         *\n         * 当 iOS/Android 向小程序进程发出内存警告时，触发该事件。触发该事件不意味小程序被杀，大部分情况下仅仅是告警，开发者可在收到通知后回收一些不必要资源避免进一步加剧内存紧张。\n         *\n         * **示例代码**\n         *\n         * ```js\n         * wx.onMemoryWarning(function () {\n         *   console.log('onMemoryWarningReceive')\n         * })\n         * `` */",
    "detail": "function",
    "kind": 9
  },
  "onNetworkStatusChange": {
    "prefix": "onNetworkStatusChange",
    "body": [
      "wx.onNetworkStatusChange((result) => {$1})"
    ],
    "description": "/** [wx.onNetworkStatusChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkStatusChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：支持\n*\n* 监听网络状态变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onNetworkStatusChange(function (res) {\n  console.log(res.isConnected)\n  console.log(res.networkType)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onNetworkWeakChange": {
    "prefix": "onNetworkWeakChange",
    "body": [
      "wx.onNetworkWeakChange((result) => {$1})"
    ],
    "description": "/** [wx.onNetworkWeakChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkWeakChange.html)\n*\n* 需要基础库： `2.21.0`\n*\n* 在插件中使用：不支持\n*\n* 监听弱网状态变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onNetworkWeakChange(function (res) {\n  console.log(res.weakNet)\n  console.log(res.networkType)\n})\n// 取消监听\nwx.offNetworkWeakChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onPageNotFound": {
    "prefix": "onPageNotFound",
    "body": [
      "wx.onPageNotFound((result) => {$1})"
    ],
    "description": "/** [wx.onPageNotFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序要打开的页面不存在事件。该事件与 [`App.onPageNotFound`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onpagenotfoundobject-object) 的回调时机一致。\n         *\n         * **注意**\n         *\n         * - 开发者可以在回调中进行页面重定向，但必须在回调中**同步**处理，异步处理（例如 `setTimeout` 异步执行）无效。\n         * - 若开发者没有调用 [wx.onPageNotFound](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html) 绑定监听，也没有声明 `App.onPageNotFound`，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。\n         * - 如果回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再第二次回调。 */",
    "detail": "function",
    "kind": 9
  },
  "onScreenRecordingStateChanged": {
    "prefix": "onScreenRecordingStateChanged",
    "body": [
      "wx.onScreenRecordingStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onScreenRecordingStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onScreenRecordingStateChanged.html)\n         *\n         * 需要基础库： `2.24.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听用户录屏事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onSocketClose": {
    "prefix": "onSocketClose",
    "body": [
      "wx.onSocketClose((result) => {$1})"
    ],
    "description": "/** [wx.onSocketClose(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketClose.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 连接关闭事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onSocketError": {
    "prefix": "onSocketError",
    "body": [
      "wx.onSocketError((result) => {$1})"
    ],
    "description": "/** [wx.onSocketError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketError.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 错误事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onSocketMessage": {
    "prefix": "onSocketMessage",
    "body": [
      "wx.onSocketMessage((result) => {$1})"
    ],
    "description": "/** [wx.onSocketMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketMessage.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 接收到服务器的消息事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onSocketOpen": {
    "prefix": "onSocketOpen",
    "body": [
      "wx.onSocketOpen((result) => {$1})"
    ],
    "description": "/** [wx.onSocketOpen(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketOpen.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 连接打开事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onThemeChange": {
    "prefix": "onThemeChange",
    "body": [
      "wx.onThemeChange((result) => {$1})"
    ],
    "description": "/** [wx.onThemeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onThemeChange.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听系统主题改变事件。该事件与 [`App.onThemeChange`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onThemeChange-Object-object) 的回调时机一致。\n         *\n         * **注意**\n         *\n         * - 只有在全局配置\"darkmode\": true时才会触发此事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onUnhandledRejection": {
    "prefix": "onUnhandledRejection",
    "body": [
      "wx.onUnhandledRejection((result) => {$1})"
    ],
    "description": "/** [wx.onUnhandledRejection(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html)\n         *\n         * 需要基础库： `2.10.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听未处理的 Promise 拒绝事件。该事件与 [`App.onUnhandledRejection`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onUnhandledRejection-Object-object) 的回调时机与参数一致。\n         *\n         * **注意**\n         *\n         * - 所有的 unhandledRejection 都可以被这一监听捕获，但只有 Error 类型的才会在小程序后台触发报警。 */",
    "detail": "function",
    "kind": 9
  },
  "onUserCaptureScreen": {
    "prefix": "onUserCaptureScreen",
    "body": [
      "wx.onUserCaptureScreen((res) => {$1})"
    ],
    "description": "/** [wx.onUserCaptureScreen(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onUserCaptureScreen.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：不支持\n*\n* 监听用户主动截屏事件。用户使用系统截屏按键截屏时触发，只能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onUserCaptureScreen(function (res) {\n  console.log('用户截屏了')\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "onVoIPChatInterrupted": {
    "prefix": "onVoIPChatInterrupted",
    "body": [
      "wx.onVoIPChatInterrupted((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatInterrupted(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatInterrupted.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听被动断开实时语音通话事件。包括小游戏切入后端时断开 */",
    "detail": "function",
    "kind": 9
  },
  "onVoIPChatMembersChanged": {
    "prefix": "onVoIPChatMembersChanged",
    "body": [
      "wx.onVoIPChatMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatMembersChanged.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听实时语音通话成员在线状态变化事件。有成员加入/退出通话时触发回调 */",
    "detail": "function",
    "kind": 9
  },
  "onVoIPChatSpeakersChanged": {
    "prefix": "onVoIPChatSpeakersChanged",
    "body": [
      "wx.onVoIPChatSpeakersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatSpeakersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatSpeakersChanged.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听实时语音通话成员通话状态变化事件。有成员开始/停止说话时触发回调 */",
    "detail": "function",
    "kind": 9
  },
  "onVoIPChatStateChanged": {
    "prefix": "onVoIPChatStateChanged",
    "body": [
      "wx.onVoIPChatStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatStateChanged.html)\n         *\n         * 需要基础库： `2.16.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听房间状态变化事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onVoIPVideoMembersChanged": {
    "prefix": "onVoIPVideoMembersChanged",
    "body": [
      "wx.onVoIPVideoMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPVideoMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPVideoMembersChanged.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听实时语音通话成员视频状态变化事件。 */",
    "detail": "function",
    "kind": 9
  },
  "onWifiConnected": {
    "prefix": "onWifiConnected",
    "body": [
      "wx.onWifiConnected((result) => {$1})"
    ],
    "description": "/** [wx.onWifiConnected(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnected.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听连接上 Wi-Fi 的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onWifiConnectedWithPartialInfo": {
    "prefix": "onWifiConnectedWithPartialInfo",
    "body": [
      "wx.onWifiConnectedWithPartialInfo((result) => {$1})"
    ],
    "description": "/** [wx.onWifiConnectedWithPartialInfo(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnectedWithPartialInfo.html)\n         *\n         * 需要基础库： `2.22.0`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 监听连接上 Wi-Fi 的事件 */",
    "detail": "function",
    "kind": 9
  },
  "onWindowResize": {
    "prefix": "onWindowResize",
    "body": [
      "wx.onWindowResize((result) => {$1})"
    ],
    "description": "/** [wx.onWindowResize(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.onWindowResize.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听窗口尺寸变化事件 */",
    "detail": "function",
    "kind": 9
  },
  "openAppAuthorizeSetting": {
    "prefix": "openAppAuthorizeSetting",
    "body": [
      "wx.openAppAuthorizeSetting({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.openAppAuthorizeSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openAppAuthorizeSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 跳转系统微信授权管理页\n*\n* **示例代码**\n*\n* ```js\nwx.openAppAuthorizeSetting({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openBluetoothAdapter": {
    "prefix": "openBluetoothAdapter",
    "body": [
      "wx.openBluetoothAdapter({",
      "  mode: ${1:mode},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.openBluetoothAdapter(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 初始化蓝牙模块。iOS 上开启主机/从机（外围设备）模式时需分别调用一次，并指定对应的 `mode`。\n*\n* **object.fail 回调函数返回的 state 参数（仅 iOS）**\n*\n* | 状态码 | 说明   |\n* | ------ | ------ |\n* | 0      | 未知   |\n* | 1      | 重置中 |\n* | 2      | 不支持 |\n* | 3      | 未授权 |\n* | 4      | 未开启 |\n*\n* **注意**\n*\n* - 其他蓝牙相关 API 必须在 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 调用之后使用。否则 API 会返回错误（errCode=10000）。\n* - 在用户蓝牙开关未开启或者手机不支持蓝牙功能的情况下，调用 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 会返回错误（errCode=10001），表示手机蓝牙功能不可用。此时小程序蓝牙模块已经初始化完成，可通过 [wx.onBluetoothAdapterStateChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html) 监听手机蓝牙状态的改变，也可以调用蓝牙模块的所有API。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.openBluetoothAdapter({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openCard": {
    "prefix": "openCard",
    "body": [
      "wx.openCard({",
      "  cardList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.openCard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.openCard.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 查看微信卡包中的卡券。只有通过 [认证](https://developers.weixin.qq.com/miniprogram/product/renzheng.html) 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 [微信卡券接口文档](https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1490190158&version=1&lang=zh_CN&platform=2)。\n*\n* **示例代码**\n*\n* ```js\nwx.openCard({\n  cardList: [{\n    cardId: '',\n    code: ''\n  }, {\n    cardId: '',\n    code: ''\n  }],\n  success (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openChannelsActivity": {
    "prefix": "openChannelsActivity",
    "body": [
      "wx.openChannelsActivity({",
      "  feedId: '${1:feedId}',",
      "  finderUserName: '${2:finderUserName}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.openChannelsActivity(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsActivity.html)\n         *\n         * 需要基础库： `2.19.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号视频 */",
    "detail": "function",
    "kind": 9
  },
  "openChannelsEvent": {
    "prefix": "openChannelsEvent",
    "body": [
      "wx.openChannelsEvent({",
      "  eventId: '${1:eventId}',",
      "  finderUserName: '${2:finderUserName}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.openChannelsEvent(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsEvent.html)\n         *\n         * 需要基础库： `2.21.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号活动页 */",
    "detail": "function",
    "kind": 9
  },
  "openChannelsLive": {
    "prefix": "openChannelsLive",
    "body": [
      "wx.openChannelsLive({",
      "  finderUserName: '${1:finderUserName}',",
      "  feedId: '${2:feedId}',",
      "  nonceId: '${3:nonceId}',",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.openChannelsLive(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsLive.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号直播 */",
    "detail": "function",
    "kind": 9
  },
  "openChannelsUserProfile": {
    "prefix": "openChannelsUserProfile",
    "body": [
      "wx.openChannelsUserProfile({",
      "  finderUserName: '${1:finderUserName}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.openChannelsUserProfile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsUserProfile.html)\n         *\n         * 需要基础库： `2.21.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号主页 */",
    "detail": "function",
    "kind": 9
  },
  "openCustomerServiceChat": {
    "prefix": "openCustomerServiceChat",
    "body": [
      "wx.openCustomerServiceChat({",
      "  corpId: '${1:corpId}',",
      "  extInfo: {",
      "    url: '${2:url}',",
      "  },",
      "  sendMessageImg: '${4:sendMessageImg}',",
      "  sendMessagePath: '${5:sendMessagePath}',",
      "  sendMessageTitle: '${6:sendMessageTitle}',",
      "  showMessageCard: ${7:true},",
      "  success: (res) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [wx.openCustomerServiceChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/service-chat/wx.openCustomerServiceChat.html)\n*\n* 需要基础库： `2.19.0`\n*\n* 在插件中使用：不支持\n*\n* 打开微信客服，页面产生点击事件（例如 button 上 bindtap 的回调中）后才可调用。了解更多信息，可以参考[微信客服介绍](https://work.weixin.qq.com/kf/)。\n*\n* **示例代码**\n*\n* ```js\nwx.openCustomerServiceChat({\n  extInfo: {url: ''},\n  corpId: '',\n  success(res) {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openDocument": {
    "prefix": "openDocument",
    "body": [
      "wx.openDocument({",
      "  filePath: '${1:filePath}',",
      "  fileType: ${2:fileType},",
      "  showMenu: ${3:true},",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.openDocument(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 新开页面打开文档。微信客户端 `7.0.12` 版本前默认显示右上角菜单按钮，之后的版本默认不显示，需主动传入 `showMenu`。 */",
    "detail": "function",
    "kind": 9
  },
  "openEmbeddedMiniProgram": {
    "prefix": "openEmbeddedMiniProgram",
    "body": [
      "wx.openEmbeddedMiniProgram({",
      "  appId: '${1:appId}',",
      "  envVersion: ${2:envVersion},",
      "  extraData: ${3:extraData},",
      "  noRelaunchIfPathUnchanged: ${4:true},",
      "  path: '${5:path}',",
      "  shortLink: '${6:shortLink}',",
      "  verify: ${7:verify},",
      "  success: (res) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [wx.openEmbeddedMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.openEmbeddedMiniProgram.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 打开半屏小程序。接入指引请参考 [半屏小程序能力](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)。 */",
    "detail": "function",
    "kind": 9
  },
  "openLocation": {
    "prefix": "openLocation",
    "body": [
      "wx.openLocation({",
      "  latitude: ${1:0},",
      "  longitude: ${2:0},",
      "  address: '${3:address}',",
      "  name: '${4:name}',",
      "  scale: ${5:0},",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.openLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.openLocation.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 使用微信内置地图查看位置\n*\n* **示例代码**\n*\n*  ```js\n wx.getLocation({\n  type: 'gcj02', //返回可以用于wx.openLocation的经纬度\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n    wx.openLocation({\n      latitude,\n      longitude,\n      scale: 18\n    })\n  }\n})\n ``` */",
    "detail": "function",
    "kind": 9
  },
  "openSetting": {
    "prefix": "openSetting",
    "body": [
      "wx.openSetting({",
      "  withSubscriptions: ${1:true},",
      "  success: (result) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.openSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.10.3`\n*\n* 调起客户端小程序设置界面，返回用户设置的操作结果。**设置界面只会出现小程序已经向用户请求过的[权限](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)**。\n*\n* ****\n*\n* - 注意：[2.3.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，用户发生点击行为后，才可以跳转打开设置页，管理授权信息。[详情](https://developers.weixin.qq.com/community/develop/doc/000cea2305cc5047af5733de751008)\n*\n* **示例代码**\n*\n* ```js\nwx.openSetting({\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openSystemBluetoothSetting": {
    "prefix": "openSystemBluetoothSetting",
    "body": [
      "wx.openSystemBluetoothSetting({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.openSystemBluetoothSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openSystemBluetoothSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 跳转系统蓝牙设置页。仅支持安卓。\n*\n* **示例代码**\n*\n* ```js\nwx.openSystemBluetoothSetting({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "openVideoEditor": {
    "prefix": "openVideoEditor",
    "body": [
      "wx.openVideoEditor({",
      "  filePath: '${1:filePath}',",
      "  maxDuration: '${2:maxDuration}',",
      "  minDuration: '${3:minDuration}',",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.openVideoEditor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.openVideoEditor.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 打开视频编辑器 */",
    "detail": "function",
    "kind": 9
  },
  "pageScrollTo": {
    "prefix": "pageScrollTo",
    "body": [
      "wx.pageScrollTo({",
      "  duration: ${1:0},",
      "  offsetTop: ${2:0},",
      "  scrollTop: ${3:0},",
      "  selector: '${4:selector}',",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.pageScrollTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 将页面滚动到目标位置，支持选择器和滚动距离两种方式定位\n*\n* **selector 语法**\n*\n* selector类似于 CSS 的选择器，但仅支持下列语法。\n*\n* + ID选择器：#the-id\n* + class选择器（可以连续指定多个）：.a-class.another-class\n* + 子元素选择器：.the-parent > .the-child\n* + 后代选择器：.the-ancestor .the-descendant\n* + 跨自定义组件的后代选择器：.the-ancestor >>> .the-descendant\n* + 多选择器的并集：#a-node, .some-other-nodes\n*\n* **示例代码**\n*\n* ```js\nwx.pageScrollTo({\n  scrollTop: 0,\n  duration: 300\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "pauseBackgroundAudio": {
    "prefix": "pauseBackgroundAudio",
    "body": [
      "wx.pauseBackgroundAudio({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.pauseBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.pauseBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 暂停播放音乐。\n*\n* **示例代码**\n*\n* ```js\nwx.pauseBackgroundAudio()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "pauseVoice": {
    "prefix": "pauseVoice",
    "body": [
      "wx.pauseVoice({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.pauseVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.pauseVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 暂停正在播放的语音。再次调用 [wx.playVoice](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html) 播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 [wx.stopVoice](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath\n    })\n\n    setTimeout(() => { wx.pauseVoice() }, 5000)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "playBackgroundAudio": {
    "prefix": "playBackgroundAudio",
    "body": [
      "wx.playBackgroundAudio({",
      "  dataUrl: '${1:dataUrl}',",
      "  coverImgUrl: '${2:coverImgUrl}',",
      "  title: '${3:title}',",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.playBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.playBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 使用后台播放器播放音乐。对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。\n*\n* **示例代码**\n*\n* ```js\nwx.playBackgroundAudio({\n  dataUrl: '',\n  title: '',\n  coverImgUrl: ''\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "playVoice": {
    "prefix": "playVoice",
    "body": [
      "wx.playVoice({",
      "  filePath: '${1:filePath}',",
      "  duration: ${2:0},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.playVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 开始播放语音。同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath,\n      complete () { }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "pluginLogin": {
    "prefix": "pluginLogin",
    "body": [
      "wx.pluginLogin({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.pluginLogin(Object args)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.pluginLogin.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.20.1`\n         *\n         * __该接口仅在小程序插件中可调用__，调用接口获得插件用户标志凭证（code）。插件可以此凭证换取用于识别用户的标识 openpid。用户不同、宿主小程序不同或插件不同的情况下，该标识均不相同，即当且仅当同一个用户在同一个宿主小程序中使用同一个插件时，openpid 才会相同。 */",
    "detail": "function",
    "kind": 9
  },
  "preloadAssets": {
    "prefix": "preloadAssets",
    "body": [
      "wx.preloadAssets({",
      "  data: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.preloadAssets(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadAssets.html)\n*\n* 需要基础库： `2.22.1`\n*\n* 在插件中使用：不支持\n*\n* 为视图层预加载媒体资源文件, 目前支持：font，image\n*\n* **示例代码**\n*\n* ```js\nwx.preloadAssets({\n  data: [\n    {\n      type: 'image',\n      src: imgUrl,\n    },\n  ],\n  success(resp) {\n    console.log('preloadAssets success', resp)\n  },\n  fail(err) {\n    console.log('preloadAssets fail', err)\n  },\n})\n```\n*\n* ****\n*\n* - 开发过程中，可在开发者工具network面板查看预加载情况。 */",
    "detail": "function",
    "kind": 9
  },
  "preloadSkylineView": {
    "prefix": "preloadSkylineView",
    "body": [
      "wx.preloadSkylineView({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.preloadSkylineView(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadSkylineView.html)\n         *\n         * 需要基础库： `2.24.7`\n         *\n         * 在插件中使用：需要基础库 `2.24.7`\n         *\n         * 预加载下个页面所需要的 [Skyline](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 运行环境。 */",
    "detail": "function",
    "kind": 9
  },
  "preloadWebview": {
    "prefix": "preloadWebview",
    "body": [
      "wx.preloadWebview({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.preloadWebview(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadWebview.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 预加载下个页面的 WebView。参见[预加载下个页面的时机](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/runtime_nav.html#_2-4-控制预加载下个页面的时机) */",
    "detail": "function",
    "kind": 9
  },
  "previewImage": {
    "prefix": "previewImage",
    "body": [
      "wx.previewImage({",
      "  urls: [$1],",
      "  current: '${2:current}',",
      "  referrerPolicy: '${3:referrerPolicy}',",
      "  showmenu: ${4:true},",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.previewImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。\n*\n* **支持长按识别的码**\n*\n* | 类型 | 说明 | 最低版本 |\n* |------|------| -------|\n* | 小程序码 |    |\n* | 微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 企业微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 普通群码 | 指仅包含微信用户的群，不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 互通群码 |  指既有微信用户也有企业微信用户的群，不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 公众号二维码 | 不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n*\n* **示例代码**\n*\n* ```js\nwx.previewImage({\n  current: '', // 当前显示图片的http链接\n  urls: [] // 需要预览的图片http链接列表\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "previewMedia": {
    "prefix": "previewMedia",
    "body": [
      "wx.previewMedia({",
      "  sources: [$1],",
      "  current: ${2:0},",
      "  referrerPolicy: '${3:referrerPolicy}',",
      "  showmenu: ${4:true},",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.previewMedia(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewMedia.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 预览图片和视频。\n         *\n         * **支持长按识别的码**\n         *\n         * | 类型 | 说明 | 最低版本 |\n         * |------|------| -------|\n         * | 小程序码 |    |\n         * | 微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 企业微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 普通群码 | 指仅包含微信用户的群，不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 互通群码 |  指既有微信用户也有企业微信用户的群，不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 公众号二维码 | 不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) | */",
    "detail": "function",
    "kind": 9
  },
  "reLaunch": {
    "prefix": "reLaunch",
    "body": [
      "wx.reLaunch({",
      "  url: '${1:url}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.reLaunch(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 关闭所有页面，打开到应用内的某个页面\n*\n* **示例代码**\n*\n* ```js\nwx.reLaunch({\n  url: 'test?id=1'\n})\n```\n*\n* ```html\n* // test\n* Page({\n*   onLoad (option) {\n*     console.log(option.query)\n*   }\n* })\n* ``` */",
    "detail": "function",
    "kind": 9
  },
  "readBLECharacteristicValue": {
    "prefix": "readBLECharacteristicValue",
    "body": [
      "wx.readBLECharacteristicValue({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.readBLECharacteristicValue(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.readBLECharacteristicValue.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 读取蓝牙低功耗设备特征值的二进制数据。注意：必须设备的特征支持 read 才可以成功调用。\n*\n* **注意**\n*\n* - 并行调用多次会存在读失败的可能性。\n* - 接口读取到的信息需要在 [wx.onBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html) 方法注册的回调中获取。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\n// 必须在这里的回调才能获取\nwx.onBLECharacteristicValueChange(function(characteristic) {\n  console.log('characteristic value comed:', characteristic)\n})\n\nwx.readBLECharacteristicValue({\n  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  success (res) {\n    console.log('readBLECharacteristicValue:', res.errCode)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "redirectTo": {
    "prefix": "redirectTo",
    "body": [
      "wx.redirectTo({",
      "  url: '${1:url}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.redirectTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html)\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。\n*\n* **示例代码**\n*\n* ```js\nwx.redirectTo({\n  url: 'test?id=1'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "removeStorage": {
    "prefix": "removeStorage",
    "body": [
      "wx.removeStorage({",
      "  key: '${1:key}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.removeStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中移除指定 key。\n*\n* **示例代码**\n*\n* ```js\nwx.removeStorage({\n  key: 'key',\n  success (res) {\n    console.log(res)\n  }\n})\n```\n*\n* ```js\ntry {\n  wx.removeStorageSync('key')\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "removeStorageSync": {
    "prefix": "removeStorageSync",
    "body": [
      "wx.removeStorageSync('${1:key}')"
    ],
    "description": "/** [wx.removeStorageSync(string key)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* [wx.removeStorage](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.removeStorage({\n  key: 'key',\n  success (res) {\n    console.log(res)\n  }\n})\n```\n*\n* ```js\ntry {\n  wx.removeStorageSync('key')\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "removeTabBarBadge": {
    "prefix": "removeTabBarBadge",
    "body": [
      "wx.removeTabBarBadge({",
      "  index: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.removeTabBarBadge(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.removeTabBarBadge.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 移除 tabBar 某一项右上角的文本 */",
    "detail": "function",
    "kind": 9
  },
  "reportAnalytics": {
    "prefix": "reportAnalytics",
    "body": [
      "wx.reportAnalytics('${1:eventName}', ${2:data})"
    ],
    "description": "/** [wx.reportAnalytics(string eventName, Object data)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportAnalytics.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 在插件中使用时，可以被正常调用，但目前不会进行统计展示\n* @deprecated 基础库版本 [2.31.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n*\n* 自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。\n*\n* **示例代码**\n*\n* ```js\nwx.reportAnalytics('purchase', {\n  price: 120,\n  color: 'red'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "reportEvent": {
    "prefix": "reportEvent",
    "body": [
      "wx.reportEvent('${1:eventId}', ${2:data})"
    ],
    "description": "/** [wx.reportEvent(string eventId, object data)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportEvent.html)\n         *\n         * 需要基础库： `2.14.4`\n         *\n         * 在插件中使用：不支持\n         *\n         * 事件上报 */",
    "detail": "function",
    "kind": 9
  },
  "reportMonitor": {
    "prefix": "reportMonitor",
    "body": [
      "wx.reportMonitor('${1:name}', ${2:0})"
    ],
    "description": "/** [wx.reportMonitor(string name, number value)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportMonitor.html)\n*\n* 需要基础库： `2.0.1`\n*\n* 在插件中使用：不支持\n*\n* 自定义业务数据监控上报接口。\n*\n* **使用说明**\n*\n* 使用前，需要在「小程序管理后台-运维中心-性能监控-业务数据监控」中新建监控事件，配置监控描述与告警类型。每一个监控事件对应唯一的监控ID，开发者最多可以创建128个监控事件。\n*\n* **示例代码**\n*\n* ```js\nwx.reportMonitor('1', 1)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "reportPerformance": {
    "prefix": "reportPerformance",
    "body": [
      "wx.reportPerformance(${1:0}, ${2:0}, ${3:dimensions})"
    ],
    "description": "/** [wx.reportPerformance(Number id, Number value, String|Array dimensions)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.reportPerformance.html)\n*\n* 需要基础库： `2.9.2`\n*\n* 在插件中使用：需要基础库 `2.9.3`\n*\n* 小程序测速上报。使用前，需要在小程序管理后台配置。\n*\n* **示例代码**\n*\n* ```js\nwx.reportPerformance(1101, 680)\nwx.reportPerformance(1101, 680, 'custom')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "requestDeviceVoIP": {
    "prefix": "requestDeviceVoIP",
    "body": [
      "wx.requestDeviceVoIP({",
      "  deviceName: '${1:deviceName}',",
      "  groupId: '${2:groupId}',",
      "  modelId: '${3:modelId}',",
      "  sn: '${4:sn}',",
      "  snTicket: '${5:snTicket}',",
      "  isGroup: ${6:true},",
      "  success: (res) => {$7},",
      "  fail: (res) => {$8},",
      "  complete: (res) => {$9},",
      "})"
    ],
    "description": "/** [wx.requestDeviceVoIP(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/device-voip/wx.requestDeviceVoIP.html)\n*\n* 需要基础库： `2.27.3`\n*\n* 在插件中使用：不支持\n*\n* 请求用户授权与设备（组）间进行音视频通话。\n*\n* **示例代码**\n*\n* ```js\n// 授权单台设备\nwx.requestDeviceVoIP({\n  sn: 'xxxx',\n  snTicket: 'xxxxx',\n  modelId: 'xxx',\n  deviceName: 'xxx',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n\n// 批量授权（授权设备组）\nwx.requestDeviceVoIP({\n  isGroup: true,\n  groupId: '设备组 ID',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "requestOrderPayment": {
    "prefix": "requestOrderPayment",
    "body": [
      "wx.requestOrderPayment({",
      "  nonceStr: '${1:nonceStr}',",
      "  package: '${2:package}',",
      "  paySign: '${3:paySign}',",
      "  timeStamp: '${4:timeStamp}',",
      "  extUserUin: '${5:extUserUin}',",
      "  orderInfo: ${6:orderInfo},",
      "  signType: ${7:signType},",
      "  success: (res) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [wx.requestOrderPayment(Object args)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestOrderPayment.html)\n         *\n         * 需要基础库： `2.16.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 仅接入了[自定义版交易组件](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/Introduction2)的小程序需要使用，普通小程序可直接使用 [`wx.requestPayment`](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPayment.html)。\n         *\n         * **前置检查**\n         *\n         * 接入自定义版交易组件之后，若要发起微信支付，请先查询[需要校验的场景](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/API/order/check_scene)。\n         * 在需要校验的场景中，发起微信支付时，必须使用该接口，需要按照要求传入相关的[订单信息](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/API/order/add_order)进行校验，校验通过后用户才可以完成当前订单的支付，非需要校验的场景则可以按照商家要求自行选择传入订单信息或不传入。 */",
    "detail": "function",
    "kind": 9
  },
  "requestPayment": {
    "prefix": "requestPayment",
    "body": [
      "wx.requestPayment({",
      "  nonceStr: '${1:nonceStr}',",
      "  package: '${2:package}',",
      "  paySign: '${3:paySign}',",
      "  timeStamp: '${4:timeStamp}',",
      "  signType: ${5:signType},",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.requestPayment(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPayment.html)\n*\n* 在插件中使用：不支持\n*\n* 发起微信支付。调用前需在[小程序微信公众平台](https://mp.weixin.qq.com/) -功能-微信支付入口申请接入微信支付。了解更多信息，可以参考 [微信支付开发文档](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pages/api.shtml)：\n* - [开发指引](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter2_3.shtml)\n* - [下单接口](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter3_2.shtml)\n* - [支付接口](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter3_12.shtml)\n* - 旧版本 (v2)\n*   - [开发指引](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&index=1)\n*   - [支付接口](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&index=3)\n*\n* 如果使用[云开发](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html)，则 `wx.requestPayment` 所需参数可以通过云开发微信支付统一下单接口免鉴权获取、并可免证书、免签名的安全调用微信支付服务端接口、及接收异步支付结果回调，详见[云开发微信支付](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/wechatpay/wechatpay.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.requestPayment({\n  timeStamp: '',\n  nonceStr: '',\n  package: '',\n  signType: 'MD5',\n  paySign: '',\n  success (res) { },\n  fail (res) { }\n})\n```\n*\n* 注：如果服务端有使用云开发，可以通过云开发微信支付[统一下单](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/open/pay/CloudPay.unifiedOrder.html)接口免鉴权获取以上所需所有参数，示例：\n*\n* ```js\n// 云函数代码\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\n\nexports.main = async (event, context) => {\n  const res = await cloud.cloudPay.unifiedOrder({\n    \"body\" : \"小秋TIT店-超市\",\n    \"outTradeNo\" : \"1217752501201407033233368018\",\n    \"spbillCreateIp\" : \"127.0.0.1\",\n    \"subMchId\" : \"1900009231\",\n    \"totalFee\" : 1,\n    \"envId\": \"test-f0b102\",\n    \"functionName\": \"pay_cb\"\n  })\n  return res\n}\n\n// 小程序代码\nwx.cloud.callFunction({\n  name: '函数名',\n  data: {\n    // ...\n  },\n  success: res => {\n    const payment = res.result.payment\n    wx.requestPayment({\n      ...payment,\n      success (res) {\n        console.log('pay success', res)\n      },\n      fail (err) {\n        console.error('pay fail', err)\n      }\n    })\n  },\n  fail: console.error,\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "requestPluginPayment": {
    "prefix": "requestPluginPayment",
    "body": [
      "wx.requestPluginPayment({",
      "  fee: ${1:0},",
      "  paymentArgs: ${2:paymentArgs},",
      "  version: ${3:version},",
      "  currencyType: '${4:currencyType}',",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.requestPluginPayment(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPluginPayment.html)\n*\n* 需要基础库： `2.22.1`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 插件中发起支付。\n*\n* **Tip**\n*\n* 1. `tip`: 小程序与插件绑定在同一个open平台账号上且小程序与插件均为open账号的同主体/关联主体时，调用此接口将直接拉起支付收银台。\n* 1. `tip`: 这个接口本身可以在开发者工具中使用，但功能页的跳转目前不支持在开发者工具中调试，请在真机上测试。\n* 1. `tip`: 跳转支付功能页需要在 `app.json` 中配置 `\"functionalPages\": true`\n*\n* **示例代码**\n*\n* 具体用法及参数说明可参考 [插件支付文档](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/request-payment.html)\n* ```js\nwx.requestPluginPayment({\n  version: 'release',\n  fee: 1,\n  paymentArgs: {},\n  currencyType: 'CNY',\n  success (res) { },\n  fail (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "requestSubscribeDeviceMessage": {
    "prefix": "requestSubscribeDeviceMessage",
    "body": [
      "wx.requestSubscribeDeviceMessage({",
      "  modelId: '${1:modelId}',",
      "  sn: '${2:sn}',",
      "  snTicket: '${3:snTicket}',",
      "  tmplIds: [$4],",
      "  success: (result) => {$5},",
      "  fail: (result) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.requestSubscribeDeviceMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeDeviceMessage.html)\n*\n* 需要基础库： `2.20.0`\n*\n* 在插件中使用：不支持\n*\n* 订阅设备消息接口，调用后弹出授权框，用户同意后会允许开发者给用户发送订阅模版消息。当用户点击“允许”按钮时，模板消息会被添加到用户的小程序设置页，通过 wx.getSetting 接口可获取用户对相关模板消息的订阅状态。\n*\n* **错误码**\n*\n* | errCode | errMsg                                                 | 说明                                                           |\n* | ------- | ------------------------------------------------------ | -------------------------------------------------------------- |\n* | 10001   | TmplIds can't be empty                                 | tmplIds 为空                                                  |\n* | 10004   | Invalid template id                                    | tmplId 参数类型错误                                            |\n* | 20001   | No template data return, verify the template id exist  | tmplId 为空                                                  |\n* | 20003   | Templates count out of max bounds                      | tmplId 数量超过上限                                           |\n* | 19720726   | check sn_ticket fail                                | snTicket 不合法                                              |\n* | 19720727   | sn_ticket expire                                    | snTicket 过期                                               |\n* | 19720728   | err_not_found_tid                                    | tmplId 不存在                                              |\n* | 19720736   | template_id do not match model_id                   | modelId 类型与 tmplId 类型不符                               |\n*\n* **示例代码**\n*\n* ```js\nwx.requestSubscribeDeviceMessage({\n  tmplIds: ['xxxxx'],\n  sn: 'xxxx',\n  snTicket: 'xxxxx',\n  modelId: 'xxx',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "requestSubscribeMessage": {
    "prefix": "requestSubscribeMessage",
    "body": [
      "wx.requestSubscribeMessage({",
      "  tmplIds: [$1],",
      "  success: (result) => {$2},",
      "  fail: (result) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.requestSubscribeMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html)\n*\n* 需要基础库： `2.4.4`\n*\n* 在插件中使用：不支持\n*\n* 调起客户端小程序订阅消息界面，返回用户订阅消息的操作结果。当用户勾选了订阅面板中的“总是保持以上选择，不再询问”时，模板消息会被添加到用户的小程序设置页，通过 [wx.getSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html) 接口可获取用户对相关模板消息的订阅状态。\n*\n* ## 注意事项\n*  - 一次性模板 id 和永久模板 id 不可同时使用。\n*  - 低版本基础库2.4.4~2.8.3 已支持订阅消息接口调用，仅支持传入一个一次性 tmplId / 永久 tmplId。\n*  - [2.8.2](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，用户发生点击行为或者发起支付回调后，才可以调起订阅消息界面。\n*  - [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，开发版和体验版小程序将禁止使用模板消息 formId。\n*  - 一次授权调用里，每个tmplId对应的模板标题不能存在相同的，若出现相同的，只保留一个。\n*  - [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，支持订阅语音消息提醒，[详情](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/subscribe-message.html)\n*\n* **错误码**\n*\n* | errCode | errMsg                                                 | 说明                                                           |\n* | ------- | ------------------------------------------------------ | -------------------------------------------------------------- |\n* | 10001   | TmplIds can't be empty                                 | 参数传空了                                                     |\n* | 10002   | Request list fail                                       | 网络问题，请求消息列表失败                                     |\n* | 10003   | Request subscribe fail                                 | 网络问题，订阅请求发送失败                                     |\n* | 10004   | Invalid template id                                    | 参数类型错误                                                   |\n* | 10005   | Cannot show subscribe message UI                       | 无法展示 UI，一般是小程序这个时候退后台了导致的                |\n* | 20001   | No template data return, verify the template id exist  | 没有模板数据，一般是模板 ID 不存在 或者和模板类型不对应 导致的 |\n* | 20002   | Templates type must be same                            | 模板消息类型 既有一次性的又有永久的                            |\n* | 20003   | Templates count out of max bounds                      | 模板消息数量超过上限                                           |\n* | 20004   | The main switch is switched off                        | 用户关闭了主开关，无法进行订阅                                 |\n* | 20005   | This mini program was banned from subscribing messages | 小程序被禁封                                                   |\n* | 20013   | Reject DeviceMsg Template                              | 不允许通过该接口订阅设备消息                                      |\n*\n* **示例代码**\n*\n* ```js\nwx.requestSubscribeMessage({\n  tmplIds: [''],\n  success (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "reserveChannelsLive": {
    "prefix": "reserveChannelsLive",
    "body": [
      "wx.reserveChannelsLive({",
      "  noticeId: '${1:noticeId}',",
      "})"
    ],
    "description": "/** [wx.reserveChannelsLive(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.reserveChannelsLive.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 预约视频号直播 */",
    "detail": "function",
    "kind": 9
  },
  "revokeBufferURL": {
    "prefix": "revokeBufferURL",
    "body": [
      "wx.revokeBufferURL('${1:url}')"
    ],
    "description": "/** [wx.revokeBufferURL(string url)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.revokeBufferURL.html)\n         *\n         * 需要基础库： `2.14.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 根据 URL 销毁存在内存中的数据 */",
    "detail": "function",
    "kind": 9
  },
  "saveFileToDisk": {
    "prefix": "saveFileToDisk",
    "body": [
      "wx.saveFileToDisk({",
      "  filePath: '${1:filePath}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.saveFileToDisk(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFileToDisk.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 保存文件系统的文件到用户磁盘，仅在 PC 端支持\n*\n* **示例代码**\n*\n* ```js\nwx.saveFileToDisk({\n  filePath: `${wx.env.USER_DATA_PATH}/hello.txt`,\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.error(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "saveImageToPhotosAlbum": {
    "prefix": "saveImageToPhotosAlbum",
    "body": [
      "wx.saveImageToPhotosAlbum({",
      "  filePath: '${1:filePath}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.saveImageToPhotosAlbum(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 保存图片到系统相册。\n*\n* **示例代码**\n*\n* ```js\nwx.saveImageToPhotosAlbum({\n  success(res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "saveVideoToPhotosAlbum": {
    "prefix": "saveVideoToPhotosAlbum",
    "body": [
      "wx.saveVideoToPhotosAlbum({",
      "  filePath: '${1:filePath}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.saveVideoToPhotosAlbum(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 保存视频到系统相册。支持mp4视频格式。\n*\n* **示例代码**\n*\n* ```js\nwx.saveVideoToPhotosAlbum({\n  filePath: 'wxfile://xxx',\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "scanCode": {
    "prefix": "scanCode",
    "body": [
      "wx.scanCode({",
      "  onlyFromCamera: ${1:true},",
      "  scanType: [$2],",
      "  success: (result) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.scanCode(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/scan/wx.scanCode.html)\n*\n* 需要基础库： `1.0.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 调起客户端扫码界面进行扫码\n*\n* **示例代码**\n*\n* ```js\n// 允许从相机和相册扫码\nwx.scanCode({\n  success (res) {\n    console.log(res)\n  }\n})\n\n// 只允许从相机扫码\nwx.scanCode({\n  onlyFromCamera: true,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "seekBackgroundAudio": {
    "prefix": "seekBackgroundAudio",
    "body": [
      "wx.seekBackgroundAudio({",
      "  position: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.seekBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.seekBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 控制音乐播放进度。\n*\n* **示例代码**\n*\n* ```js\nwx.seekBackgroundAudio({\n  position: 30\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "sendHCEMessage": {
    "prefix": "sendHCEMessage",
    "body": [
      "wx.sendHCEMessage({",
      "  data: ${1:data},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.sendHCEMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.sendHCEMessage.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 发送 NFC 消息。仅在安卓系统下有效。\n*\n* **示例代码**\n*\n* ```js\nconst buffer = new ArrayBuffer(1)\nconst dataView = new DataView(buffer)\ndataView.setUint8(0, 0)\n\nwx.startHCE({\n  success (res) {\n    wx.onHCEMessage(function(res) {\n      if (res.messageType === 1) {\n        wx.sendHCEMessage({data: buffer})\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "sendSms": {
    "prefix": "sendSms",
    "body": [
      "wx.sendSms({",
      "  content: '${1:content}',",
      "  phoneNumber: '${2:phoneNumber}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.sendSms(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/sms/wx.sendSms.html)\n         *\n         * 需要基础库： `2.25.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉起手机发送短信界面。 */",
    "detail": "function",
    "kind": 9
  },
  "sendSocketMessage": {
    "prefix": "sendSocketMessage",
    "body": [
      "wx.sendSocketMessage({",
      "  data: ${1:data},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.sendSocketMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.sendSocketMessage.html)\n*\n* 在插件中使用：不支持\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 通过 WebSocket 连接发送数据。需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。\n*\n* **示例代码**\n*\n* ```js\nlet socketOpen = false\nlet socketMsgQueue = []\nwx.connectSocket({\n  url: 'test.php'\n})\n\nwx.onSocketOpen(function(res) {\n  socketOpen = true\n  for (let i = 0; i < socketMsgQueue.length; i++){\n    sendSocketMessage(socketMsgQueue[i])\n  }\n  socketMsgQueue = []\n})\n\nfunction sendSocketMessage(msg) {\n  if (socketOpen) {\n    wx.sendSocketMessage({\n      data:msg\n    })\n  } else {\n    socketMsgQueue.push(msg)\n  }\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setBLEMTU": {
    "prefix": "setBLEMTU",
    "body": [
      "wx.setBLEMTU({",
      "  deviceId: '${1:deviceId}',",
      "  mtu: ${2:0},",
      "  success: (result) => {$3},",
      "  fail: (result) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.setBLEMTU(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.setBLEMTU.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 协商设置蓝牙低功耗的最大传输单元 (Maximum Transmission Unit, MTU)。需在 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 调用成功后调用。仅安卓系统 5.1 以上版本有效，iOS 因系统限制不支持。 */",
    "detail": "function",
    "kind": 9
  },
  "setBackgroundColor": {
    "prefix": "setBackgroundColor",
    "body": [
      "wx.setBackgroundColor({",
      "  backgroundColor: '${1:backgroundColor}',",
      "  backgroundColorBottom: '${2:backgroundColorBottom}',",
      "  backgroundColorTop: '${3:backgroundColorTop}',",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.setBackgroundColor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundColor.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.4.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置窗口的背景色\n*\n* **示例代码**\n*\n* ```js\nwx.setBackgroundColor({\n  backgroundColor: '#ffffff', // 窗口的背景色为白色\n})\n\nwx.setBackgroundColor({\n  backgroundColorTop: '#ffffff', // 顶部窗口的背景色为白色\n  backgroundColorBottom: '#ffffff', // 底部窗口的背景色为白色\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setBackgroundFetchToken": {
    "prefix": "setBackgroundFetchToken",
    "body": [
      "wx.setBackgroundFetchToken({",
      "  token: '${1:token}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setBackgroundFetchToken(object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.setBackgroundFetchToken.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 设置自定义登录态，在周期性拉取数据时带上，便于第三方服务器验证请求合法性 */",
    "detail": "function",
    "kind": 9
  },
  "setBackgroundTextStyle": {
    "prefix": "setBackgroundTextStyle",
    "body": [
      "wx.setBackgroundTextStyle({",
      "  textStyle: ${1:textStyle},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setBackgroundTextStyle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundTextStyle.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.4.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置下拉背景字体、loading 图的样式\n*\n* **示例代码**\n*\n* ```js\nwx.setBackgroundTextStyle({\n  textStyle: 'dark' // 下拉背景字体、loading 图的样式为dark\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setClipboardData": {
    "prefix": "setClipboardData",
    "body": [
      "wx.setClipboardData({",
      "  data: '${1:data}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setClipboardData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 设置系统剪贴板的内容。调用成功后，会弹出 toast 提示\"内容已复制\"，持续 1.5s\n*\n* **示例代码**\n*\n* ```js\nwx.setClipboardData({\n  data: 'data',\n  success (res) {\n    wx.getClipboardData({\n      success (res) {\n        console.log(res.data) // data\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setEnable1v1Chat": {
    "prefix": "setEnable1v1Chat",
    "body": [
      "wx.setEnable1v1Chat({",
      "  enable: ${1:true},",
      "  backgroundType: ${2:backgroundType},",
      "  minWindowType: ${3:0},",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.setEnable1v1Chat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.setEnable1v1Chat.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启双人通话。设置 `enable` 为 `false` 时，无法接听呼叫。 */",
    "detail": "function",
    "kind": 9
  },
  "setEnableDebug": {
    "prefix": "setEnableDebug",
    "body": [
      "wx.setEnableDebug({",
      "  enableDebug: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setEnableDebug(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.setEnableDebug.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：不支持\n*\n* 设置是否打开调试开关。此开关对正式版也能生效。\n*\n* **示例代码**\n*\n* ```javascript\n// 打开调试\nwx.setEnableDebug({\n  enableDebug: true\n})\n\n// 关闭调试\nwx.setEnableDebug({\n  enableDebug: false\n})\n```\n*\n* **Tips**\n*\n* - 在正式版打开调试还有一种方法，就是先在开发版或体验版打开调试，再切到正式版就能看到vConsole。 */",
    "detail": "function",
    "kind": 9
  },
  "setInnerAudioOption": {
    "prefix": "setInnerAudioOption",
    "body": [
      "wx.setInnerAudioOption({",
      "  mixWithOther: ${1:true},",
      "  obeyMuteSwitch: ${2:true},",
      "  speakerOn: ${3:true},",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.setInnerAudioOption(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.setInnerAudioOption.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.10.0`\n         *\n         * 设置 [InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) 的播放选项。设置之后对当前小程序全局生效。\n         *\n         * ****\n         *\n         * ## 注意事项\n         * - 为保证微信整体体验，speakerOn 为 true 时，客户端会忽略 mixWithOthers 参数的内容，强制与其它音频互斥\n         * - 不支持在播放音频的过程中切换为扬声器播放，开发者如需切换可以先暂停当前播放的音频并记录下当前暂停的时间点，然后切换后重新从原来暂停的时间点开始播放音频\n         * - 目前 wx.setInnerAudioOption 接口不兼容 wx.createWebAudioContext 接口，也不兼容 wx.createInnerAudioContext 开启 useWebAudioImplement 的情况，将在后续版本中支持 */",
    "detail": "function",
    "kind": 9
  },
  "setKeepScreenOn": {
    "prefix": "setKeepScreenOn",
    "body": [
      "wx.setKeepScreenOn({",
      "  keepScreenOn: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setKeepScreenOn(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setKeepScreenOn.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。\n*\n* **示例代码**\n*\n* ```js\nwx.setKeepScreenOn({\n  keepScreenOn: true\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setNavigationBarColor": {
    "prefix": "setNavigationBarColor",
    "body": [
      "wx.setNavigationBarColor({",
      "  backgroundColor: '${1:backgroundColor}',",
      "  frontColor: '${2:frontColor}',",
      "  animation: {",
      "    duration: ${3:0},",
      "    timingFunc: ${4:timingFunc},",
      "  },",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.setNavigationBarColor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarColor.html)\n         *\n         * 需要基础库： `1.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 设置页面导航条颜色 */",
    "detail": "function",
    "kind": 9
  },
  "setNavigationBarTitle": {
    "prefix": "setNavigationBarTitle",
    "body": [
      "wx.setNavigationBarTitle({",
      "  title: '${1:title}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setNavigationBarTitle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置当前页面的标题\n*\n* **示例代码**\n*\n* ```js\nwx.setNavigationBarTitle({\n  title: '当前页面'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setScreenBrightness": {
    "prefix": "setScreenBrightness",
    "body": [
      "wx.setScreenBrightness({",
      "  value: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setScreenBrightness(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setScreenBrightness.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 设置屏幕亮度 */",
    "detail": "function",
    "kind": 9
  },
  "setStorage": {
    "prefix": "setStorage",
    "body": [
      "wx.setStorage(${1:option})"
    ],
    "description": "/** [wx.setStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\nwx.setStorage({\n  key:\"key\",\n  data:\"value\"\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.setStorage({\n  key: \"key\",\n  data: \"value\",\n  encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n  success() {\n    wx.getStorage({\n      key: \"key\",\n      encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n      success(res) {\n        console.log(res.data)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setStorageSync": {
    "prefix": "setStorageSync",
    "body": [
      "wx.setStorageSync('${1:key}', ${2:data})"
    ],
    "description": "/** [wx.setStorageSync(string key, any data)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **注意**\n*\n* storage 应只用来进行数据的持久化存储，不应用于运行时的数据传递或全局状态管理。启动过程中过多的同步读写存储，会显著影响启动耗时。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  wx.setStorageSync('key', 'value')\n} catch (e) { }\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setTabBarBadge": {
    "prefix": "setTabBarBadge",
    "body": [
      "wx.setTabBarBadge({",
      "  index: ${1:0},",
      "  text: '${2:text}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.setTabBarBadge(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarBadge.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 为 tabBar 某一项的右上角添加文本\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarBadge({\n  index: 0,\n  text: '1'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setTabBarItem": {
    "prefix": "setTabBarItem",
    "body": [
      "wx.setTabBarItem({",
      "  index: ${1:0},",
      "  iconPath: '${2:iconPath}',",
      "  selectedIconPath: '${3:selectedIconPath}',",
      "  text: '${4:text}',",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.setTabBarItem(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarItem.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 动态设置 tabBar 某一项的内容，`2.7.0` 起图片支持临时文件和网络文件。\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarItem({\n  index: 0,\n  text: 'text',\n  iconPath: '/path/to/iconPath',\n  selectedIconPath: '/path/to/selectedIconPath'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setTabBarStyle": {
    "prefix": "setTabBarStyle",
    "body": [
      "wx.setTabBarStyle({",
      "  backgroundColor: '${1:backgroundColor}',",
      "  borderStyle: '${2:borderStyle}',",
      "  color: '${3:color}',",
      "  selectedColor: '${4:selectedColor}',",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.setTabBarStyle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarStyle.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 动态设置 tabBar 的整体样式\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarStyle({\n  color: '#FF0000',\n  selectedColor: '#00FF00',\n  backgroundColor: '#0000FF',\n  borderStyle: 'white'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setTopBarText": {
    "prefix": "setTopBarText",
    "body": [
      "wx.setTopBarText({",
      "  text: '${1:text}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setTopBarText(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/sticky/wx.setTopBarText.html)\n*\n* 需要基础库： `1.4.3`\n*\n* 在插件中使用：不支持\n* @deprecated 基础库版本 [1.9.9](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n*\n* 动态设置置顶栏文字内容。只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容.\n*\n* **示例代码**\n*\n* ```js\nwx.setTopBarText({\n  text: 'hello, world!'\n})\n```\n*\n* **注意**\n*\n* - 调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg：\"setTopBarText: fail invoke too frequently\" */",
    "detail": "function",
    "kind": 9
  },
  "setVisualEffectOnCapture": {
    "prefix": "setVisualEffectOnCapture",
    "body": [
      "wx.setVisualEffectOnCapture({",
      "  visualEffect: '${1:visualEffect}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setVisualEffectOnCapture(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setVisualEffectOnCapture.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * 设置截屏/录屏时屏幕表现，仅支持在 Android 端调用 */",
    "detail": "function",
    "kind": 9
  },
  "setWifiList": {
    "prefix": "setWifiList",
    "body": [
      "wx.setWifiList({",
      "  wifiList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.setWifiList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.setWifiList.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 设置 `wifiList` 中 AP 的相关信息。在 `onGetWifiList` 回调后调用，**iOS特有接口**。\n*\n* **注意**\n*\n* - 该接口只能在 `onGetWifiList` 回调之后才能调用。\n* - 此时客户端会挂起，等待小程序设置 Wi-Fi 信息，请务必尽快调用该接口，若无数据请传入一个空数组。\n* - 有可能随着周边 Wi-Fi 列表的刷新，单个流程内收到多次带有存在重复的 Wi-Fi 列表的回调。\n*\n* **示例代码**\n*\n* ```js\nwx.onGetWifiList(function(res) {\n  if (res.wifiList.length) {\n    wx.setWifiList({\n      wifiList: [{\n        SSID: res.wifiList[0].SSID,\n        BSSID: res.wifiList[0].BSSID,\n        password: '123456'\n      }]\n    })\n  } else {\n    wx.setWifiList({\n      wifiList: []\n    })\n  }\n})\nwx.getWifiList()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "setWindowSize": {
    "prefix": "setWindowSize",
    "body": [
      "wx.setWindowSize({",
      "  height: ${1:0},",
      "  width: ${2:0},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.setWindowSize(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.setWindowSize.html)\n         *\n         * 需要基础库： `2.10.1`\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [2.11.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 设置窗口大小，该接口仅适用于 PC 平台，使用细则请参见指南 */",
    "detail": "function",
    "kind": 9
  },
  "shareFileMessage": {
    "prefix": "shareFileMessage",
    "body": [
      "wx.shareFileMessage({",
      "  filePath: '${1:filePath}',",
      "  fileName: '${2:fileName}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.shareFileMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.shareFileMessage.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 转发文件到聊天 */",
    "detail": "function",
    "kind": 9
  },
  "shareToWeRun": {
    "prefix": "shareToWeRun",
    "body": [
      "wx.shareToWeRun({",
      "  recordList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.shareToWeRun(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.shareToWeRun.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * 分享数据到微信运动。 */",
    "detail": "function",
    "kind": 9
  },
  "shareVideoMessage": {
    "prefix": "shareVideoMessage",
    "body": [
      "wx.shareVideoMessage({",
      "  videoPath: '${1:videoPath}',",
      "  thumbPath: '${2:thumbPath}',",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.shareVideoMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.shareVideoMessage.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 转发视频到聊天 */",
    "detail": "function",
    "kind": 9
  },
  "showActionSheet": {
    "prefix": "showActionSheet",
    "body": [
      "wx.showActionSheet({",
      "  itemList: [$1],",
      "  alertText: '${2:alertText}',",
      "  itemColor: '${3:itemColor}',",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.showActionSheet(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示操作菜单\n*\n* **示例代码**\n*\n* ```js\nwx.showActionSheet({\n  itemList: ['A', 'B', 'C'],\n  success (res) {\n    console.log(res.tapIndex)\n  },\n  fail (res) {\n    console.log(res.errMsg)\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 \"fail cancel\"；\n* - Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑 */",
    "detail": "function",
    "kind": 9
  },
  "showLoading": {
    "prefix": "showLoading",
    "body": [
      "wx.showLoading({",
      "  title: '${1:title}',",
      "  mask: ${2:true},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.showLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框\n*\n* **示例代码**\n*\n* ```js\nwx.showLoading({\n  title: '加载中',\n})\n\nsetTimeout(function () {\n  wx.hideLoading()\n}, 2000)\n```\n*\n* **注意**\n*\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 和 [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 同时只能显示一个\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 应与 [wx.hideLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html) 配对使用 */",
    "detail": "function",
    "kind": 9
  },
  "showModal": {
    "prefix": "showModal",
    "body": [
      "wx.showModal({",
      "  cancelColor: '${1:cancelColor}',",
      "  cancelText: '${2:cancelText}',",
      "  confirmColor: '${3:confirmColor}',",
      "  confirmText: '${4:confirmText}',",
      "  content: '${5:content}',",
      "  editable: ${6:true},",
      "  placeholderText: '${7:placeholderText}',",
      "  showCancel: ${8:true},",
      "  title: '${9:title}',",
      "  success: (result) => {$10},",
      "  fail: (res) => {$11},",
      "  complete: (res) => {$12},",
      "})"
    ],
    "description": "/** [wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示模态对话框\n*\n* **示例代码**\n*\n* ```js\nwx.showModal({\n  title: '提示',\n  content: '这是一个模态弹窗',\n  success (res) {\n    if (res.confirm) {\n      console.log('用户点击确定')\n    } else if (res.cancel) {\n      console.log('用户点击取消')\n    }\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 \"fail cancel\"；\n* - Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑\n* - 自基础库 2.17.1 版本起，支持传入 editable 参数，显示带输入框的弹窗 */",
    "detail": "function",
    "kind": 9
  },
  "showNavigationBarLoading": {
    "prefix": "showNavigationBarLoading",
    "body": [
      "wx.showNavigationBarLoading({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.showNavigationBarLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.showNavigationBarLoading.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 在当前页面显示导航条加载动画 */",
    "detail": "function",
    "kind": 9
  },
  "showRedPackage": {
    "prefix": "showRedPackage",
    "body": [
      "wx.showRedPackage({",
      "  url: '${1:url}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.showRedPackage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/redpackage/wx.showRedPackage.html)\n         *\n         * 需要基础库： `2.10.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉取h5领取红包封面页。获取参考红包封面地址参考 [微信红包封面开发平台](https://cover.weixin.qq.com/cgi-bin/mmcover-bin/readtemplate?t=page/index#/doc?page=introduce)。 */",
    "detail": "function",
    "kind": 9
  },
  "showShareImageMenu": {
    "prefix": "showShareImageMenu",
    "body": [
      "wx.showShareImageMenu({",
      "  path: '${1:path}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.showShareImageMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareImageMenu.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：需要基础库 `2.16.0`\n         *\n         * 打开分享图片弹窗，可以将图片发送给朋友、收藏或下载 */",
    "detail": "function",
    "kind": 9
  },
  "showShareMenu": {
    "prefix": "showShareMenu",
    "body": [
      "wx.showShareMenu({",
      "  menus: [$1],",
      "  withShareTicket: ${2:true},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.showShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareMenu.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 显示当前页面的转发按钮\n*\n* ****\n*\n* ## 注意事项\n*  - \"shareAppMessage\"表示“发送给朋友”按钮，\"shareTimeline\"表示“分享到朋友圈”按钮\n*  - 显示“分享到朋友圈”按钮时必须同时显示“发送给朋友”按钮，显示“发送给朋友”按钮时则允许不显示“分享到朋友圈”按钮\n*\n* **示例代码**\n*\n* ```js\nwx.showShareMenu({\n  withShareTicket: true,\n  menus: ['shareAppMessage', 'shareTimeline']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "showTabBar": {
    "prefix": "showTabBar",
    "body": [
      "wx.showTabBar({",
      "  animation: ${1:true},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.showTabBar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBar.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 显示 tabBar */",
    "detail": "function",
    "kind": 9
  },
  "showTabBarRedDot": {
    "prefix": "showTabBarRedDot",
    "body": [
      "wx.showTabBarRedDot({",
      "  index: ${1:0},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.showTabBarRedDot(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBarRedDot.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 显示 tabBar 某一项的右上角的红点 */",
    "detail": "function",
    "kind": 9
  },
  "showToast": {
    "prefix": "showToast",
    "body": [
      "wx.showToast({",
      "  title: '${1:title}',",
      "  duration: ${2:0},",
      "  icon: ${3:icon},",
      "  image: '${4:image}',",
      "  mask: ${5:true},",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.showToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示消息提示框\n*\n* **示例代码**\n*\n* ```js\nwx.showToast({\n  title: '成功',\n  icon: 'success',\n  duration: 2000\n})\n```\n*\n* **注意**\n*\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 和 [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 同时只能显示一个\n* - [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 应与 [wx.hideToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html) 配对使用 */",
    "detail": "function",
    "kind": 9
  },
  "startAccelerometer": {
    "prefix": "startAccelerometer",
    "body": [
      "wx.startAccelerometer({",
      "  interval: ${1:interval},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startAccelerometer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始监听加速度数据。\n*\n* **示例代码**\n*\n* ```js\nwx.startAccelerometer({\n  interval: 'game'\n})\n```\n*\n* **注意**\n*\n* - 根据机型性能、当前 CPU 与内存的占用情况，`interval` 的设置与实际 `wx.onAccelerometerChange()` 回调函数的执行频率会有一些出入。 */",
    "detail": "function",
    "kind": 9
  },
  "startBeaconDiscovery": {
    "prefix": "startBeaconDiscovery",
    "body": [
      "wx.startBeaconDiscovery({",
      "  uuids: [$1],",
      "  ignoreBluetoothAvailable: ${2:true},",
      "  success: (res) => {$3},",
      "  fail: (res) => {$4},",
      "  complete: (res) => {$5},",
      "})"
    ],
    "description": "/** [wx.startBeaconDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.startBeaconDiscovery.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始搜索附近的 Beacon 设备\n*\n* **示例代码**\n*\n* ```js\nwx.startBeaconDiscovery({\n  success(res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startBluetoothDevicesDiscovery": {
    "prefix": "startBluetoothDevicesDiscovery",
    "body": [
      "wx.startBluetoothDevicesDiscovery({",
      "  allowDuplicatesKey: ${1:true},",
      "  interval: ${2:0},",
      "  powerLevel: ${3:powerLevel},",
      "  services: [$4],",
      "  success: (res) => {$5},",
      "  fail: (res) => {$6},",
      "  complete: (res) => {$7},",
      "})"
    ],
    "description": "/** [wx.startBluetoothDevicesDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.startBluetoothDevicesDiscovery.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始搜寻附近的蓝牙外围设备。\n*\n* **此操作比较耗费系统资源，请在搜索到需要的设备后及时调用 [wx.stopBluetoothDevicesDiscovery](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html) 停止搜索。**\n*\n* **注意**\n*\n* - 考虑到蓝牙功能可以间接进行定位，安卓 6.0 及以上版本，无定位权限或定位开关未打开时，无法进行设备搜索。这种情况下，安卓 8.0.16 前，接口调用成功但无法扫描设备；8.0.16 及以上版本，会返回错误。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/m7klFDmZ72i1)\n*\n* ```js\n// 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备\nwx.startBluetoothDevicesDiscovery({\n  services: ['FEE7'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startCompass": {
    "prefix": "startCompass",
    "body": [
      "wx.startCompass({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.startCompass(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.startCompass.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始监听罗盘数据\n*\n* **示例代码**\n*\n* ```js\nwx.startCompass()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startDeviceMotionListening": {
    "prefix": "startDeviceMotionListening",
    "body": [
      "wx.startDeviceMotionListening({",
      "  interval: ${1:interval},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startDeviceMotionListening(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 开始监听设备方向的变化。 */",
    "detail": "function",
    "kind": 9
  },
  "startGyroscope": {
    "prefix": "startGyroscope",
    "body": [
      "wx.startGyroscope({",
      "  interval: ${1:interval},",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startGyroscope(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 开始监听陀螺仪数据。 */",
    "detail": "function",
    "kind": 9
  },
  "startHCE": {
    "prefix": "startHCE",
    "body": [
      "wx.startHCE({",
      "  aid_list: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startHCE(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.startHCE.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 初始化 NFC 模块。（HCE 模式仅安卓支持）\n*\n* **示例代码**\n*\n* ```js\nwx.startHCE({\n  aid_list: ['F222222222'],\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startLocalServiceDiscovery": {
    "prefix": "startLocalServiceDiscovery",
    "body": [
      "wx.startLocalServiceDiscovery({",
      "  serviceType: '${1:serviceType}',",
      "  success: (res) => {$2},",
      "  fail: (result) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startLocalServiceDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.startLocalServiceDiscovery.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 开始搜索局域网下的 mDNS 服务。搜索的结果会通过 wx.onLocalService* 事件返回。\n         *\n         * **注意**\n         *\n         * 1. 由于操作系统相关能力变更，iOS 微信客户端 7.0.18 及以上版本无法使用 mDNS 相关接口，安卓版本不受影响\n         * 2. wx.startLocalServiceDiscovery 是一个消耗性能的行为，开始 30 秒后会自动 stop 并执行 wx.onLocalServiceDiscoveryStop 注册的回调函数。\n         * 3. 在调用 wx.startLocalServiceDiscovery 后，在这次搜索行为停止后才能发起下次 wx.startLocalServiceDiscovery。停止本次搜索行为的操作包括调用 wx.stopLocalServiceDiscovery 和 30 秒后系统自动 stop 本次搜索。 */",
    "detail": "function",
    "kind": 9
  },
  "startLocationUpdate": {
    "prefix": "startLocationUpdate",
    "body": [
      "wx.startLocationUpdate({",
      "  type: '${1:type}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startLocationUpdate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.0`\n         *\n         * 开启小程序进入前台时接收位置消息。\n         *   ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *\n         *   ## 申请开通\n         *   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。从2022年7月14日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         *   ### 国内主体开放类目\n         *\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 电商平台 |\t/\t| 售卖商品线下发货、收货、送货服务 |\n         *   | 商家自营 |\t/\t| 提供售卖商品线下发货、收货、送货服务、线下商超导览、导航服务 |\n         *   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n         *   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n         *   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n         *   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n         *   | 餐饮服务 | \t点餐平台、外卖平台\t| 线下送餐服务 |\n         *   | 工具\t| 天气、信息查询 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询等 |\n         *   | 金融 | 保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n         *   | 旅游 | 景区服务 | 提供景区导航、导览服务 |\n         *   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n         *   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n         *\n         *   ### 海外主体开放类目\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n         *   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n         *   | 餐饮\t | /\t | 线下送餐服务 |\n         *   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n         *   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n         *   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n         *   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n         *   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n         *\n         * **注意**\n         *\n         * - 获取位置信息需配置[地理位置用途说明](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission)。 */",
    "detail": "function",
    "kind": 9
  },
  "startLocationUpdateBackground": {
    "prefix": "startLocationUpdateBackground",
    "body": [
      "wx.startLocationUpdateBackground({",
      "  type: '${1:type}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.startLocationUpdateBackground(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启小程序在前后台时均可接收位置消息，后台包括离开小程序后继续使用微信（微信仍在前台）、离开微信（微信在后台）两个场景，需引导用户开启[授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html#后台定位)。授权以后，小程序在运行中或进入后台均可接受位置消息变化。\n         *   ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *\n         *   ## 申请开通\n         *   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。从2022年7月14日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         *   ### 国内主体开放类目\n         *\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 电商平台 |\t/\t| 在小程序内提供线下商超导览、导航服务 |\n         *   | 商家自营 |\t/\t| 在小程序内提供线下商超导览、导航服务 |\n         *   | 交通服务 |\t/\t| 代驾服务、打车出行、城市共享交通、实时导航服务等 |\n         *   | 生活服务 |\t跑腿、共享服务\t| 含有B端小程序配送服务，基于地理位置共享工具类服务  |\n         *   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t提供B端小程序快递/货物收发服务 |\n         *   | 餐饮服务 | \t点餐平台、外卖平台\t| 提供B端小程序餐饮配送服务、线下门店实时导航 |\n         *   | 工具\t| 健康管理 |\t基于实时地理位置提供身体管理记录等服务 |\n         *   | 旅游 | 景区服务、住宿服务 | 在小程序内提供景区导航、导览服务、酒店导航服务 |\n         *   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n         *   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n         *\n         *   ### 海外主体开放类目\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 交通服务\t | /\t | 代驾服务、打车出行、城市共享交通、实时导航服务等 |\n         *   | 生活服务\t | 家政、外送\t | 含有B端小程序配送服务，基于地理位置导航上门服务 |\n         *   | 快递业与邮政\t | /\t | 提供B端小程序快递/货物收发服务 |\n         *   | 餐饮服务\t | 外卖点餐\t | 提供B端小程序餐饮配送服务、线下门店实时导航 |\n         *   | 电商平台\t | /\t | 在小程序内提供线下商超导览、导航服务 |\n         *   | 跨境电商\t | /\t | 在小程序内提供线下商超导览、导航服务 |\n         *   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 在小程序内提供线下商超导览、导航服务 |\n         *\n         * **注意**\n         *\n         * - 安卓微信7.0.6版本，iOS 7.0.5版本起支持该接口\n         * - 需在app.json中配置requiredBackgroundModes: ['location']后使用\n         * - 获取位置信息需配置[地理位置用途说明](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission)。 */",
    "detail": "function",
    "kind": 9
  },
  "startPullDownRefresh": {
    "prefix": "startPullDownRefresh",
    "body": [
      "wx.startPullDownRefresh({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.startPullDownRefresh(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 开始下拉刷新。调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。\n*\n* **示例代码**\n*\n* ```js\nwx.startPullDownRefresh()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startRecord": {
    "prefix": "startRecord",
    "body": [
      "wx.startRecord({",
      "  success: (result) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.startRecord(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getRecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html) 替换\n*\n* 开始录音。当主动调用 [wx.stopRecord](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html)，或者录音超过1分钟时自动结束录音。当用户离开小程序时，此接口无法调用。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n  }\n})\nsetTimeout(function () {\n  wx.stopRecord() // 结束录音\n}, 10000)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startSoterAuthentication": {
    "prefix": "startSoterAuthentication",
    "body": [
      "wx.startSoterAuthentication({",
      "  challenge: '${1:challenge}',",
      "  requestAuthModes: [$2],",
      "  authContent: '${3:authContent}',",
      "  success: (result) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.startSoterAuthentication(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.startSoterAuthentication.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：不支持\n*\n* 开始 SOTER 生物认证。验证流程请参考[说明](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/bio-auth.html)。\n*\n* **resultJSON 说明**\n*\n* 此数据为设备TEE中，将传入的challenge和TEE内其他安全信息组成的数据进行组装而来的JSON，对下述字段的解释如下表。例子如下：\n* | 字段名  | 说明                                                                                      |\n* |---------|-------------------------------------------------------------------------------------------|\n* | raw     | 调用者传入的challenge                                                                     |\n* | fid     | （仅Android支持）本次生物识别认证的生物信息编号（如指纹识别则是指纹信息在本设备内部编号） |\n* | counter | 防重放特征参数                                                                            |\n* | tee_n   | TEE名称（如高通或者trustonic等）                                                          |\n* | tee_v   | TEE版本号                                                                                 |\n* | fp_n    | 指纹以及相关逻辑模块提供商（如FPC等）                                                     |\n* | fp_v    | 指纹以及相关模块版本号                                                                    |\n* | cpu_id  | 机器唯一识别ID                                                                            |\n* | uid     | 概念同Android系统定义uid，即应用程序编号                                                  |\n*\n* ```json\n{\n  \"raw\":\"msg\",\n  \"fid\":\"2\",\n  \"counter\":123,\n  \"tee_n\":\"TEE Name\",\n  \"tee_v\":\"TEE Version\",\n  \"fp_n\":\"Fingerprint Sensor Name\",\n  \"fp_v\":\"Fingerprint Sensor Version\",\n  \"cpu_id\":\"CPU Id\",\n  \"uid\":\"21\"\n}\n```\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/q3tCKkmJ7g2e)\n* ```js\nwx.startSoterAuthentication({\n   requestAuthModes: ['fingerPrint'],\n   challenge: '123456',\n   authContent: '请用指纹解锁',\n   success(res) {\n   }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "startWifi": {
    "prefix": "startWifi",
    "body": [
      "wx.startWifi({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.startWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.startWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 初始化 Wi-Fi 模块。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/8P7zrkmd7r2n)\n* ```js\nwx.startWifi({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopAccelerometer": {
    "prefix": "stopAccelerometer",
    "body": [
      "wx.stopAccelerometer({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopAccelerometer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.stopAccelerometer.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止监听加速度数据。\n*\n* **示例代码**\n*\n* ```js\nwx.stopAccelerometer()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopBackgroundAudio": {
    "prefix": "stopBackgroundAudio",
    "body": [
      "wx.stopBackgroundAudio({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.stopBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 停止播放音乐。\n*\n* **示例代码**\n*\n* ```js\nwx.stopBackgroundAudio()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopBeaconDiscovery": {
    "prefix": "stopBeaconDiscovery",
    "body": [
      "wx.stopBeaconDiscovery({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopBeaconDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.stopBeaconDiscovery.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 停止搜索附近的 Beacon 设备 */",
    "detail": "function",
    "kind": 9
  },
  "stopBluetoothDevicesDiscovery": {
    "prefix": "stopBluetoothDevicesDiscovery",
    "body": [
      "wx.stopBluetoothDevicesDiscovery({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopBluetoothDevicesDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.stopBluetoothDevicesDiscovery({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopCompass": {
    "prefix": "stopCompass",
    "body": [
      "wx.stopCompass({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopCompass(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.stopCompass.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止监听罗盘数据\n*\n* **示例代码**\n*\n* ```js\nwx.stopCompass()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopDeviceMotionListening": {
    "prefix": "stopDeviceMotionListening",
    "body": [
      "wx.stopDeviceMotionListening({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopDeviceMotionListening(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 停止监听设备方向的变化。 */",
    "detail": "function",
    "kind": 9
  },
  "stopFaceDetect": {
    "prefix": "stopFaceDetect",
    "body": [
      "wx.stopFaceDetect({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopFaceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.stopFaceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 停止人脸检测。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html) */",
    "detail": "function",
    "kind": 9
  },
  "stopGyroscope": {
    "prefix": "stopGyroscope",
    "body": [
      "wx.stopGyroscope({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopGyroscope(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 停止监听陀螺仪数据。 */",
    "detail": "function",
    "kind": 9
  },
  "stopHCE": {
    "prefix": "stopHCE",
    "body": [
      "wx.stopHCE({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopHCE(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.stopHCE.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 关闭 NFC 模块。仅在安卓系统下有效。\n*\n* **示例代码**\n*\n* ```js\nwx.stopHCE({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopLocalServiceDiscovery": {
    "prefix": "stopLocalServiceDiscovery",
    "body": [
      "wx.stopLocalServiceDiscovery({",
      "  success: (res) => {$1},",
      "  fail: (result) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopLocalServiceDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.stopLocalServiceDiscovery.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 停止搜索 mDNS 服务 */",
    "detail": "function",
    "kind": 9
  },
  "stopLocationUpdate": {
    "prefix": "stopLocationUpdate",
    "body": [
      "wx.stopLocationUpdate({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopLocationUpdate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.stopLocationUpdate.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.0`\n         *\n         * 关闭监听实时位置变化，前后台都停止消息接收 */",
    "detail": "function",
    "kind": 9
  },
  "stopPullDownRefresh": {
    "prefix": "stopPullDownRefresh",
    "body": [
      "wx.stopPullDownRefresh({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopPullDownRefresh(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.stopPullDownRefresh.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 停止当前页面下拉刷新。\n*\n* **示例代码**\n*\n* ```js\nPage({\n  onPullDownRefresh () {\n    wx.stopPullDownRefresh()\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopRecord": {
    "prefix": "stopRecord",
    "body": [
      "wx.stopRecord({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopRecord(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getRecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html) 替换\n*\n* 停止录音。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n  }\n})\nsetTimeout(function () {\n  wx.stopRecord() // 结束录音\n}, 10000)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopVoice": {
    "prefix": "stopVoice",
    "body": [
      "wx.stopVoice({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 结束播放语音。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath,\n    })\n\n    setTimeout(() => { wx.stopVoice() }, 5000)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "stopWifi": {
    "prefix": "stopWifi",
    "body": [
      "wx.stopWifi({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.stopWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.stopWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 关闭 Wi-Fi 模块。\n*\n* **示例代码**\n*\n* ```js\nwx.stopWifi({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "subscribeVoIPVideoMembers": {
    "prefix": "subscribeVoIPVideoMembers",
    "body": [
      "wx.subscribeVoIPVideoMembers({",
      "  openIdList: [$1],",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.subscribeVoIPVideoMembers(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.subscribeVoIPVideoMembers.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 订阅视频画面成员。对于视频房间，当成员超过两人时需进行订阅，否则只能看到最先加入房间的两人画面。 */",
    "detail": "function",
    "kind": 9
  },
  "switchTab": {
    "prefix": "switchTab",
    "body": [
      "wx.switchTab({",
      "  url: '${1:url}',",
      "  success: (res) => {$2},",
      "  fail: (res) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.switchTab(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n*\n* **示例代码**\n*\n* ```json\n// app.json\n{\n  \"tabBar\": {\n    \"list\": [{\n      \"pagePath\": \"index\",\n      \"text\": \"首页\"\n    },{\n      \"pagePath\": \"other\",\n      \"text\": \"其他\"\n    }]\n  }\n}\n```\n*\n* ```js\nwx.switchTab({\n  url: '/index'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "updateShareMenu": {
    "prefix": "updateShareMenu",
    "body": [
      "wx.updateShareMenu({",
      "  activityId: '${1:activityId}',",
      "  isPrivateMessage: ${2:true},",
      "  isUpdatableMessage: ${3:true},",
      "  templateInfo: {",
      "    parameterList: [$4],",
      "  },",
      "  toDoActivityId: '${6:toDoActivityId}',",
      "  withShareTicket: ${7:true},",
      "  success: (res) => {$8},",
      "  fail: (res) => {$9},",
      "  complete: (res) => {$10},",
      "})"
    ],
    "description": "/** [wx.updateShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.updateShareMenu.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 更新转发属性\n*\n* **示例代码**\n*\n* ```js\nwx.updateShareMenu({\n  withShareTicket: true,\n  success () { }\n})\n```\n* ```js\n// 转发私密消息\nwx.updateShareMenu({\n  isPrivateMessage: true,\n  activityId: 'xxx',\n  templateInfo: {},\n  success () { },\n  fail () {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "updateVoIPChatMuteConfig": {
    "prefix": "updateVoIPChatMuteConfig",
    "body": [
      "wx.updateVoIPChatMuteConfig({",
      "  muteConfig: {",
      "    muteEarphone: ${1:true},",
      "    muteMicrophone: ${2:true},",
      "  },",
      "  success: (res) => {$4},",
      "  fail: (res) => {$5},",
      "  complete: (res) => {$6},",
      "})"
    ],
    "description": "/** [wx.updateVoIPChatMuteConfig(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.updateVoIPChatMuteConfig.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 更新实时语音静音设置 */",
    "detail": "function",
    "kind": 9
  },
  "updateWeChatApp": {
    "prefix": "updateWeChatApp",
    "body": [
      "wx.updateWeChatApp({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.updateWeChatApp(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.updateWeChatApp.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.12.0`\n         *\n         * 更新客户端版本。当判断用户小程序所在客户端版本过低时，可使用该接口跳转到更新微信页面。 */",
    "detail": "function",
    "kind": 9
  },
  "vibrateLong": {
    "prefix": "vibrateLong",
    "body": [
      "wx.vibrateLong({",
      "  success: (res) => {$1},",
      "  fail: (res) => {$2},",
      "  complete: (res) => {$3},",
      "})"
    ],
    "description": "/** [wx.vibrateLong(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 使手机发生较长时间的振动（400 ms) */",
    "detail": "function",
    "kind": 9
  },
  "vibrateShort": {
    "prefix": "vibrateShort",
    "body": [
      "wx.vibrateShort({",
      "  type: '${1:type}',",
      "  success: (res) => {$2},",
      "  fail: (result) => {$3},",
      "  complete: (res) => {$4},",
      "})"
    ],
    "description": "/** [wx.vibrateShort(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateShort.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 使手机发生较短时间的振动（15 ms）。仅在 iPhone `7 / 7 Plus` 以上及 Android 机型生效 */",
    "detail": "function",
    "kind": 9
  },
  "writeBLECharacteristicValue": {
    "prefix": "writeBLECharacteristicValue",
    "body": [
      "wx.writeBLECharacteristicValue({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "  value: ${4:value},",
      "  writeType: ${5:writeType},",
      "  success: (res) => {$6},",
      "  fail: (res) => {$7},",
      "  complete: (res) => {$8},",
      "})"
    ],
    "description": "/** [wx.writeBLECharacteristicValue(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 向蓝牙低功耗设备特征值中写入二进制数据。注意：必须设备的特征支持 write 才可以成功调用。\n*\n* **注意**\n*\n* - 并行调用多次会存在写失败的可能性。\n* - 小程序不会对写入数据包大小做限制，但系统与蓝牙设备会限制蓝牙 4.0 单次传输的数据大小，超过最大字节数后会发生写入错误，建议每次写入不超过 20 字节。\n* - 若单次写入数据过长，iOS 上存在系统不会有任何回调的情况（包括错误回调）。\n* - 安卓平台上，在调用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 成功后立即调用本接口，在部分机型上会发生 10008 系统错误\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\n// 向蓝牙设备发送一个0x00的16进制数据\nlet buffer = new ArrayBuffer(1)\nlet dataView = new DataView(buffer)\ndataView.setUint8(0, 0)\n\nwx.writeBLECharacteristicValue({\n  // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  // 这里的value是ArrayBuffer类型\n  value: buffer,\n  success (res) {\n    console.log('writeBLECharacteristicValue success', res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "getXrFrameSystem": {
    "prefix": "getXrFrameSystem",
    "body": [
      "wx.getXrFrameSystem()"
    ],
    "description": "/** 获得 xr-frame 接口系统 */",
    "detail": "function",
    "kind": 9
  },
  "wx.batchGetStorageSync": {
    "prefix": "wx.batchGetStorageSync",
    "body": [
      "wx.batchGetStorageSync([$1])"
    ],
    "description": "/** [Array.&lt;any&gt; wx.batchGetStorageSync(Array.&lt;string&gt; keyList)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchGetStorageSync.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：不支持\n*\n* 从本地缓存中同步批量获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  var valueList = wx.batchGetStorageSync(['key'])\n  if (valueList) {\n    // Do something with return value\n  }\n} catch (e) {\n  // Do something when catch error\n}\n```\n*\n* ****\n*\n* 对于多个key的读取, 批量读取在性能上优于多次getStorageSync读取 */",
    "detail": "function",
    "kind": 9
  },
  "wx.base64ToArrayBuffer": {
    "prefix": "wx.base64ToArrayBuffer",
    "body": [
      "wx.base64ToArrayBuffer('${1:base64}')"
    ],
    "description": "/** [ArrayBuffer wx.base64ToArrayBuffer(string base64)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.base64ToArrayBuffer.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：支持\n         * @deprecated 基础库版本 [2.4.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 将 Base64 字符串转成 ArrayBuffer 对象 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getAccountInfoSync": {
    "prefix": "wx.getAccountInfoSync",
    "body": [
      "wx.getAccountInfoSync()"
    ],
    "description": "/** [Object wx.getAccountInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/account-info/wx.getAccountInfoSync.html)\n*\n* 需要基础库： `2.2.2`\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 获取当前帐号信息。线上小程序版本号仅支持在正式版小程序中获取，开发版和体验版中无法获取。\n*\n* **示例代码**\n*\n* ```js\nconst accountInfo = wx.getAccountInfoSync();\nconsole.log(accountInfo.miniProgram.appId) // 小程序 appId\nconsole.log(accountInfo.plugin.appId) // 插件 appId\nconsole.log(accountInfo.plugin.version) // 插件版本号， 'a.b.c' 这样的形式\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getAppAuthorizeSetting": {
    "prefix": "wx.getAppAuthorizeSetting",
    "body": [
      "wx.getAppAuthorizeSetting()"
    ],
    "description": "/** [Object wx.getAppAuthorizeSetting()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getAppAuthorizeSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取微信APP授权设置\n*\n* **示例代码**\n*\n* ```js\nconst appAuthorizeSetting = wx.getAppAuthorizeSetting()\n\nconsole.log(appAuthorizeSetting.albumAuthorized)\nconsole.log(appAuthorizeSetting.bluetoothAuthorized)\nconsole.log(appAuthorizeSetting.cameraAuthorized)\nconsole.log(appAuthorizeSetting.locationAuthorized)\nconsole.log(appAuthorizeSetting.locationReducedAccuracy)\nconsole.log(appAuthorizeSetting.microphoneAuthorized)\nconsole.log(appAuthorizeSetting.notificationAlertAuthorized)\nconsole.log(appAuthorizeSetting.notificationAuthorized)\nconsole.log(appAuthorizeSetting.notificationBadgeAuthorized)\nconsole.log(appAuthorizeSetting.notificationSoundAuthorized)\nconsole.log(appAuthorizeSetting.phoneCalendarAuthorized)\n```\n*\n* **返回值说明**\n*\n* `'authorized'` 表示已经获得授权，无需再次请求授权；\n* `'denied'` 表示请求授权被拒绝，无法再次请求授权；（此情况需要引导用户[打开系统设置](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openAppAuthorizeSetting.html)，在设置页中打开权限）\n* `'non determined'` 表示尚未请求授权，会在微信下一次调用系统相应权限时请求；（仅 iOS 会出现。此种情况下引导用户打开系统设置，不展示开关） */",
    "detail": "function",
    "kind": 9
  },
  "wx.getAppBaseInfo": {
    "prefix": "wx.getAppBaseInfo",
    "body": [
      "wx.getAppBaseInfo()"
    ],
    "description": "/** [Object wx.getAppBaseInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getAppBaseInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取微信APP基础信息\n*\n* **示例代码**\n*\n* ```js\nconst appBaseInfo = wx.getAppBaseInfo()\n\nconsole.log(appBaseInfo.SDKVersion)\nconsole.log(appBaseInfo.enableDebug)\nconsole.log(appBaseInfo.host)\nconsole.log(appBaseInfo.language)\nconsole.log(appBaseInfo.version)\nconsole.log(appBaseInfo.theme)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBatteryInfoSync": {
    "prefix": "wx.getBatteryInfoSync",
    "body": [
      "wx.getBatteryInfoSync()"
    ],
    "description": "/** [Object wx.getBatteryInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * [wx.getBatteryInfo](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html) 的同步版本 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getDeviceInfo": {
    "prefix": "wx.getDeviceInfo",
    "body": [
      "wx.getDeviceInfo()"
    ],
    "description": "/** [Object wx.getDeviceInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getDeviceInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取设备基础信息\n*\n* **示例代码**\n*\n* ```js\nconst deviceInfo = wx.getDeviceInfo()\n\nconsole.log(deviceInfo.abi)\nconsole.log(deviceInfo.benchmarkLevel)\nconsole.log(deviceInfo.brand)\nconsole.log(deviceInfo.model)\nconsole.log(deviceInfo.platform)\nconsole.log(deviceInfo.system)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getEnterOptionsSync": {
    "prefix": "wx.getEnterOptionsSync",
    "body": [
      "wx.getEnterOptionsSync()"
    ],
    "description": "/** [Object wx.getEnterOptionsSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getEnterOptionsSync.html)\n         *\n         * 需要基础库： `2.9.4`\n         *\n         * 在插件中使用：需要基础库 `2.9.4`\n         *\n         * 获取本次小程序启动时的参数。如果当前是冷启动，则返回值与 [`App.onLaunch`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object) 的回调参数一致；如果当前是热启动，则返回值与 [`App.onShow`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object) 一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无 `referrerInfo` 的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getExptInfoSync": {
    "prefix": "wx.getExptInfoSync",
    "body": [
      "wx.getExptInfoSync([$1])"
    ],
    "description": "/** [Object wx.getExptInfoSync(Array.&lt;string&gt; keys)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.getExptInfoSync.html)\n         *\n         * 需要基础库： `2.17.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 给定实验参数数组，获取对应的实验参数值\n         *\n         * **提示**\n         *\n         * 假设实验参数有 `color`, `size`\n         * 调用 wx.getExptInfoSync() 会返回 `{color:'#fff',size:20}` 类似的结果\n         * 而 wx.getExptInfoSync(['color']) 则只会返回 `{color:'#fff'}` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getExtConfigSync": {
    "prefix": "wx.getExtConfigSync",
    "body": [
      "wx.getExtConfigSync()"
    ],
    "description": "/** [Object wx.getExtConfigSync()](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* [wx.getExtConfig](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html) 的同步版本。\n*\n* **Tips**\n*\n* 1. 本接口暂时无法通过 [wx.canIUse](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html) 判断是否兼容，开发者需要自行判断 [wx.getExtConfigSync](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html) 是否存在来兼容\n*\n* ****\n*\n* ```js\nlet extConfig = wx.getExtConfigSync? wx.getExtConfigSync(): {}\nconsole.log(extConfig)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getLaunchOptionsSync": {
    "prefix": "wx.getLaunchOptionsSync",
    "body": [
      "wx.getLaunchOptionsSync()"
    ],
    "description": "/** [Object wx.getLaunchOptionsSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：需要基础库 `2.9.4`\n         *\n         * 获取小程序启动时的参数。与 [`App.onLaunch`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onlaunchobject-object) 的回调参数一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         * | 1069   | 移动应用                    | 来源App |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无`referrerInfo`的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getMenuButtonBoundingClientRect": {
    "prefix": "wx.getMenuButtonBoundingClientRect",
    "body": [
      "wx.getMenuButtonBoundingClientRect()"
    ],
    "description": "/** [Object wx.getMenuButtonBoundingClientRect()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。\n*\n* **示例代码**\n*\n* ```js\nconst res = wx.getMenuButtonBoundingClientRect()\n\nconsole.log(res.width)\nconsole.log(res.height)\nconsole.log(res.top)\nconsole.log(res.right)\nconsole.log(res.bottom)\nconsole.log(res.left)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSkylineInfoSync": {
    "prefix": "wx.getSkylineInfoSync",
    "body": [
      "wx.getSkylineInfoSync()"
    ],
    "description": "/** [Object wx.getSkylineInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSkylineInfoSync.html)\n         *\n         * 需要基础库： `2.26.2`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 获取当前运行环境对于 [Skyline 渲染引擎](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 的支持情况 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getStorageInfoSync": {
    "prefix": "wx.getStorageInfoSync",
    "body": [
      "wx.getStorageInfoSync()"
    ],
    "description": "/** [Object wx.getStorageInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfoSync.html)\n*\n* 在插件中使用：不支持\n*\n* [wx.getStorageInfo](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.getStorageInfo({\n  success (res) {\n    console.log(res.keys)\n    console.log(res.currentSize)\n    console.log(res.limitSize)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getStorageInfoSync()\n  console.log(res.keys)\n  console.log(res.currentSize)\n  console.log(res.limitSize)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSystemInfoSync": {
    "prefix": "wx.getSystemInfoSync",
    "body": [
      "wx.getSystemInfoSync()"
    ],
    "description": "/** [Object wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* [wx.getSystemInfo](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfo.html) 的同步版本\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfo({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getSystemInfoSync()\n  console.log(res.model)\n  console.log(res.pixelRatio)\n  console.log(res.windowWidth)\n  console.log(res.windowHeight)\n  console.log(res.language)\n  console.log(res.version)\n  console.log(res.platform)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSystemSetting": {
    "prefix": "wx.getSystemSetting",
    "body": [
      "wx.getSystemSetting()"
    ],
    "description": "/** [Object wx.getSystemSetting()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取设备设置\n*\n* **示例代码**\n*\n* ```js\nconst systemSetting = wx.getSystemSetting()\n\nconsole.log(systemSetting.bluetoothEnabled)\nconsole.log(systemSetting.deviceOrientation)\nconsole.log(systemSetting.locationEnabled)\nconsole.log(systemSetting.wifiEnabled)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getWindowInfo": {
    "prefix": "wx.getWindowInfo",
    "body": [
      "wx.getWindowInfo()"
    ],
    "description": "/** [Object wx.getWindowInfo()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getWindowInfo.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取窗口信息\n*\n* **示例代码**\n*\n* ```js\nconst windowInfo = wx.getWindowInfo()\n\nconsole.log(windowInfo.pixelRatio)\nconsole.log(windowInfo.screenWidth)\nconsole.log(windowInfo.screenHeight)\nconsole.log(windowInfo.windowWidth)\nconsole.log(windowInfo.windowHeight)\nconsole.log(windowInfo.statusBarHeight)\nconsole.log(windowInfo.safeArea)\nconsole.log(windowInfo.screenTop)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getRendererUserAgent": {
    "prefix": "wx.getRendererUserAgent",
    "body": [
      "wx.getRendererUserAgent()"
    ],
    "description": "/** [Promise<string> wx.getRendererUserAgent(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getRendererUserAgent.html)\n*\n* 需要基础库： `2.26.3`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取 Webview 小程序的 UserAgent\n*\n* **示例代码**\n*\n* ```js\n// v2.30.4 前，仅支持 promise 风格调用\nwx.getRendererUserAgent().then(userAgent => console.log(userAgent))\n// v2.30.4 起，除 promise 风格调用外，也支持 invoke 风格使用\nwx.getRendererUserAgent({\n  success(res) { console.log(res.userAgent) }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createAnimation": {
    "prefix": "wx.createAnimation",
    "body": [
      "wx.createAnimation()"
    ],
    "description": "/** [[Animation](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html) wx.createAnimation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/wx.createAnimation.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建一个动画实例 [animation](https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html)。调用实例的方法来描述动画。最后通过动画实例的 export 方法导出动画数据传递给组件的 animation 属性。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createAudioContext": {
    "prefix": "wx.createAudioContext",
    "body": [
      "wx.createAudioContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[AudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html) wx.createAudioContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createAudioContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         * @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n         *\n         * 创建 [audio](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html) 上下文 [AudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBackgroundAudioManager": {
    "prefix": "wx.getBackgroundAudioManager",
    "body": [
      "wx.getBackgroundAudioManager()"
    ],
    "description": "/** [[BackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html) wx.getBackgroundAudioManager()](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取**全局唯一**的背景音频管理器。\n         * 小程序切入后台，如果音频处于播放状态，可以继续播放。但是后台状态不能通过调用API操纵音频的播放状态。\n         *\n         * 从微信客户端6.7.2版本开始，若需要在小程序切后台后继续播放音频，需要在 [app.json](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html) 中配置 `requiredBackgroundModes` 属性。开发版和体验版上可以直接生效，正式版还需通过审核。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createCacheManager": {
    "prefix": "wx.createCacheManager",
    "body": [
      "wx.createCacheManager()"
    ],
    "description": "/** [[CacheManager](https://developers.weixin.qq.com/miniprogram/dev/api/storage/cachemanager/CacheManager.html) wx.createCacheManager(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/cachemanager/wx.createCacheManager.html)\n*\n* 需要基础库： `2.24.0`\n*\n* 在插件中使用：不支持\n*\n* 创建缓存管理器\n*\n* **示例代码**\n*\n* <a href=\"https://github.com/wechat-miniprogram/miniprogram-offline-demo\" target=\"_blank\">查看完整示例代码</a>\n*\n* ```js\nconst cacheManager = createCacheManager()\ncacheManager.addRule(/https:\\/\\/(?:.*)/ig) // 表示所有 https 请求都匹配\n\ncacheManager.on('request', evt => {\n // 在弱网时接收到 wx.request 请求\n return new Promise((resolve, reject) => {\n   const matchRes = cm.match(evt)\n   if (matchRes && matchRes.data) {\n     // 有缓存，返回\n     resolve(matchRes.data)\n   } else {\n     // 没缓存，抛错\n     reject({ errMsg: 'no cache' })\n   }\n })\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createCameraContext": {
    "prefix": "wx.createCameraContext",
    "body": [
      "wx.createCameraContext()"
    ],
    "description": "/** [[CameraContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html) wx.createCameraContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/wx.createCameraContext.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [camera](https://developers.weixin.qq.com/miniprogram/dev/component/camera.html) 上下文 [CameraContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createCanvasContext": {
    "prefix": "wx.createCanvasContext",
    "body": [
      "wx.createCanvasContext('${1:canvasId}', ${2:component})"
    ],
    "description": "/** [[CanvasContext](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html) wx.createCanvasContext(string canvasId, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         * @deprecated 基础库版本 [2.9.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [Canvas](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.html) 替换\n         *\n         * 创建 canvas 的绘图上下文 [CanvasContext](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html) 对象 */",
    "detail": "function",
    "kind": 9
  },
  "wx.downloadFile": {
    "prefix": "wx.downloadFile",
    "body": [
      "wx.downloadFile({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [[DownloadTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.html) wx.downloadFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/download/wx.downloadFile.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 下载文件资源到本地。客户端直接发起一个 HTTPS GET 请求，返回文件的本地临时路径 (本地路径)，单次下载允许的最大文件为 200MB。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* 注意：请在服务端响应的 header 中指定合理的 `Content-Type` 字段，以保证客户端正确处理文件类型。\n*\n* **示例代码**\n*\n* ```js\nwx.downloadFile({\n  url: 'https://example.com/audio/123', //仅为示例，并非真实的资源\n  success (res) {\n    // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容\n    if (res.statusCode === 200) {\n      wx.playVoice({\n        filePath: res.tempFilePath\n      })\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getFileSystemManager": {
    "prefix": "wx.getFileSystemManager",
    "body": [
      "wx.getFileSystemManager()"
    ],
    "description": "/** [[FileSystemManager](https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.html) wx.getFileSystemManager()](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html)\n         *\n         * 需要基础库： `1.9.9`\n         *\n         * 在插件中使用：需要基础库 `2.19.2`\n         *\n         * 获取全局唯一的文件管理器 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createInferenceSession": {
    "prefix": "wx.createInferenceSession",
    "body": [
      "wx.createInferenceSession({",
      "  model: '${1:model}',",
      "})"
    ],
    "description": "/** [[InferenceSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/InferenceSession.html) wx.createInferenceSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/wx.createInferenceSession.html)\n*\n* 需要基础库： `2.30.0`\n*\n* 在插件中使用：需要基础库 `2.30.0`\n*\n* 创建 AI 推理 Session。使用前可参考[AI指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/inference/tutorial.html)\n*\n* **示例代码**\n*\n* ```js\n// 创建会话，加载模型\nconst session = wx.createInferenceSession({\n  model: `${wx.env.USER_DATA_PATH}/MNIST.onnx`,\n  precisionLevel: 4,\n  typicalShape:{input1:[1, 3, 224, 224], input2:[1, 1, 224, 224]},  //除非使用动态轴，一般不用显式指定\n  allowNPU: false,\n  allowQuantize: false\n})\n\n// 监听error事件\nsession.onError(err => {\n  console.error(err)\n})\n\n// 监听模型加载完成事件\nsession.onLoad(() => {\n  // 运行推理\n  // 其中input1, input2, output0 必须与使用的onnx模型中实际的输入输出名字完全一致，不可随意填写。\n  // 模型输入输出信息可以通过Netron 打开onnx模型看到\n  session.run({\n    input1: {\n      type: 'float32',\n      data: new Float32Array(3 * 224 * 224).buffer,\n      shape: [1, 3, 224, 224] // NCHW 顺序\n    },\n    // 多个input的添加方法，假设第二个input需要数据类型为uint8\n    input2: {\n      type: 'uint8',\n      data: new Uint8Array(224 * 224).buffer,\n      shape: [1, 1, 224, 224]\n    },\n  }).then(res => {\n    console.log(res.output0)\n  })\n})\n\n// 销毁Session\n// session完成创建后可以多次调用run进行推理，直到调用`session.destroy()`释放相关内存。\n\n// 销毁会话\nsession.destroy()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createInnerAudioContext": {
    "prefix": "wx.createInnerAudioContext",
    "body": [
      "wx.createInnerAudioContext()"
    ],
    "description": "/** [[InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) wx.createInnerAudioContext(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 创建内部 [audio](https://developers.weixin.qq.com/miniprogram/dev/component/audio.html) 上下文 [InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) 对象。\n*\n* **示例代码**\n*\n* ```js\nconst innerAudioContext = wx.createInnerAudioContext({\n  useWebAudioImplement: false // 是否使用 WebAudio 作为底层音频驱动，默认关闭。对于短音频、播放频繁的音频建议开启此选项，开启后将获得更优的性能表现。由于开启此选项后也会带来一定的内存增长，因此对于长音频建议关闭此选项\n})\ninnerAudioContext.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46'\n\ninnerAudioContext.play() // 播放\n\ninnerAudioContext.pause() // 暂停\n\ninnerAudioContext.stop() // 停止\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createIntersectionObserver": {
    "prefix": "wx.createIntersectionObserver",
    "body": [
      "wx.createIntersectionObserver(${1:component})"
    ],
    "description": "/** [[IntersectionObserver](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.html) wx.createIntersectionObserver(Object component, Object options)](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createIntersectionObserver.html)\n         *\n         * 需要基础库： `1.9.3`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建并返回一个 IntersectionObserver 对象实例。在自定义组件或包含自定义组件的页面中，应使用 `this.createIntersectionObserver([options])` 来代替。\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/LAbMxkmI7F2A) */",
    "detail": "function",
    "kind": 9
  },
  "wx.createInterstitialAd": {
    "prefix": "wx.createInterstitialAd",
    "body": [
      "wx.createInterstitialAd({",
      "  adUnitId: '${1:adUnitId}',",
      "})"
    ],
    "description": "/** [[InterstitialAd](https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.html) wx.createInterstitialAd(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createInterstitialAd.html)\n         *\n         * 需要基础库： `2.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.1`\n         *\n         * 创建插屏广告组件。请通过 [wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html) 返回对象的 SDKVersion 判断基础库版本号后再使用该 API。每次调用该方法创建插屏广告都会返回一个全新的实例（小程序端的插屏广告实例不允许跨页面使用）。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createLivePlayerContext": {
    "prefix": "wx.createLivePlayerContext",
    "body": [
      "wx.createLivePlayerContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[LivePlayerContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html) wx.createLivePlayerContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePlayerContext.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [live-player](https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html) 上下文 [LivePlayerContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createLivePusherContext": {
    "prefix": "wx.createLivePusherContext",
    "body": [
      "wx.createLivePusherContext()"
    ],
    "description": "/** [[LivePusherContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html) wx.createLivePusherContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePusherContext.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [live-pusher](https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html) 上下文 [LivePusherContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html) 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getLogManager": {
    "prefix": "wx.getLogManager",
    "body": [
      "wx.getLogManager()"
    ],
    "description": "/** [[LogManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.html) wx.getLogManager(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getLogManager.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：不支持\n*\n* 获取日志管理器对象。\n*\n* **示例代码**\n*\n* ```js\nconst logger = wx.getLogManager({level: 1})\nlogger.log({str: 'hello world'}, 'basic log', 100, [1, 2, 3])\nlogger.info({str: 'hello world'}, 'info log', 100, [1, 2, 3])\nlogger.debug({str: 'hello world'}, 'debug log', 100, [1, 2, 3])\nlogger.warn({str: 'hello world'}, 'warn log', 100, [1, 2, 3])\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createMapContext": {
    "prefix": "wx.createMapContext",
    "body": [
      "wx.createMapContext('${1:mapId}', ${2:component})"
    ],
    "description": "/** [[MapContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html) wx.createMapContext(string mapId, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/wx.createMapContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [map](https://developers.weixin.qq.com/miniprogram/dev/component/map.html) 上下文 [MapContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createMediaAudioPlayer": {
    "prefix": "wx.createMediaAudioPlayer",
    "body": [
      "wx.createMediaAudioPlayer()"
    ],
    "description": "/** [[MediaAudioPlayer](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/MediaAudioPlayer.html) wx.createMediaAudioPlayer()](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createMediaAudioPlayer.html)\n*\n* 需要基础库： `2.13.0`\n*\n* 在插件中使用：支持\n*\n* 创建媒体音频播放器对象 [MediaAudioPlayer](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/MediaAudioPlayer.html) 对象，可用于播放视频解码器 [VideoDecoder](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/VideoDecoder.html) 输出的音频。\n*\n* **示例代码**\n*\n* ```js\n  // 创建视频解码器，具体参数见 createVideoDecoder 文档\n  const videoDecoder = wx.createVideoDecoder()\n  // 创建媒体音频播放器\n  const mediaAudioPlayer = wx.createMediaAudioPlayer()\n  // 启动视频解码器\n  videoDecoder.start()\n  // 启动播放器\n  mediaAudioPlayer.start().then(() => {\n    // 添加播放器音频来源\n    mediaAudioPlayer.addAudioSource(videoDecoder).then(res => {\n      videoDecoder.getFrameData() // 建议在 requestAnimationFrame 里获取每一帧视频数据\n      console.log(res)\n    })\n\n    // 移除播放器音频来源\n    mediaAudioPlayer.removeAudioSource(videoDecoder).then()\n    // 停止播放器\n    mediaAudioPlayer.stop().then()\n    // 销毁播放器\n    mediaAudioPlayer.destroy().then()\n    // 设置播放器音量\n    mediaAudioPlayer.volume = 0.5\n  })\n```\n*\n* **完整demo（小游戏）**\n*\n* - https://developers.weixin.qq.com/s/SF2duHmb7MjI */",
    "detail": "function",
    "kind": 9
  },
  "wx.createMediaContainer": {
    "prefix": "wx.createMediaContainer",
    "body": [
      "wx.createMediaContainer()"
    ],
    "description": "/** [[MediaContainer](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-processing/MediaContainer.html) wx.createMediaContainer()](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-processing/wx.createMediaContainer.html)\n         *\n         * 需要基础库： `2.9.0`\n         *\n         * 在插件中使用：需要基础库 `2.10.0`\n         *\n         * 创建音视频处理容器，最终可将容器中的轨道合成一个视频 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createMediaRecorder": {
    "prefix": "wx.createMediaRecorder",
    "body": [
      "wx.createMediaRecorder(${1:canvas})"
    ],
    "description": "/** [[MediaRecorder](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/MediaRecorder.html) wx.createMediaRecorder(Object canvas, Object options)](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/wx.createMediaRecorder.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：需要基础库 `2.11.0`\n*\n* 创建 WebGL 画面录制器，可逐帧录制在 WebGL 上渲染的画面并导出视频文件\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/MCz3kPmC7zpa)\n*\n* **低版本异步接口兼容**\n*\n* 对基础库 2.16.1 版本前的 mediaRecorder，所有的接口都没有返回 Promise 对象，若需要兼容低版本，则可采用如下方式的写法：\n* ```javascript\n// 启动 mediaRecorder\nawait new Promise(resolve => {\n  recorder.on('start', resolve)\n  recorder.start()\n})\n\n// 逐帧绘制\nwhile (frames--) {\n  await new Promise(resolve => recorder.requestFrame(resolve))\n  render()\n}\n\n// 绘制完成，生成视频\nconst {tempFilePath} = await new Promise(resolve => {\n  recorder.on('stop', resolve)\n  recorder.stop()\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getNFCAdapter": {
    "prefix": "wx.getNFCAdapter",
    "body": [
      "wx.getNFCAdapter()"
    ],
    "description": "/** [[NFCAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/NFCAdapter.html) wx.getNFCAdapter()](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.getNFCAdapter.html)\n         *\n         * 需要基础库： `2.11.2`\n         *\n         * 在插件中使用：需要基础库 `2.11.2`\n         *\n         * 获取 NFC 实例\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/1WsbDwmb75ig) */",
    "detail": "function",
    "kind": 9
  },
  "wx.createOffscreenCanvas": {
    "prefix": "wx.createOffscreenCanvas",
    "body": [
      "wx.createOffscreenCanvas()"
    ],
    "description": "/** [[OffscreenCanvas](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/OffscreenCanvas.html) wx.createOffscreenCanvas(object object, number width, number height, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createOffscreenCanvas.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：需要基础库 `2.16.1`\n         *\n         * 创建离屏 canvas 实例\n         *\n         * **离屏 Canvas 类型不可混用**\n         *\n         * 由于 webgl canvas 和 2d canvas 的底层实现方式不同，因此必须要在调用 `wx.createOffscreenCanvas` 时提前指定类型。\n         *\n         * 指定类型后，离屏 canvas `getContext(type)` 调用不允许混用，如不能对 webgl canvas 调用 `getContext('2d')`。\n         *\n         * 同样的，不同类型 canvas 调用 `createImage` 创建的图片对象也不支持混用，使用时请注意尽量使用 canvas 自身的 `createImage` 创建图片对象。\n         *\n         * **与 MediaRecorder 结合**\n         *\n         * 离屏 webgl canvas 支持作为参数传递给 [`wx.createMediaRecorder`](https://developers.weixin.qq.com/miniprogram/dev/api/media/media-recorder/wx.createMediaRecorder.html), 离屏 2d canvas 暂不支持。\n         *\n         * **旧版 createOffscreenCanvas**\n         *\n         * 旧版函数签名为 `wx.createOffscreenCanvas(width: number, height: number, this: object): OffscreenCanvas`，从基础库 2.7.0 开始支持\n         *\n         * 从基础库 2.16.1 开始改为 `wx.createOffscreenCanvas(options: object): OffscreenCanvas`，向下兼容旧版入参。\n         * 但需注意旧版入参只能创建 webgl 类型，如需创建 2d 类型则必须使用新版。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getPerformance": {
    "prefix": "wx.getPerformance",
    "body": [
      "wx.getPerformance()"
    ],
    "description": "/** [[Performance](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/Performance.html) wx.getPerformance()](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.getPerformance.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：支持\n*\n* 获取当前小程序性能相关的信息。关于小程序启动性能优化的更多内容，请参考[启动性能指南](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start.html)。\n*\n* ****\n*\n* 目前支持获取以下几类性能指标，具体内容请参考 [PerformanceEntry](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/PerformanceEntry.html)：\n*\n* | 指标类型（entryType） | 指标名称          | 最低版本 ｜\n* | ------------------- | ---------------- | ------ |\n* | 路由（navigation）   | route: 路由性能 | |\n* | 路由（navigation）   | appLaunch: 小程序启动耗时 | |\n* | 渲染（render）       | firstRender: 页面首次渲染耗时 | |\n* | 渲染（render）       | firstPaint: 页面首次绘制 | <2.21.2> |\n* | 渲染（render）       | firstContentfulPaint: 页面首次内容绘制 |  <2.21.2> |\n* | 渲染（render）       | largestContentfulPaint: 页面最大内容绘制 | <2.23.1> |\n* | 脚本（script）       | evaluateScript: 注入脚本耗时  | |\n* | 包加载（loadPackage）| downloadPackage: 代码包下载耗时  | <2.24.0> |\n* | 资源（resource）     | resourceTiming: 视图层资源加载耗时  | <2.24.0> |\n*\n* **示例代码**\n*\n* ```js\nconst performance = wx.getPerformance()\nconst observer = performance.createObserver((entryList) => {\n  console.log(entryList.getEntries())\n})\nobserver.observe({ entryTypes: ['render', 'script', 'navigation'] })\n```\n*\n* **注意**\n*\n* - 目前，当开启代码 [按需注入](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/lazyload.html) 时，`evaluateScript` 将仅包含公有部分代码（2.21.2 开始会区分公共部分/页面和组件的部分），页面和组件的代码注入的时间会包含在 `firstRender` 中（因为页面和组件的代码注入过程成为了首次渲染过程的一部分）。因此开启按需注入后，脚本耗时降低，渲染时间提高属于正常现象，优化效果可以关注整体启动耗时（`appLaunch`）来评估。\n* - firstPaint 和 firstContentfulPaint 指标在开启 vConsole 的情况下，由于绘制 vConsole 面板，会导致数据提前。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.preDownloadSubpackage": {
    "prefix": "wx.preDownloadSubpackage",
    "body": [
      "wx.preDownloadSubpackage({",
      "  complete: ${1:complete},",
      "  fail: ${2:fail},",
      "  packageType: '${3:packageType}',",
      "  success: ${4:success},",
      "})"
    ],
    "description": "/** [[PreDownloadSubpackageTask](https://developers.weixin.qq.com/miniprogram/dev/api/base/subpackage/PreDownloadSubpackageTask.html) wx.preDownloadSubpackage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/subpackage/wx.preDownloadSubpackage.html)\n*\n* 需要基础库： `2.27.3`\n*\n* 在插件中使用：不支持\n*\n* 触发分包预下载。\n*\n* **示例代码**\n*\n* ```js\n// 首先要在 app.json / game.json 中配置workers作为分包\n{\n  \"workers\": {\n    \"path\": \"myWorkersFolder\",\n    \"isSubpackage\": true  // true 表示把 worker 打包为分包。默认 false。填 false 时等同于 { \"workers\": \"workers\" }\n  }\n}\n```\n* ```js\n// 然后调用 wx.preDownloadSubpackage 下载 worker 分包，下载成功后才可以创建 worker\nvar task = wx.preDownloadSubpackage({\n  packageType: \"workers\",\n  success(res) {\n    console.log(\"load worker success\", res)\n    wx.createWorker(\"myWorkersFolder/request/index.js\")   // 创建 worker。 如果 worker 分包没下载完就调 createWorker 的话将报错\n  },\n  fail(res) {\n    console.log(\"load worker fail\", res)\n  }\n})\n\ntask.onProgressUpdate(res => {\n  console.log(res.progress) // 可通过 onProgressUpdate 接口监听下载进度\n  console.log(res.totalBytesWritten)\n  console.log(res.totalBytesExpectedToWrite)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getRealtimeLogManager": {
    "prefix": "wx.getRealtimeLogManager",
    "body": [
      "wx.getRealtimeLogManager()"
    ],
    "description": "/** [[RealtimeLogManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.html) wx.getRealtimeLogManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getRealtimeLogManager.html)\n*\n* 需要基础库： `2.7.1`\n*\n* 在插件中使用：需要基础库 `2.16.0`\n*\n* 获取实时日志管理器对象。\n*\n* **示例代码**\n*\n* ```js\n// 小程序端\nconst logger = wx.getRealtimeLogManager()\nlogger.info({str: 'hello world'}, 'info log', 100, [1, 2, 3])\nlogger.error({str: 'hello world'}, 'error log', 100, [1, 2, 3])\nlogger.warn({str: 'hello world'}, 'warn log', 100, [1, 2, 3])\n\n// 插件端，基础库 2.16.0 版本后支持，只允许采用 key-value 的新格式上报\nconst logManager = wx.getRealtimeLogManager()\nconst logger = logManager.tag('plugin-log1')\nlogger.info('key1', 'value1')\nlogger.error('key2', {str: 'value2'})\nlogger.warn('key3', 'value3')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getRecorderManager": {
    "prefix": "wx.getRecorderManager",
    "body": [
      "wx.getRecorderManager()"
    ],
    "description": "/** [[RecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.html) wx.getRecorderManager()](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.94`\n         *\n         * 获取**全局唯一**的录音管理器 RecorderManager */",
    "detail": "function",
    "kind": 9
  },
  "wx.request": {
    "prefix": "wx.request",
    "body": [
      "wx.request({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [[RequestTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.html) wx.request(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 发起 HTTPS 网络请求。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **data 参数说明**\n*\n* 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：\n* - 对于 `GET` 方法的数据，会将数据转换成 query string（`encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...`）\n* - 对于 `POST` 方法且 `header['content-type']` 为 `application/json` 的数据，会对数据进行 JSON 序列化\n* - 对于 `POST` 方法且 `header['content-type']` 为 `application/x-www-form-urlencoded` 的数据，会将数据转换成 query string `（encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）`\n*\n* **示例代码**\n*\n* ```js\nwx.request({\n  url: 'example.php', //仅为示例，并非真实的接口地址\n  data: {\n    x: '',\n    y: ''\n  },\n  header: {\n    'content-type': 'application/json' // 默认值\n  },\n  success (res) {\n    console.log(res.data)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createRewardedVideoAd": {
    "prefix": "wx.createRewardedVideoAd",
    "body": [
      "wx.createRewardedVideoAd({",
      "  adUnitId: '${1:adUnitId}',",
      "})"
    ],
    "description": "/** [[RewardedVideoAd](https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.html) wx.createRewardedVideoAd(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createRewardedVideoAd.html)\n         *\n         * 需要基础库： `2.0.4`\n         *\n         * 在插件中使用：需要基础库 `2.8.1`\n         *\n         * 创建激励视频广告组件。请通过 [wx.getSystemInfoSync()](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoSync.html) 返回对象的 SDKVersion 判断基础库版本号后再使用该 API（小游戏端要求 >= 2.0.4， 小程序端要求 >= 2.6.0）。调用该方法创建的激励视频广告是一个单例（小游戏端是全局单例，小程序端是页面内单例，在小程序端的单例对象不允许跨页面使用）。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createSelectorQuery": {
    "prefix": "wx.createSelectorQuery",
    "body": [
      "wx.createSelectorQuery()"
    ],
    "description": "/** [[SelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html) wx.createSelectorQuery()](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 `this.createSelectorQuery()` 来代替。\n*\n* **示例代码**\n*\n* ```js\nconst query = wx.createSelectorQuery()\nquery.select('#the-id').boundingClientRect()\nquery.selectViewport().scrollOffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.connectSocket": {
    "prefix": "wx.connectSocket",
    "body": [
      "wx.connectSocket({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [[SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) wx.connectSocket(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.connectSocket.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 创建一个 WebSocket 连接。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **并发数**\n*\n* - 1.7.0 及以上版本，最多可以同时存在 5 个 WebSocket 连接。\n* - 1.7.0 以下版本，一个小程序同时只能有一个 WebSocket 连接，如果当前已存在一个 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。\n*\n* **示例代码**\n*\n* ```js\nwx.connectSocket({\n  url: 'wss://example.qq.com',\n  header:{\n    'content-type': 'application/json'\n  },\n  protocols: ['protocol1']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createTCPSocket": {
    "prefix": "wx.createTCPSocket",
    "body": [
      "wx.createTCPSocket()"
    ],
    "description": "/** [[TCPSocket](https://developers.weixin.qq.com/miniprogram/dev/api/network/tcp/TCPSocket.html) wx.createTCPSocket()](https://developers.weixin.qq.com/miniprogram/dev/api/network/tcp/wx.createTCPSocket.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：支持\n         *\n         * 创建一个 TCP Socket 实例。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n         *\n         * **连接限制**\n         *\n         * - 允许与局域网内的非本机 IP 通信\n         * - 允许与配置过的服务器域名通信，详见[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)\n         * - 禁止与以下端口号连接：`1024 以下` `1099` `1433` `1521` `1719` `1720` `1723` `2049` `2375` `3128` `3306` `3389` `3659` `4045` `5060` `5061` `5432` `5984` `6379` `6000` `6566` `7001` `7002` `8000-8100` `8443` `8888` `9200` `9300` `10051` `10080` `11211` `27017` `27018` `27019`\n         * - 每 5 分钟内最多创建 20 个 TCPSocket */",
    "detail": "function",
    "kind": 9
  },
  "wx.createUDPSocket": {
    "prefix": "wx.createUDPSocket",
    "body": [
      "wx.createUDPSocket()"
    ],
    "description": "/** [[UDPSocket](https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.html) wx.createUDPSocket()](https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/wx.createUDPSocket.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.1`\n         *\n         * 创建一个 UDP Socket 实例。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getUpdateManager": {
    "prefix": "wx.getUpdateManager",
    "body": [
      "wx.getUpdateManager()"
    ],
    "description": "/** [[UpdateManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html) wx.getUpdateManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html)\n         *\n         * 需要基础库： `1.9.90`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取**全局唯一**的版本更新管理器，用于管理小程序更新。关于小程序的更新机制，可以查看[运行机制](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html)文档。\n         *\n         * **示例代码**\n         *\n         * [示例代码](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html#示例代码) */",
    "detail": "function",
    "kind": 9
  },
  "wx.uploadFile": {
    "prefix": "wx.uploadFile",
    "body": [
      "wx.uploadFile({",
      "  filePath: '${1:filePath}',",
      "  name: '${2:name}',",
      "  url: '${3:url}',",
      "})"
    ],
    "description": "/** [[UploadTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.html) wx.uploadFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将本地资源上传到服务器。客户端发起一个 HTTPS POST 请求，其中 `content-type` 为 `multipart/form-data`。使用前请注意阅读[相关说明](https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseImage({\n  success (res) {\n    const tempFilePaths = res.tempFilePaths\n    wx.uploadFile({\n      url: 'https://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址\n      filePath: tempFilePaths[0],\n      name: 'file',\n      formData: {\n        'user': 'test'\n      },\n      success (res){\n        const data = res.data\n        //do something\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getUserCryptoManager": {
    "prefix": "wx.getUserCryptoManager",
    "body": [
      "wx.getUserCryptoManager()"
    ],
    "description": "/** [[UserCryptoManager](https://developers.weixin.qq.com/miniprogram/dev/api/base/crypto/UserCryptoManager.html) wx.getUserCryptoManager()](https://developers.weixin.qq.com/miniprogram/dev/api/base/crypto/wx.getUserCryptoManager.html)\n         *\n         * 需要基础库： `2.17.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取用户加密模块 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createVKSession": {
    "prefix": "wx.createVKSession",
    "body": [
      "wx.createVKSession({",
      "  track: {",
      "    plane: {",
      "      mode: ${1:mode},",
      "    },",
      "  },",
      "})"
    ],
    "description": "/** [[VKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/VKSession.html) wx.createVKSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html)\n*\n* 需要基础库： `2.20.0`\n*\n* 在插件中使用：需要基础库 `2.20.0`\n*\n* 创建 vision kit 会话对象。\n*\n* **示例代码**\n*\n* v1 版本：[VisionKit基础能力使用参考](https://github.com/wechat-miniprogram/miniprogram-demo/tree/master/miniprogram/packageAPI/pages/ar/visionkit-basic)\n* v2 版本：[VisionKit-v2基础能力使用参考](https://github.com/wechat-miniprogram/miniprogram-demo/tree/master/miniprogram/packageAPI/pages/ar/visionkit-basic-v2)\n* ```js\n// 以下 demo 以 v2 为例\n// 创建 session 对象\nconst ssession = wx.createVKSession({\n  track: {\n    plane: {mode: 3},\n  },\n  version: 'v2',\n  gl, // WebGLRenderingContext\n})\n\n// 逐帧分析\nconst onFrame = timestamp => {\n  // 开发者可以自己控制帧率\n  const frame = session.getVKFrame(canvasWidth, canvasHeight)\n    if (frame) {\n      // 分析完毕，可以拿到帧对象\n      doRender(frame)\n    }\n\n  session.requestAnimationFrame(onFrame)\n}\nsession.start(err => {\n  if (!err) session.requestAnimationFrame(onFrame)\n})\n\n// 渲染函数\nconst doRender = frame => {\n  // ...\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createVideoContext": {
    "prefix": "wx.createVideoContext",
    "body": [
      "wx.createVideoContext('${1:id}', ${2:component})"
    ],
    "description": "/** [[VideoContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html) wx.createVideoContext(string id, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.createVideoContext.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 创建 [video](https://developers.weixin.qq.com/miniprogram/dev/component/video.html) 上下文 [VideoContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html) 对象。建议使用 [wx.createSelectorQuery](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html) 获取 context 对象。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createVideoDecoder": {
    "prefix": "wx.createVideoDecoder",
    "body": [
      "wx.createVideoDecoder()"
    ],
    "description": "/** [[VideoDecoder](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/VideoDecoder.html) wx.createVideoDecoder()](https://developers.weixin.qq.com/miniprogram/dev/api/media/video-decoder/wx.createVideoDecoder.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 创建视频解码器，可逐帧获取解码后的数据 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createWebAudioContext": {
    "prefix": "wx.createWebAudioContext",
    "body": [
      "wx.createWebAudioContext()"
    ],
    "description": "/** [[WebAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/WebAudioContext.html) wx.createWebAudioContext()](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createWebAudioContext.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 创建 WebAudio 上下文。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createWorker": {
    "prefix": "wx.createWorker",
    "body": [
      "wx.createWorker('${1:scriptPath}')"
    ],
    "description": "/** [[Worker](https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.html) wx.createWorker(string scriptPath, object options)](https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html)\n*\n* 需要基础库： `1.9.90`\n*\n* 在插件中使用：需要基础库 `2.18.1`\n*\n* 创建一个 Worker 线程\n*\n* **示例代码**\n*\n* ```js\n// 创建普通worker\nwx.createWorker('workers/index.js')\n```\n* ```js\nfunction createNewWorker() {\n  const worker = wx.createWorker('workers/index.js', {\n    useExperimentalWorker: true\n  })\n  // 监听worker被系统回收事件\n  worker.onProcessKilled(() => {\n    // 重新创建一个worker\n    createNewWorker()\n  })\n}\n// 创建实验worker\ncreateNewWorker()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getStorageSync": {
    "prefix": "wx.getStorageSync",
    "body": [
      "wx.getStorageSync('${1:key}')"
    ],
    "description": "/** [any wx.getStorageSync(string key)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中同步获取指定 key 的内容。\n*\n* **注意**\n*\n* storage 应只用来进行数据的持久化存储，不应用于运行时的数据传递或全局状态管理。启动过程中过多的同步读写存储，会显著影响启动耗时。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  var value = wx.getStorageSync('key')\n  if (value) {\n    // Do something with return value\n  }\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.canIUse": {
    "prefix": "wx.canIUse",
    "body": [
      "wx.canIUse('${1:schema}')"
    ],
    "description": "/** [boolean wx.canIUse(string schema)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html)\n*\n* 需要基础库： `1.1.1`\n*\n* 在插件中使用：不支持\n*\n* 判断小程序的API，回调，参数，组件等是否在当前版本可用。\n*\n* **参数说明**\n*\n* - `${API}` 代表 API 名字\n* - `${method}` 代表调用方式，有效值为return, success, object, callback\n* - `${param}` 代表参数或者返回值\n* - `${option}` 代表参数的可选值或者返回值的属性\n* - `${component}` 代表组件名字\n* - `${attribute}` 代表组件属性\n* - `${option}` 代表组件属性的可选值\n*\n* **示例代码**\n*\n* ```js\n// 对象的属性或方法\nwx.canIUse('console.log')\nwx.canIUse('CameraContext.onCameraFrame')\nwx.canIUse('CameraFrameListener.start')\nwx.canIUse('Image.src')\n\n// wx接口参数、回调或者返回值\nwx.canIUse('openBluetoothAdapter')\nwx.canIUse('getSystemInfoSync.return.safeArea.left')\nwx.canIUse('getSystemInfo.success.screenWidth')\nwx.canIUse('showToast.object.image')\nwx.canIUse('onCompassChange.callback.direction')\nwx.canIUse('request.object.method.GET')\n\n// 组件的属性\nwx.canIUse('live-player')\nwx.canIUse('text.selectable')\nwx.canIUse('button.open-type.contact')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkIsPictureInPictureActive": {
    "prefix": "wx.checkIsPictureInPictureActive",
    "body": [
      "wx.checkIsPictureInPictureActive()"
    ],
    "description": "/** [boolean wx.checkIsPictureInPictureActive()](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.checkIsPictureInPictureActive.html)\n         *\n         * 需要基础库： `2.29.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 返回当前是否存在小窗播放（小窗在 video/live-player/live-pusher 下可用） */",
    "detail": "function",
    "kind": 9
  },
  "wx.isVKSupport": {
    "prefix": "wx.isVKSupport",
    "body": [
      "wx.isVKSupport(${1:version})"
    ],
    "description": "/** [boolean wx.isVKSupport(string version)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.isVKSupport.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：需要基础库 `2.22.0`\n*\n* 判断支持版本\n*\n* **示例代码**\n*\n* ```js\nconst isSupportV2 = wx.isVKSupport('v2')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.arrayBufferToBase64": {
    "prefix": "wx.arrayBufferToBase64",
    "body": [
      "wx.arrayBufferToBase64(${1:arrayBuffer})"
    ],
    "description": "/** [string wx.arrayBufferToBase64(ArrayBuffer arrayBuffer)](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.arrayBufferToBase64.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：支持\n         * @deprecated 基础库版本 [2.4.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 将 ArrayBuffer 对象转成 Base64 字符串 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createBufferURL": {
    "prefix": "wx.createBufferURL",
    "body": [
      "wx.createBufferURL(${1:buffer})"
    ],
    "description": "/** [string wx.createBufferURL(ArrayBuffer|TypedArray buffer)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.createBufferURL.html)\n         *\n         * 需要基础库： `2.14.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 根据传入的 buffer 创建一个唯一的 URL 存在内存中 */",
    "detail": "function",
    "kind": 9
  },
  "wx.addCard": {
    "prefix": "wx.addCard",
    "body": [
      "wx.addCard({",
      "  cardList: [$1],",
      "})"
    ],
    "description": "/** [wx.addCard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.addCard.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 批量添加卡券。只有通过 [认证](https://developers.weixin.qq.com/miniprogram/product/renzheng.html) 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 [微信卡券接口文档](https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1490190158&version=1&lang=zh_CN&platform=2)。\n*\n* **cardExt 说明**\n*\n* cardExt 是卡券的扩展参数，其值是一个 JSON 字符串。\n*\n* **示例代码**\n*\n* ```js\nwx.addCard({\n  cardList: [\n    {\n      cardId: '',\n      cardExt: '{\"code\": \"\", \"openid\": \"\", \"timestamp\": \"\", \"signature\":\"\"}'\n    }, {\n      cardId: '',\n      cardExt: '{\"code\": \"\", \"openid\": \"\", \"timestamp\": \"\", \"signature\":\"\"}'\n    }\n  ],\n  success (res) {\n    console.log(res.cardList) // 卡券添加结果\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.addFileToFavorites": {
    "prefix": "wx.addFileToFavorites",
    "body": [
      "wx.addFileToFavorites({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.addFileToFavorites(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/favorites/wx.addFileToFavorites.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 收藏文件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.addPhoneCalendar": {
    "prefix": "wx.addPhoneCalendar",
    "body": [
      "wx.addPhoneCalendar({",
      "  startTime: ${1:0},",
      "  title: '${2:title}',",
      "})"
    ],
    "description": "/** [wx.addPhoneCalendar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/calendar/wx.addPhoneCalendar.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 向系统日历添加事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.addPhoneContact": {
    "prefix": "wx.addPhoneContact",
    "body": [
      "wx.addPhoneContact({",
      "  firstName: '${1:firstName}',",
      "})"
    ],
    "description": "/** [wx.addPhoneContact(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 添加手机通讯录联系人。用户可以选择将该表单以「新增联系人」或「添加到已有联系人」的方式，写入手机系统通讯录。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.addPhoneRepeatCalendar": {
    "prefix": "wx.addPhoneRepeatCalendar",
    "body": [
      "wx.addPhoneRepeatCalendar({",
      "  startTime: ${1:0},",
      "  title: '${2:title}',",
      "})"
    ],
    "description": "/** [wx.addPhoneRepeatCalendar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/calendar/wx.addPhoneRepeatCalendar.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 向系统日历添加重复事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.addVideoToFavorites": {
    "prefix": "wx.addVideoToFavorites",
    "body": [
      "wx.addVideoToFavorites({",
      "  videoPath: '${1:videoPath}',",
      "})"
    ],
    "description": "/** [wx.addVideoToFavorites(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/favorites/wx.addVideoToFavorites.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 收藏视频 */",
    "detail": "function",
    "kind": 9
  },
  "wx.authPrivateMessage": {
    "prefix": "wx.authPrivateMessage",
    "body": [
      "wx.authPrivateMessage({",
      "  shareTicket: '${1:shareTicket}',",
      "})"
    ],
    "description": "/** [wx.authPrivateMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.authPrivateMessage.html)\n*\n* 需要基础库： `2.13.0`\n*\n* 在插件中使用：不支持\n*\n* 验证私密消息。用法详情见 [小程序私密消息使用指南](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share/private-message.html)\n*\n* **示例代码**\n*\n* ```js\nwx.authPrivateMessage({\n  shareTicket: 'xxxxxx',\n  success(res) {\n    console.log('authPrivateMessage success', res)\n    // res\n    // {\n    //   errMsg: 'authPrivateMessage:ok'\n    //   valid: true\n    //   iv: 'xxxx',\n    //   encryptedData: 'xxxxxx'\n    // }\n  },\n  fail(res) {\n    console.log('authPrivateMessage fail', res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.authorize": {
    "prefix": "wx.authorize",
    "body": [
      "wx.authorize({",
      "  scope: '${1:scope}',",
      "})"
    ],
    "description": "/** [wx.authorize(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：不支持\n*\n* 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。更多用法详见 [用户授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)。\n* > 小程序插件可以使用 [wx.authorizeForMiniProgram](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorizeForMiniProgram.html)\n*\n* **示例代码**\n*\n* ```js\n// 可以通过 wx.getSetting 先查询一下用户是否授权了 \"scope.record\" 这个 scope\nwx.getSetting({\n  success(res) {\n    if (!res.authSetting['scope.record']) {\n      wx.authorize({\n        scope: 'scope.record',\n        success () {\n          // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问\n          wx.startRecord()\n        }\n      })\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.authorizeForMiniProgram": {
    "prefix": "wx.authorizeForMiniProgram",
    "body": [
      "wx.authorizeForMiniProgram({",
      "  scope: ${1:scope},",
      "})"
    ],
    "description": "/** [wx.authorizeForMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorizeForMiniProgram.html)\n*\n* 需要基础库： `2.14.4`\n*\n* 在插件中使用：需要基础库 `2.14.4`\n*\n* **仅小程序插件中能调用该接口**，用法同 [wx.authorize](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html)。目前仅支持三种 scope（见下）\n*\n* **示例代码**\n*\n* ```js\nwx.authorizeForMiniProgram({\n  scope: 'scope.record',\n  success () {\n    // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问\n    wx.startRecord()\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.batchGetStorage": {
    "prefix": "wx.batchGetStorage",
    "body": [
      "wx.batchGetStorage({",
      "  keyList: [$1],",
      "})"
    ],
    "description": "/** [wx.batchGetStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchGetStorage.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：不支持\n*\n* 从本地缓存中异步批量获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\nwx.batchGetStorage({\n  keyList: ['key'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.batchSetStorage": {
    "prefix": "wx.batchSetStorage",
    "body": [
      "wx.batchSetStorage({",
      "  kvList: [{",
      "    key: '$1',",
      "    value: '$2',",
      "  }],",
      "})"
    ],
    "description": "/** [wx.batchSetStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchSetStorage.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据批量存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\nwx.setStorage({\n  key:\"key\",\n  data:\"value\"\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.batchSetStorage({\n  kvList: [{\n    key: 'key',\n    value: 'value',\n  }],\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.batchSetStorageSync": {
    "prefix": "wx.batchSetStorageSync",
    "body": [
      "wx.batchSetStorageSync([$1])"
    ],
    "description": "/** [wx.batchSetStorageSync(Array.&lt;Object&gt; kvList)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.batchSetStorageSync.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据批量存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  wx.batchSetStorageSync([{key: 'key', value: 'value'}])\n} catch (e) { }\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.canvasGetImageData": {
    "prefix": "wx.canvasGetImageData",
    "body": [
      "wx.canvasGetImageData({",
      "  canvasId: '${1:canvasId}',",
      "  height: ${2:0},",
      "  width: ${3:0},",
      "  x: ${4:0},",
      "  y: ${5:0},",
      "}, ${7:component})"
    ],
    "description": "/** [wx.canvasGetImageData(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasGetImageData.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取 canvas 区域隐含的像素数据。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/yufmRjmZ7W8f)\n*\n* ```js\nwx.canvasGetImageData({\n  canvasId: 'myCanvas',\n  x: 0,\n  y: 0,\n  width: 100,\n  height: 100,\n  success(res) {\n    console.log(res.width) // 100\n    console.log(res.height) // 100\n    console.log(res.data instanceof Uint8ClampedArray) // true\n    console.log(res.data.length) // 100 * 100 * 4\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.canvasPutImageData": {
    "prefix": "wx.canvasPutImageData",
    "body": [
      "wx.canvasPutImageData({",
      "  canvasId: '${1:canvasId}',",
      "  data: ${2:data},",
      "  height: ${3:0},",
      "  width: ${4:0},",
      "  x: ${5:0},",
      "  y: ${6:0},",
      "}, ${8:component})"
    ],
    "description": "/** [wx.canvasPutImageData(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 将像素数据绘制到画布。在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 <canvas> 组件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.canvasToTempFilePath": {
    "prefix": "wx.canvasToTempFilePath",
    "body": [
      "wx.canvasToTempFilePath({$1}, ${2:component})"
    ],
    "description": "/** [wx.canvasToTempFilePath(Object object, Object this)](https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 把当前画布指定区域的内容导出生成指定大小的图片。在 `draw()` 回调里调用该方法才能保证图片导出成功。暂不支持离屏 canvas。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkIsAddedToMyMiniProgram": {
    "prefix": "wx.checkIsAddedToMyMiniProgram",
    "body": [
      "wx.checkIsAddedToMyMiniProgram()"
    ],
    "description": "/** [wx.checkIsAddedToMyMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/my-miniprogram/wx.checkIsAddedToMyMiniProgram.html)\n         *\n         * 需要基础库： `2.29.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 检查小程序是否被添加至 「我的小程序」 */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkIsOpenAccessibility": {
    "prefix": "wx.checkIsOpenAccessibility",
    "body": [
      "wx.checkIsOpenAccessibility()"
    ],
    "description": "/** [wx.checkIsOpenAccessibility(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accessibility/wx.checkIsOpenAccessibility.html)\n         *\n         * 需要基础库： `2.13.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 检测是否开启视觉无障碍功能。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkIsSoterEnrolledInDevice": {
    "prefix": "wx.checkIsSoterEnrolledInDevice",
    "body": [
      "wx.checkIsSoterEnrolledInDevice({",
      "  checkAuthMode: ${1:checkAuthMode},",
      "})"
    ],
    "description": "/** [wx.checkIsSoterEnrolledInDevice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSoterEnrolledInDevice.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：不支持\n*\n* 获取设备内是否录入如指纹等生物信息的接口\n*\n* **示例代码**\n*\n* ```js\nwx.checkIsSoterEnrolledInDevice({\n  checkAuthMode: 'fingerPrint',\n  success(res) {\n    console.log(res.isEnrolled)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkIsSupportSoterAuthentication": {
    "prefix": "wx.checkIsSupportSoterAuthentication",
    "body": [
      "wx.checkIsSupportSoterAuthentication()"
    ],
    "description": "/** [wx.checkIsSupportSoterAuthentication(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSupportSoterAuthentication.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：不支持\n*\n* 获取本机支持的 SOTER 生物认证方式\n*\n* **示例代码**\n*\n* ```js\nwx.checkIsSupportSoterAuthentication({\n  success(res) {\n    // res.supportMode = [] 不具备任何被SOTER支持的生物识别方式\n    // res.supportMode = ['fingerPrint'] 只支持指纹识别\n    // res.supportMode = ['fingerPrint', 'facial'] 支持指纹识别和人脸识别\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.checkSession": {
    "prefix": "wx.checkSession",
    "body": [
      "wx.checkSession()"
    ],
    "description": "/** [wx.checkSession(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html)\n*\n* 在插件中使用：不支持\n*\n* 检查登录态是否过期。\n* 通过 wx.login 接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用 wx.checkSession 接口检测当前用户登录态是否有效。\n*\n* 登录态过期后开发者可以再调用 wx.login 获取新的用户登录态。调用成功说明当前 session_key 未过期，调用失败说明 session_key 已过期。\n*\n* **示例代码**\n*\n* ```js\nwx.checkSession({\n  success () {\n    //session_key 未过期，并且在本生命周期一直有效\n  },\n  fail () {\n    // session_key 已经失效，需要重新执行登录流程\n    wx.login() //重新登录\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseAddress": {
    "prefix": "wx.chooseAddress",
    "body": [
      "wx.chooseAddress()"
    ],
    "description": "/** [wx.chooseAddress(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.16.1`\n*\n* 获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。\n* ## 使用方法\n* 自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n* ## 申请开通\n* 暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n* 接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/024hHnmd772y)\n* ```js\nwx.chooseAddress({\n  success (res) {\n    console.log(res.userName)\n    console.log(res.postalCode)\n    console.log(res.provinceName)\n    console.log(res.cityName)\n    console.log(res.countyName)\n    console.log(res.detailInfo)\n    console.log(res.nationalCode)\n    console.log(res.telNumber)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseContact": {
    "prefix": "wx.chooseContact",
    "body": [
      "wx.chooseContact()"
    ],
    "description": "/** [wx.chooseContact(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.chooseContact.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉起手机通讯录，选择联系人。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseImage": {
    "prefix": "wx.chooseImage",
    "body": [
      "wx.chooseImage()"
    ],
    "description": "/** [wx.chooseImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [2.21.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.chooseMedia](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html) 替换\n*\n* 从本地相册选择图片或使用相机拍照。\n*\n* ****\n*\n* ```js\nwx.chooseImage({\n  count: 1,\n  sizeType: ['original', 'compressed'],\n  sourceType: ['album', 'camera'],\n  success (res) {\n    // tempFilePath可以作为img标签的src属性显示图片\n    const tempFilePaths = res.tempFilePaths\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseInvoice": {
    "prefix": "wx.chooseInvoice",
    "body": [
      "wx.chooseInvoice()"
    ],
    "description": "/** [wx.chooseInvoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.16.1`\n         *\n         * 选择用户已有的发票。\n         *\n         * **通过 cardId 和 encryptCode 获得报销发票的信息**\n         *\n         * 请参考[微信电子发票文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=21517918939oae3U)中，「查询报销发票信息」部分。\n         * 其中 `access_token` 的获取请参考[auth.getAccessToken](#)文档 */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseInvoiceTitle": {
    "prefix": "wx.chooseInvoiceTitle",
    "body": [
      "wx.chooseInvoiceTitle()"
    ],
    "description": "/** [wx.chooseInvoiceTitle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.16.1`\n*\n* 选择用户的发票抬头。当前小程序必须关联一个公众号，且这个公众号是完成了[微信认证](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1496554031_RD4xe)的，才能调用 chooseInvoiceTitle。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/GJ4S9nmQ7x2E)\n*\n* ```js\nwx.chooseInvoiceTitle({\n  success(res) {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseLicensePlate": {
    "prefix": "wx.chooseLicensePlate",
    "body": [
      "wx.chooseLicensePlate()"
    ],
    "description": "/** [wx.chooseLicensePlate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/license-plate/wx.chooseLicensePlate.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 选择车牌号 */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseLocation": {
    "prefix": "wx.chooseLocation",
    "body": [
      "wx.chooseLocation()"
    ],
    "description": "/** [wx.chooseLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * @warning **为确保选择地理位置接口的合理使用，位置接口调整参考 [选择地理位置接口调整公告](https://developers.weixin.qq.com/community/develop/doc/0006e45df2cac030e6edf367c56001)**\n         *\n         * 打开地图选择位置。\n         *  ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *  ## 申请开通\n         *  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n         *  接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         * **示例**\n         *\n         * ![](https://res.wx.qq.com/op_res/WDFC8aB4FI8rJ9oEmbYfbH_Fl3EIv91471YVxezVfLRESkUuCgfODZcbOoyteKU4j-OLZa2EFKY9BDPd3g-tfg#width:260px) */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseMedia": {
    "prefix": "wx.chooseMedia",
    "body": [
      "wx.chooseMedia()"
    ],
    "description": "/** [wx.chooseMedia(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html)\n*\n* 需要基础库： `2.10.0`\n*\n* 在插件中使用：需要基础库 `2.11.1`\n*\n* 拍摄或从手机相册中选择图片或视频。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseMedia({\n  count: 9,\n  mediaType: ['image','video'],\n  sourceType: ['album', 'camera'],\n  maxDuration: 30,\n  camera: 'back',\n  success(res) {\n    console.log(res.tempFiles.tempFilePath)\n    console.log(res.tempFiles.size)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseMessageFile": {
    "prefix": "wx.chooseMessageFile",
    "body": [
      "wx.chooseMessageFile({",
      "  count: ${1:0},",
      "})"
    ],
    "description": "/** [wx.chooseMessageFile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html)\n*\n* 需要基础库： `2.5.0`\n*\n* 在插件中使用：不支持\n*\n* 从客户端会话选择文件。\n*\n* ****\n*\n* ```js\nwx.chooseMessageFile({\n  count: 10,\n  type: 'image',\n  success (res) {\n    // tempFilePath可以作为img标签的src属性显示图片\n    const tempFilePaths = res.tempFiles\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.choosePoi": {
    "prefix": "wx.choosePoi",
    "body": [
      "wx.choosePoi()"
    ],
    "description": "/** [wx.choosePoi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.choosePoi.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **为确保选择地理位置接口的合理使用，位置接口调整参考 [选择地理位置接口调整公告](https://developers.weixin.qq.com/community/develop/doc/0006e45df2cac030e6edf367c56001)**\n         *\n         * 打开POI列表选择位置，支持模糊定位（精确到市）和精确定位混选。\n         *  ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *  ## 申请开通\n         *  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n         *  接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         * **示例**\n         *\n         * ![](https://res.wx.qq.com/op_res/lzDsNyBNifLczyLX0ms7ZpPQysgAgdhrQTGzzTQPiXkAB2HJIf1Slvl4rnN9I1q0AT3xqoGTg98jMsNexDLbbA#width:260px) */",
    "detail": "function",
    "kind": 9
  },
  "wx.chooseVideo": {
    "prefix": "wx.chooseVideo",
    "body": [
      "wx.chooseVideo()"
    ],
    "description": "/** [wx.chooseVideo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [2.21.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.chooseMedia](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html) 替换\n*\n* 拍摄视频或从手机相册中选视频。\n*\n* **示例代码**\n*\n* ```js\nwx.chooseVideo({\n  sourceType: ['album','camera'],\n  maxDuration: 60,\n  camera: 'back',\n  success(res) {\n    console.log(res.tempFilePath)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.clearStorage": {
    "prefix": "wx.clearStorage",
    "body": [
      "wx.clearStorage()"
    ],
    "description": "/** [wx.clearStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html)\n*\n* 在插件中使用：不支持\n*\n* 清理本地数据缓存。\n*\n* **示例代码**\n*\n* ```js\nwx.clearStorage()\n```\n*\n* ```js\ntry {\n  wx.clearStorageSync()\n} catch(e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.clearStorageSync": {
    "prefix": "wx.clearStorageSync",
    "body": [
      "wx.clearStorageSync()"
    ],
    "description": "/** [wx.clearStorageSync()](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorageSync.html)\n*\n* 在插件中使用：不支持\n*\n* [wx.clearStorage](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.clearStorage()\n```\n*\n* ```js\ntry {\n  wx.clearStorageSync()\n} catch(e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.closeBLEConnection": {
    "prefix": "wx.closeBLEConnection",
    "body": [
      "wx.closeBLEConnection({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.closeBLEConnection(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 断开与蓝牙低功耗设备的连接。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.closeBLEConnection({\n  deviceId,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.closeBluetoothAdapter": {
    "prefix": "wx.closeBluetoothAdapter",
    "body": [
      "wx.closeBluetoothAdapter()"
    ],
    "description": "/** [wx.closeBluetoothAdapter(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 成对调用。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.closeBluetoothAdapter({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.closeSocket": {
    "prefix": "wx.closeSocket",
    "body": [
      "wx.closeSocket()"
    ],
    "description": "/** [wx.closeSocket(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.closeSocket.html)\n*\n* 在插件中使用：不支持\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 关闭 WebSocket 连接。\n*\n* **示例代码**\n*\n* ```js\nwx.connectSocket({\n  url: 'test.php'\n})\n\n//注意这里有时序问题，\n//如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。\n//必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。\nwx.onSocketOpen(function() {\n  wx.closeSocket()\n})\n\nwx.onSocketClose(function(res) {\n  console.log('WebSocket 已关闭！')\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.compressImage": {
    "prefix": "wx.compressImage",
    "body": [
      "wx.compressImage({",
      "  src: '${1:src}',",
      "})"
    ],
    "description": "/** [wx.compressImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.12.0`\n*\n* 压缩图片接口，可选压缩质量\n*\n* **示例代码**\n*\n* ```js\nwx.compressImage({\n  src: '', // 图片路径\n  quality: 80 // 压缩质量\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.compressVideo": {
    "prefix": "wx.compressVideo",
    "body": [
      "wx.compressVideo({",
      "  bitrate: ${1:0},",
      "  fps: ${2:0},",
      "  quality: ${3:quality},",
      "  resolution: ${4:0},",
      "  src: '${5:src}',",
      "})"
    ],
    "description": "/** [wx.compressVideo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.compressVideo.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.1`\n         *\n         * 压缩视频接口。开发者可指定压缩质量 `quality` 进行压缩。当需要更精细的控制时，可指定 `bitrate`、`fps`、和 `resolution`，当 `quality` 传入时，这三个参数将被忽略。原视频的相关信息可通过 [getVideoInfo](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.getVideoInfo.html) 获取。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.connectWifi": {
    "prefix": "wx.connectWifi",
    "body": [
      "wx.connectWifi({",
      "  SSID: '${1:SSID}',",
      "  password: '${2:password}',",
      "})"
    ],
    "description": "/** [wx.connectWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.connectWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。\n*\n* **示例代码**\n*\n* ```js\nwx.connectWifi({\n  SSID: '',\n  password: '',\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 微信客户端 7.0.22 以上版本，connectWifi 的实现在 Android 10 及以上的手机无法生效，对于 Android 10 及以上版本，设备连接 wifi 之后，（受系统能力限制）其他进程无法使用当前连接的 wifi ；即连接上的 wifi 只对当前小程序有效，如果想要对整个系统生效，需要配置 maunal 来连接 wifi。\n* - iOS 系统底层没有给开发者提供因 wifi 密码错误而连接失败的事件，但用户可以收到密码错误的系统弹窗。建议开发者通过 onWifiConnected 事件来判断 wifi 是否连接成功；即设置定时器，若超时后仍没有 onWifiConnected 事件，则认定此次 wifi 连接无效。\n* - Android / iOS 在系统已经连上目标 wifi 的情况下，小程序再次连接目标 wifi，此时无论输入的密码是否正确，系统都会默认此次连接成功，且没有 onWifiConnected 事件。\n* - onWifiConnected 事件可能会返回空对象，此时代表 wifi 断开连接，开发者可忽略这种情况。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.createBLEConnection": {
    "prefix": "wx.createBLEConnection",
    "body": [
      "wx.createBLEConnection({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.createBLEConnection(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 连接蓝牙低功耗设备。\n*\n* 若小程序在之前已有搜索过某个蓝牙设备，并成功建立连接，可直接传入之前搜索获取的 deviceId 直接尝试连接该设备，无需再次进行搜索操作。\n*\n* **注意**\n*\n* - 请保证尽量成对的调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 和 [wx.closeBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html) 接口。安卓如果重复调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 创建连接，有可能导致系统持有同一设备多个连接的实例，导致调用 `closeBLEConnection` 的时候并不能真正的断开与设备的连接。\n* - 蓝牙连接随时可能断开，建议监听 [wx.onBLEConnectionStateChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html) 回调事件，当蓝牙设备断开时按需执行重连操作\n* - 若对未连接的设备或已断开连接的设备调用数据读写操作的接口，会返回 10006 错误，建议进行重连操作。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.createBLEConnection({\n  deviceId,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.createBLEPeripheralServer": {
    "prefix": "wx.createBLEPeripheralServer",
    "body": [
      "wx.createBLEPeripheralServer()"
    ],
    "description": "/** [wx.createBLEPeripheralServer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.createBLEPeripheralServer.html)\n         *\n         * 需要基础库： `2.10.3`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 建立本地作为蓝牙低功耗外围设备的服务端，可创建多个。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.cropImage": {
    "prefix": "wx.cropImage",
    "body": [
      "wx.cropImage({",
      "  cropScale: ${1:cropScale},",
      "  src: '${2:src}',",
      "})"
    ],
    "description": "/** [wx.cropImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.cropImage.html)\n*\n* 需要基础库： `2.26.0`\n*\n* 在插件中使用：不支持\n*\n* 裁剪图片接口\n*\n* **示例代码**\n*\n* ```js\nwx.cropImage({\n  src: '', // 图片路径\n  cropScale: '16:9', // 裁剪比例\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.disableAlertBeforeUnload": {
    "prefix": "wx.disableAlertBeforeUnload",
    "body": [
      "wx.disableAlertBeforeUnload()"
    ],
    "description": "/** [wx.disableAlertBeforeUnload(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.disableAlertBeforeUnload.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 关闭小程序页面返回询问对话框。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.editImage": {
    "prefix": "wx.editImage",
    "body": [
      "wx.editImage({",
      "  src: '${1:src}',",
      "})"
    ],
    "description": "/** [wx.editImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.editImage.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：不支持\n*\n* 编辑图片接口\n*\n* **示例代码**\n*\n* ```js\nwx.editImage({\n  src: '', // 图片路径\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.enableAlertBeforeUnload": {
    "prefix": "wx.enableAlertBeforeUnload",
    "body": [
      "wx.enableAlertBeforeUnload({",
      "  message: '${1:message}',",
      "})"
    ],
    "description": "/** [wx.enableAlertBeforeUnload(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.enableAlertBeforeUnload.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启小程序页面返回询问对话框。\n         *\n         * ## 弹窗条件\n         * * 当用户在小程序内非首页页面/最底层页\n         * * 官方导航栏上的的返回\n         * * 全屏模式下自绘返回键\n         * * android 系统 back 键时\n         *\n         * ## 注意事项\n         * * 手势滑动返回时不做拦截\n         * * 在任何场景下，此功能都不应拦住用户退出小程序的行为\n         *\n         * **示例代码**\n         *\n         * [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/MTPm9Cmh7VfT) */",
    "detail": "function",
    "kind": 9
  },
  "wx.exitMiniProgram": {
    "prefix": "wx.exitMiniProgram",
    "body": [
      "wx.exitMiniProgram()"
    ],
    "description": "/** [wx.exitMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.exitMiniProgram.html)\n         *\n         * 需要基础库： `2.17.3`\n         *\n         * 在插件中使用：需要基础库 `2.30.1`\n         *\n         * 退出当前小程序。必须有点击行为才能调用成功。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.exitVoIPChat": {
    "prefix": "wx.exitVoIPChat",
    "body": [
      "wx.exitVoIPChat()"
    ],
    "description": "/** [wx.exitVoIPChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.exitVoIPChat.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 退出（销毁）实时语音通话 */",
    "detail": "function",
    "kind": 9
  },
  "wx.faceDetect": {
    "prefix": "wx.faceDetect",
    "body": [
      "wx.faceDetect({",
      "  frameBuffer: ${1:frameBuffer},",
      "  height: ${2:0},",
      "  width: ${3:0},",
      "})"
    ],
    "description": "/** [wx.faceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.faceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 人脸检测，使用前需要通过 wx.initFaceDetect 进行一次初始化，推荐使用相机接口返回的帧数据。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html)\n         *\n         * ****\n         *\n         * ### 特别说明\n         * 若小程序人脸识别功能涉及采集、存储用户生物特征（如人脸照片或视频、身份证和手持身份证、身份证照和免冠照等），此类型服务需使用[微信原生人脸识别接口](https://developers.weixin.qq.com/community/develop/doc/000442d352c1202bd498ecb105c00d?highline=%E4%BA%BA%E8%84%B8%E6%A0%B8%E8%BA%AB)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getAvailableAudioSources": {
    "prefix": "wx.getAvailableAudioSources",
    "body": [
      "wx.getAvailableAudioSources()"
    ],
    "description": "/** [wx.getAvailableAudioSources(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.getAvailableAudioSources.html)\n         *\n         * 需要基础库： `2.1.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 获取当前支持的音频输入源 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBLEDeviceCharacteristics": {
    "prefix": "wx.getBLEDeviceCharacteristics",
    "body": [
      "wx.getBLEDeviceCharacteristics({",
      "  deviceId: '${1:deviceId}',",
      "  serviceId: '${2:serviceId}',",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceCharacteristics(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceCharacteristics.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取蓝牙低功耗设备某个服务中所有特征 (characteristic)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEDeviceCharacteristics({\n  // 这里的 deviceId 需要已经通过 wx.createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 wx.getBLEDeviceServices 接口中获取\n  serviceId,\n  success (res) {\n    console.log('device getBLEDeviceCharacteristics:', res.characteristics)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBLEDeviceRSSI": {
    "prefix": "wx.getBLEDeviceRSSI",
    "body": [
      "wx.getBLEDeviceRSSI({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceRSSI(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceRSSI.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 获取蓝牙低功耗设备的信号强度 (Received Signal Strength Indication, RSSI)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBLEDeviceServices": {
    "prefix": "wx.getBLEDeviceServices",
    "body": [
      "wx.getBLEDeviceServices({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.getBLEDeviceServices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceServices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取蓝牙低功耗设备所有服务 (service)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEDeviceServices({\n  // 这里的 deviceId 需要已经通过 wx.createBLEConnection 与对应设备建立连接\n  deviceId,\n  success (res) {\n    console.log('device services:', res.services)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBLEMTU": {
    "prefix": "wx.getBLEMTU",
    "body": [
      "wx.getBLEMTU({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.getBLEMTU(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEMTU.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 获取蓝牙低功耗的最大传输单元。需在 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 调用成功后调用。\n*\n* **注意**\n*\n* - 小程序中 MTU 为 ATT_MTU，包含 Op-Code 和 Attribute Handle 的长度，实际可以传输的数据长度为 `ATT_MTU - 3`\n* - iOS 系统中 MTU 为固定值；安卓系统中，MTU 会在系统协商成功之后发生改变，建议使用 [wx.onBLEMTUChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEMTUChange.html) 监听。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBLEMTU({\n  deviceId: '',\n  writeType: 'write',\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBackgroundAudioPlayerState": {
    "prefix": "wx.getBackgroundAudioPlayerState",
    "body": [
      "wx.getBackgroundAudioPlayerState()"
    ],
    "description": "/** [wx.getBackgroundAudioPlayerState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioPlayerState.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 获取后台音乐播放状态。\n*\n* **示例代码**\n*\n* ```js\nwx.getBackgroundAudioPlayerState({\n  success (res) {\n    const status = res.status\n    const dataUrl = res.dataUrl\n    const currentPosition = res.currentPosition\n    const duration = res.duration\n    const downloadPercent = res.downloadPercent\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBackgroundFetchData": {
    "prefix": "wx.getBackgroundFetchData",
    "body": [
      "wx.getBackgroundFetchData({",
      "  fetchType: '${1:fetchType}',",
      "})"
    ],
    "description": "/** [wx.getBackgroundFetchData(object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchData.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉取 backgroundFetch 客户端缓存数据。\n         * 当调用接口时，若当次请求未结束，会先返回本地的旧数据（之前打开小程序时请求的），如果本地没有旧数据会返回失败，而不会等待请求完成。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBackgroundFetchToken": {
    "prefix": "wx.getBackgroundFetchToken",
    "body": [
      "wx.getBackgroundFetchToken()"
    ],
    "description": "/** [wx.getBackgroundFetchToken(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchToken.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取设置过的自定义登录态。若无，则返回 fail。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBatteryInfo": {
    "prefix": "wx.getBatteryInfo",
    "body": [
      "wx.getBatteryInfo()"
    ],
    "description": "/** [wx.getBatteryInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 获取设备电量。同步 API [wx.getBatteryInfoSync](https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html) 在 iOS 上不可用。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBeacons": {
    "prefix": "wx.getBeacons",
    "body": [
      "wx.getBeacons()"
    ],
    "description": "/** [wx.getBeacons(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.getBeacons.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取所有已搜索到的 Beacon 设备 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBluetoothAdapterState": {
    "prefix": "wx.getBluetoothAdapterState",
    "body": [
      "wx.getBluetoothAdapterState()"
    ],
    "description": "/** [wx.getBluetoothAdapterState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothAdapterState.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取本机蓝牙适配器状态。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getBluetoothAdapterState({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getBluetoothDevices": {
    "prefix": "wx.getBluetoothDevices",
    "body": [
      "wx.getBluetoothDevices()"
    ],
    "description": "/** [wx.getBluetoothDevices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取在蓝牙模块生效期间所有搜索到的蓝牙设备。包括已经和本机处于连接状态的设备。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进度字符串示例\nfunction ab2hex(buffer) {\n  var hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.getBluetoothDevices({\n  success: function (res) {\n    console.log(res)\n    if (res.devices[0]) {\n      console.log(ab2hex(res.devices[0].advertisData))\n    }\n  }\n})\n```\n*\n* **注意**\n*\n* - 该接口获取到的设备列表为**蓝牙模块生效期间所有搜索到的蓝牙设备**，若在蓝牙模块使用流程结束后未及时调用 [wx.closeBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html) 释放资源，会存在调用该接口会返回之前的蓝牙使用流程中搜索到的蓝牙设备，可能设备已经不在用户身边，无法连接。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getChannelsLiveInfo": {
    "prefix": "wx.getChannelsLiveInfo",
    "body": [
      "wx.getChannelsLiveInfo({",
      "  finderUserName: '${1:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.getChannelsLiveInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsLiveInfo.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播信息 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getChannelsLiveNoticeInfo": {
    "prefix": "wx.getChannelsLiveNoticeInfo",
    "body": [
      "wx.getChannelsLiveNoticeInfo({",
      "  finderUserName: '${1:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.getChannelsLiveNoticeInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsLiveNoticeInfo.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播预告信息 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getChannelsShareKey": {
    "prefix": "wx.getChannelsShareKey",
    "body": [
      "wx.getChannelsShareKey()"
    ],
    "description": "/** [wx.getChannelsShareKey(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.getChannelsShareKey.html)\n         *\n         * 需要基础库： `2.22.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 获取视频号直播卡片/视频卡片的分享来源，仅当卡片携带了分享信息、同时用户已授权该小程序获取视频号分享信息且启动场景值为 1177、1184、1195、1208 时可用。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getClipboardData": {
    "prefix": "wx.getClipboardData",
    "body": [
      "wx.getClipboardData()"
    ],
    "description": "/** [wx.getClipboardData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取系统剪贴板的内容\n*\n* **示例代码**\n*\n* ```js\nwx.getClipboardData({\n  success (res){\n    console.log(res.data)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getConnectedBluetoothDevices": {
    "prefix": "wx.getConnectedBluetoothDevices",
    "body": [
      "wx.getConnectedBluetoothDevices({",
      "  services: [$1],",
      "})"
    ],
    "description": "/** [wx.getConnectedBluetoothDevices(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getConnectedBluetoothDevices.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 根据主服务 UUID 获取已连接的蓝牙设备。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.getConnectedBluetoothDevices({\n  services: ['FEE7'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getConnectedWifi": {
    "prefix": "wx.getConnectedWifi",
    "body": [
      "wx.getConnectedWifi()"
    ],
    "description": "/** [wx.getConnectedWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getConnectedWifi.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 获取已连接中的 Wi-Fi 信息。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getDeviceVoIPList": {
    "prefix": "wx.getDeviceVoIPList",
    "body": [
      "wx.getDeviceVoIPList()"
    ],
    "description": "/** [wx.getDeviceVoIPList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/device-voip/wx.getDeviceVoIPList.html)\n*\n* 需要基础库： `2.30.3`\n*\n* 在插件中使用：不支持\n*\n* 查询当前用户授权的音视频通话设备（组）信息\n*\n* **示例代码**\n*\n* ```js\nwx.getDeviceVoIPList({\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getExtConfig": {
    "prefix": "wx.getExtConfig",
    "body": [
      "wx.getExtConfig()"
    ],
    "description": "/** [wx.getExtConfig(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 获取[第三方平台](https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html)自定义的数据字段。\n*\n* **Tips**\n*\n* 1. 本接口暂时无法通过 [wx.canIUse](https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html) 判断是否兼容，开发者需要自行判断 [wx.getExtConfig](https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html) 是否存在来兼容\n*\n* ****\n*\n* ```js\nif (wx.getExtConfig) {\n  wx.getExtConfig({\n    success (res) {\n      console.log(res.extConfig)\n    }\n  })\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getFuzzyLocation": {
    "prefix": "wx.getFuzzyLocation",
    "body": [
      "wx.getFuzzyLocation()"
    ],
    "description": "/** [wx.getFuzzyLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getFuzzyLocation.html)\n*\n* 需要基础库： `2.25.0`\n*\n* 在插件中使用：支持\n*\n* 获取当前的模糊地理位置。\n*  ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*  ## 申请开通\n*  暂只针对具备与地理位置强相关的使用场景的小程序开放，在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。 从2022年7月14日开始在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n* **示例代码**\n*\n*  ```js\n wx.getFuzzyLocation({\n  type: 'wgs84',\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n  }\n})\n ``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getGroupEnterInfo": {
    "prefix": "wx.getGroupEnterInfo",
    "body": [
      "wx.getGroupEnterInfo()"
    ],
    "description": "/** [wx.getGroupEnterInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/group/wx.getGroupEnterInfo.html)\n*\n* 需要基础库： `2.10.4`\n*\n* 在插件中使用：不支持\n*\n* 获取微信群聊场景下的小程序启动信息。群聊场景包括群聊小程序消息卡片、群待办、群工具。可用于获取当前群的 opengid。\n* ## 注意事项\n*  - 基础库 v2.10.4 开始支持获取群工具小程序启动信息\n*  - 基础库 v2.17.3 开始支持获取群聊小程序消息卡片、群待办小程序启动信息\n*\n* **示例代码**\n*\n* ```js\nwx.getGroupEnterInfo({\n  success(res) {\n    // res\n    {\n      errMsg: 'getGroupEnterInfo:ok',\n      encryptedData: '',\n      iv: ''\n    }\n  },\n  fail() {\n\n  }\n})\n```\n*\n* 敏感数据有两种获取方式，一是使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构（其中 opengid 为当前群的唯一标识）：\n*\n* ```json\n{\n \"opengid\": \"OPENGID\"\n}\n```\n*\n* **Tips**\n*\n* - 如需要展示群名称，小程序可以使用[开放数据组件](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n* - 小游戏可以通过 `wx.getGroupInfo` 接口获取群名称 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getHCEState": {
    "prefix": "wx.getHCEState",
    "body": [
      "wx.getHCEState()"
    ],
    "description": "/** [wx.getHCEState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.getHCEState.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 判断当前设备是否支持 HCE 能力。\n*\n* **示例代码**\n*\n* ```js\nwx.getHCEState({\n  success (res) {\n    console.log(res.errCode)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getImageInfo": {
    "prefix": "wx.getImageInfo",
    "body": [
      "wx.getImageInfo({",
      "  src: '${1:src}',",
      "})"
    ],
    "description": "/** [wx.getImageInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取图片信息。网络图片需先配置download域名才能生效。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/Kd47Sbmr6yYu)\n*\n* ```js\nwx.getImageInfo({\n  src: 'images/a.jpg',\n  success (res) {\n    console.log(res.width)\n    console.log(res.height)\n  }\n})\n\nwx.chooseImage({\n  success (res) {\n    wx.getImageInfo({\n      src: res.tempFilePaths[0],\n      success (res) {\n        console.log(res.width)\n        console.log(res.height)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getInferenceEnvInfo": {
    "prefix": "wx.getInferenceEnvInfo",
    "body": [
      "wx.getInferenceEnvInfo()"
    ],
    "description": "/** [wx.getInferenceEnvInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/inference/wx.getInferenceEnvInfo.html)\n*\n* 需要基础库： `2.30.1`\n*\n* 在插件中使用：需要基础库 `2.30.1`\n*\n* 获取通用AI推理引擎版本。使用前可参考[AI指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/inference/tutorial.html)\n*\n* **示例代码**\n*\n* ```js\n// 获取通用AI推理引擎版本\nwx.getInferenceEnvInfo({\n      complete: (res) => {\n        console.log(res.ver)\n        console.log(res.errMsg)\n      },\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getLocalIPAddress": {
    "prefix": "wx.getLocalIPAddress",
    "body": [
      "wx.getLocalIPAddress()"
    ],
    "description": "/** [wx.getLocalIPAddress(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getLocalIPAddress.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 获取局域网IP地址\n*\n* **示例代码**\n*\n* ```js\nwx.getLocalIPAddress({\n  success (res) {\n    const localip = res.localip\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getLocation": {
    "prefix": "wx.getLocation",
    "body": [
      "wx.getLocation()"
    ],
    "description": "/** [wx.getLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用。开启高精度定位，接口耗时会增加，可指定 highAccuracyExpireTime 作为超时时间。地图相关使用的坐标格式应为 gcj02。\n*  高频率调用会导致耗电，如有需要可使用持续定位接口 `wx.onLocationChange`。\n*  基础库 `2.17.0` 版本起 `wx.getLocation` 增加调用频率限制，[相关公告](https://developers.weixin.qq.com/community/develop/doc/000aee91a98d206bc6dbe722b51801)。\n*\n*   ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*\n*   ## 申请开通\n*   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n*   接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n*   ### 国内主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 电商平台 |\t/\t| 售卖商品线下发货、线下收货服务 |\n*   | 商家自营 |\t/\t| 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n*   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n*   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n*   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n*   | 餐饮服务 | \t点餐平台、外卖平台、餐饮服务场所/餐饮服务管理企业\t| 线下送餐服务 |\n*   | 工具\t| 天气、信息查询、办公、设备管理 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询、智能穿戴、智能门禁、与地理位置相关的打卡服务等 |\n*   | 金融  | 银行、非金融机构自营小额贷款/融资担保/商业保理、保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n*   | 旅游  | 景区服务、住宿服务 | 提供景区导航、导览服务、酒店导航服务 |\n*   | 汽车服务 | 维修保养、汽车用品、汽车经销商/4S店、汽车厂商、汽车预售、二手车 | 提供汽车售卖、维保洗美服务、查找附近的维修点/洗车网点等导航服务 |\n*   | IT科技 | 基础电信运营商、电信业务代理商 | 提供运营商线下网点的预约、基于地理位置取号并现场报到、网点导航等服务 |\n*   | 房地产服务 | 物业管理、房屋中介、房屋装修 | 提供房地产开发商及物业公司门店导览导航服务 |\n*   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n*   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n*\n*   ### 海外主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n*   | 餐饮\t | /\t | 线下送餐服务 |\n*   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n*   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货、超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n*\n* **示例代码**\n*\n*  ```js\n wx.getLocation({\n  type: 'wgs84',\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n    const speed = res.speed\n    const accuracy = res.accuracy\n  }\n})\n ```\n*\n* **注意**\n*\n* - `2.17.0 起 `wx.getLocation` 增加调用频率限制，[相关公告](https://developers.weixin.qq.com/community/develop/doc/000aee91a98d206bc6dbe722b51801)\n* - 工具中定位模拟使用IP定位，可能会有一定误差。且工具目前仅支持 gcj02 坐标。\n* - 使用第三方服务进行逆地址解析时，请确认第三方服务默认的坐标系，正确进行坐标转换。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getNetworkType": {
    "prefix": "wx.getNetworkType",
    "body": [
      "wx.getNetworkType()"
    ],
    "description": "/** [wx.getNetworkType(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取网络类型\n*\n* **示例代码**\n*\n* ```js\nwx.getNetworkType({\n  success (res) {\n    const networkType = res.networkType\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getRandomValues": {
    "prefix": "wx.getRandomValues",
    "body": [
      "wx.getRandomValues({",
      "  length: ${1:0},",
      "})"
    ],
    "description": "/** [wx.getRandomValues(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/crypto/wx.getRandomValues.html)\n*\n* 需要基础库： `2.15.0`\n*\n* 在插件中使用：不支持\n*\n* 获取密码学安全随机数\n*\n* **示例代码**\n*\n* ```js\nwx.getRandomValues({\n  length: 6 // 生成 6 个字节长度的随机数,\n  success: res => {\n    console.log(wx.arrayBufferToBase64(res.randomValues)) // 转换为 base64 字符串后打印\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getScreenBrightness": {
    "prefix": "wx.getScreenBrightness",
    "body": [
      "wx.getScreenBrightness()"
    ],
    "description": "/** [wx.getScreenBrightness(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenBrightness.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 获取屏幕亮度\n         *\n         * **说明**\n         *\n         * - 若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getScreenRecordingState": {
    "prefix": "wx.getScreenRecordingState",
    "body": [
      "wx.getScreenRecordingState()"
    ],
    "description": "/** [wx.getScreenRecordingState(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenRecordingState.html)\n         *\n         * 需要基础库： `2.24.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 查询用户是否在录屏。\n         *\n         * **示例代码**\n         *\n         * ```js\n         * wx.getScreenRecordingState({\n         *   success: function (res) {\n         *     console.log(res.state)\n         *   },\n         * }) */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSelectedTextRange": {
    "prefix": "wx.getSelectedTextRange",
    "body": [
      "wx.getSelectedTextRange()"
    ],
    "description": "/** [wx.getSelectedTextRange(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.getSelectedTextRange.html)\n*\n* 需要基础库： `2.7.0`\n*\n* 在插件中使用：不支持\n*\n* 在input、textarea等focus之后，获取输入框的光标位置。注意：只有在focus的时候调用此接口才有效。\n*\n* **示例代码**\n*\n* ```js\nwx.getSelectedTextRange({\n  complete: res => {\n    console.log('getSelectedTextRange res', res.start, res.end)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSetting": {
    "prefix": "wx.getSetting",
    "body": [
      "wx.getSetting()"
    ],
    "description": "/** [wx.getSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `2.6.3`\n*\n* 在插件中使用时，接口有以下不同：\n* - `withSubscriptions` 无效（插件暂无订阅消息）\n* - 返回值中的 `authSetting` 字段中是插件的权限（如用户信息功能页授权）\n* - [2.14.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起返回值中有 `miniprogramAuthSetting` 字段，内容等于当前小程序 `getSetting` 的结果（不含订阅状态）\n*\n* 获取用户的当前设置。**返回值中只会出现小程序已经向用户请求过的[权限](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)**。\n*\n* **示例代码**\n*\n* ```js\nwx.getSetting({\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n  }\n})\n```\n*\n* ```js\nwx.getSetting({\n  withSubscriptions: true,\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n    console.log(res.subscriptionsSetting)\n    // res.subscriptionsSetting = {\n    //   mainSwitch: true, // 订阅消息总开关\n    //   itemSettings: {   // 每一项开关\n    //     SYS_MSG_TYPE_INTERACTIVE: 'accept', // 小游戏系统订阅消息\n    //     SYS_MSG_TYPE_RANK: 'accept'\n    //     zun-LzcQyW-edafCVvzPkK4de2Rllr1fFpw2A_x0oXE: 'reject', // 普通一次性订阅消息\n    //     ke_OZC_66gZxALLcsuI7ilCJSP2OJ2vWo2ooUPpkWrw: 'ban',\n    //   }\n    // }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getShareInfo": {
    "prefix": "wx.getShareInfo",
    "body": [
      "wx.getShareInfo({",
      "  shareTicket: '${1:shareTicket}',",
      "})"
    ],
    "description": "/** [wx.getShareInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.getShareInfo.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 获取转发详细信息\n*\n* **示例代码**\n*\n* 敏感数据获取方式 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构（其中 openGId 为当前群的唯一标识）：\n*\n* ```json\n{\n \"openGId\": \"OPENGID\"\n}\n```\n*\n* **Tips**\n*\n* - 如需要展示群名称，小程序可以使用 [开放数据组件](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n* - 小游戏可以通过 [`wx.getGroupInfo`](#) 接口获取群名称 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSkylineInfo": {
    "prefix": "wx.getSkylineInfo",
    "body": [
      "wx.getSkylineInfo()"
    ],
    "description": "/** [wx.getSkylineInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSkylineInfo.html)\n         *\n         * 需要基础库： `2.26.2`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 获取当前运行环境对于 [Skyline 渲染引擎](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 的支持情况 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getStorage": {
    "prefix": "wx.getStorage",
    "body": [
      "wx.getStorage(${1:option})"
    ],
    "description": "/** [wx.getStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中异步获取指定 key 的内容。\n*\n* **示例代码**\n*\n* ```js\nwx.getStorage({\n  key: 'key',\n  success (res) {\n    console.log(res.data)\n  }\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.setStorage({\n  key: \"key\",\n  data: \"value\",\n  encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n  success() {\n    wx.getStorage({\n      key: \"key\",\n      encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n      success(res) {\n        console.log(res.data)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getStorageInfo": {
    "prefix": "wx.getStorageInfo",
    "body": [
      "wx.getStorageInfo()"
    ],
    "description": "/** [wx.getStorageInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html)\n*\n* 在插件中使用：不支持\n*\n* 异步获取当前storage的相关信息。\n*\n* **示例代码**\n*\n* ```js\nwx.getStorageInfo({\n  success (res) {\n    console.log(res.keys)\n    console.log(res.currentSize)\n    console.log(res.limitSize)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getStorageInfoSync()\n  console.log(res.keys)\n  console.log(res.currentSize)\n  console.log(res.limitSize)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSystemInfo": {
    "prefix": "wx.getSystemInfo",
    "body": [
      "wx.getSystemInfo()"
    ],
    "description": "/** [wx.getSystemInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfo.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 获取系统信息。**由于历史原因，wx.getSystemInfo 是异步的调用格式，但是是同步返回，需要异步获取系统信息请使用 [wx.getSystemInfoAsync](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoAsync.html)。**\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfo({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n```\n*\n* ```js\ntry {\n  const res = wx.getSystemInfoSync()\n  console.log(res.model)\n  console.log(res.pixelRatio)\n  console.log(res.windowWidth)\n  console.log(res.windowHeight)\n  console.log(res.language)\n  console.log(res.version)\n  console.log(res.platform)\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getSystemInfoAsync": {
    "prefix": "wx.getSystemInfoAsync",
    "body": [
      "wx.getSystemInfoAsync()"
    ],
    "description": "/** [wx.getSystemInfoAsync(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.getSystemInfoAsync.html)\n*\n* 需要基础库： `2.14.1`\n*\n* 在插件中使用：不支持\n*\n* 异步获取系统信息。需要一定的微信客户端版本支持，在不支持的客户端上，会使用同步实现来返回。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/WkUCgXmS7mqO)\n*\n* ```js\nwx.getSystemInfoAsync({\n  success (res) {\n    console.log(res.model)\n    console.log(res.pixelRatio)\n    console.log(res.windowWidth)\n    console.log(res.windowHeight)\n    console.log(res.language)\n    console.log(res.version)\n    console.log(res.platform)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getUserInfo": {
    "prefix": "wx.getUserInfo",
    "body": [
      "wx.getUserInfo()"
    ],
    "description": "/** [wx.getUserInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，需要在用户信息功能页中获得用户授权或满足一定条件后调用。否则将返回 fail。详见 [用户信息功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html)\n*\n* @warning **用户头像昵称获取规则已调整，参考 [用户信息接口调整说明](https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801)、[小程序用户头像昵称获取规则调整公告](https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01)**\n*\n* 获取用户信息。\n*\n* **示例代码**\n*\n* ```js\n// 必须是在用户已经授权的情况下调用\nwx.getUserInfo({\n  success: function(res) {\n    var userInfo = res.userInfo\n    var nickName = userInfo.nickName\n    var avatarUrl = userInfo.avatarUrl\n    var gender = userInfo.gender //性别 0：未知、1：男、2：女\n    var province = userInfo.province\n    var city = userInfo.city\n    var country = userInfo.country\n  }\n})\n```\n*\n* 敏感数据有两种获取方式：\n* 1. 使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法)\n* 2. 使用 [云调用直接获取开放数据](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#云调用直接获取开放数据)\n* 获取得到的开放数据为以下 json 结构：\n*\n* ```json\n{\n  \"openId\": \"OPENID\",\n  \"nickName\": \"NICKNAME\",\n  \"gender\": GENDER,\n  \"city\": \"CITY\",\n  \"province\": \"PROVINCE\",\n  \"country\": \"COUNTRY\",\n  \"avatarUrl\": \"AVATARURL\",\n  \"unionId\": \"UNIONID\",\n  \"watermark\": {\n    \"appid\":\"APPID\",\n    \"timestamp\":TIMESTAMP\n  }\n}\n```\n*\n* **小程序用户信息组件示例代码**\n*\n* ```html\n* <!-- 如果只是展示用户头像昵称，可以使用 <open-data /> 组件 -->\n* <open-data type=\"userAvatarUrl\"></open-data>\n* <open-data type=\"userNickName\"></open-data>\n* <!-- 需要使用 button 来授权登录 -->\n* <button wx:if=\"{{canIUse}}\" open-type=\"getUserInfo\" bindgetuserinfo=\"bindGetUserInfo\">授权登录</button>\n* <view wx:else>请升级微信版本</view>\n* ```\n*\n* ```js\nPage({\n  data: {\n    canIUse: wx.canIUse('button.open-type.getUserInfo')\n  },\n  onLoad: function() {\n    // 查看是否授权\n    wx.getSetting({\n      success (res){\n        if (res.authSetting['scope.userInfo']) {\n          // 已经授权，可以直接调用 getUserInfo 获取头像昵称\n          wx.getUserInfo({\n            success: function(res) {\n              console.log(res.userInfo)\n            }\n          })\n        }\n      }\n    })\n  },\n  bindGetUserInfo (e) {\n    console.log(e.detail.userInfo)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getUserProfile": {
    "prefix": "wx.getUserProfile",
    "body": [
      "wx.getUserProfile({",
      "  desc: '${1:desc}',",
      "})"
    ],
    "description": "/** [wx.getUserProfile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html)\n*\n* 需要基础库： `2.10.4`\n*\n* 在插件中使用：不支持\n*\n* @warning **用户头像昵称获取规则已调整，参考 [小程序用户头像昵称获取规则调整公告](https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01)**\n*\n* 获取用户信息。页面产生点击事件（例如 `button` 上 `bindtap` 的回调中）后才可调用，每次请求都会弹出授权窗口，用户同意后返回 `userInfo`。该接口用于替换 `wx.getUserInfo`，详见 [用户信息接口调整说明](https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801?highLine=login)。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/tsJaq2mP7Mp4)\n*\n* **Bug & Tip**\n*\n* 1. `tip`：仅小程序中 `wx.getUserInfo` 接口进行调整，小游戏中不受影响；\n* 2. `tip`：开发者工具中仅 2.10.4 及以上版本可访问 `wx.getUserProfile` 接口，在真机上可参考示例代码进行判断，无需根据版本号或者 `canIUse` 进行条件。\n* 3. `tip`：`wx.getUserProfile` 返回的加密数据中不包含 `openId` 和 `unionId` 字段。\n* 4. `bug`：开发者工具中 `2.10.4`~`2.16.1` 基础库版本通过 `<button open-type=\"getUserInfo\">` 会返回真实数据，真机上此区间会按照公告返回匿名数据。\n*\n* ```html\n* <view class=\"container\">\n*   <view class=\"userinfo\">\n*     <block wx:if=\"{{!hasUserInfo}}\">\n*       <button wx:if=\"{{canIUseGetUserProfile}}\" bindtap=\"getUserProfile\"> 获取头像昵称 </button>\n*       <button wx:else open-type=\"getUserInfo\" bindgetuserinfo=\"getUserInfo\"> 获取头像昵称 </button>\n*     </block>\n*     <block wx:else>\n*       <image bindtap=\"bindViewTap\" class=\"userinfo-avatar\" src=\"{{userInfo.avatarUrl}}\" mode=\"cover\"></image>\n*       <text class=\"userinfo-nickname\">{{userInfo.nickName}}</text>\n*     </block>\n*   </view>\n* </view>\n* ```\n*\n* ```js\nPage({\n  data: {\n    userInfo: {},\n    hasUserInfo: false,\n    canIUseGetUserProfile: false,\n  },\n  onLoad() {\n    if (wx.getUserProfile) {\n      this.setData({\n        canIUseGetUserProfile: true\n      })\n    }\n  },\n  getUserProfile(e) {\n    // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认\n    // 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗\n    wx.getUserProfile({\n      desc: '用于完善会员资料', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写\n      success: (res) => {\n        this.setData({\n          userInfo: res.userInfo,\n          hasUserInfo: true\n        })\n      }\n    })\n  },\n  getUserInfo(e) {\n    // 不推荐使用getUserInfo获取用户信息，预计自2021年4月13日起，getUserInfo将不再弹出弹窗，并直接返回匿名的用户个人信息\n    this.setData({\n      userInfo: e.detail.userInfo,\n      hasUserInfo: true\n    })\n  },\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getVideoInfo": {
    "prefix": "wx.getVideoInfo",
    "body": [
      "wx.getVideoInfo({",
      "  src: '${1:src}',",
      "})"
    ],
    "description": "/** [wx.getVideoInfo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.getVideoInfo.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：支持\n         *\n         * 获取视频详细信息。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.getWeRunData": {
    "prefix": "wx.getWeRunData",
    "body": [
      "wx.getWeRunData()"
    ],
    "description": "/** [wx.getWeRunData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：不支持\n*\n* 获取用户过去三十一天微信运动步数。需要先调用 [wx.login](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html) 接口。步数信息会在用户主动进入小程序时更新。\n*\n* **示例代码**\n*\n* ```js\nwx.getWeRunData({\n  success (res) {\n    // 拿 encryptedData 到开发者后台解密开放数据\n    const encryptedData = res.encryptedData\n    // 或拿 cloudID 通过云调用直接获取开放数据\n    const cloudID = res.cloudID\n  }\n})\n```\n*\n* **开放数据 JSON 结构**\n*\n* 敏感数据有两种获取方式，一是使用 [加密数据解密算法](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#加密数据解密算法) 。\n* 获取得到的开放数据为以下 json 结构：\n*\n* ```json\n{\n  \"stepInfoList\": [\n    {\n      \"timestamp\": 1445866601,\n      \"step\": 100\n    },\n    {\n      \"timestamp\": 1445876601,\n      \"step\": 120\n    }\n  ]\n}\n```\n*\n* stepInfoList 中，每一项结构如下：\n*\n* | 属性 | 类型 | 说明 |\n* | --- | ---- | --- |\n* | timestamp | number | 时间戳，表示数据对应的时间 |\n* | step | number | 微信运动步数 | */",
    "detail": "function",
    "kind": 9
  },
  "wx.getWifiList": {
    "prefix": "wx.getWifiList",
    "body": [
      "wx.getWifiList()"
    ],
    "description": "/** [wx.getWifiList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getWifiList.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 请求获取 Wi-Fi 列表。`wifiList` 数据会在 [onGetWifiList](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html) 注册的回调中返回。 **Android 调用前需要 [用户授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html) scope.userLocation。**\n         *\n         * iOS 上将跳转到系统设置中的微信设置页，需要用户手动进入「无线局域网」设置页，并在系统扫描到设备后，小程序才能收到 onGetWifiList 回调。Android 不会跳转。\n         *\n         * **注意**\n         *\n         * 因系统问题，本方法在 iOS 11.0 及 11.1 两个版本失效。但在 iOS 11.2 中已修复。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideHomeButton": {
    "prefix": "wx.hideHomeButton",
    "body": [
      "wx.hideHomeButton()"
    ],
    "description": "/** [wx.hideHomeButton(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideHomeButton.html)\n         *\n         * 需要基础库： `2.8.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏返回首页按钮。微信7.0.7版本起，当用户打开的小程序最底层页面是非首页时，默认展示“返回首页”按钮，开发者可在页面 onShow 中调用 hideHomeButton 进行隐藏。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideKeyboard": {
    "prefix": "wx.hideKeyboard",
    "body": [
      "wx.hideKeyboard()"
    ],
    "description": "/** [wx.hideKeyboard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.hideKeyboard.html)\n*\n* 需要基础库： `2.8.2`\n*\n* 在插件中使用：不支持\n*\n* 在input、textarea等focus拉起键盘之后，手动调用此接口收起键盘\n*\n* **示例代码**\n*\n* ```js\nwx.hideKeyboard({\n  complete: res => {\n    console.log('hideKeyboard res', res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideLoading": {
    "prefix": "wx.hideLoading",
    "body": [
      "wx.hideLoading()"
    ],
    "description": "/** [wx.hideLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html)\n         *\n         * 需要基础库： `1.1.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 隐藏 loading 提示框 */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideNavigationBarLoading": {
    "prefix": "wx.hideNavigationBarLoading",
    "body": [
      "wx.hideNavigationBarLoading()"
    ],
    "description": "/** [wx.hideNavigationBarLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideNavigationBarLoading.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 在当前页面隐藏导航条加载动画 */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideShareMenu": {
    "prefix": "wx.hideShareMenu",
    "body": [
      "wx.hideShareMenu()"
    ],
    "description": "/** [wx.hideShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.hideShareMenu.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 隐藏当前页面的转发按钮\n*\n* ****\n*\n* ## 注意事项\n*  - \"shareAppMessage\"表示“发送给朋友”按钮，\"shareTimeline\"表示“分享到朋友圈”按钮\n*  - 隐藏“发送给朋友”按钮时必须同时隐藏“分享到朋友圈”按钮，隐藏“分享到朋友圈”按钮时则允许不隐藏“发送给朋友”按钮\n*\n* **示例代码**\n*\n* ```js\nwx.hideShareMenu({\n  menus: ['shareAppMessage', 'shareTimeline']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideTabBar": {
    "prefix": "wx.hideTabBar",
    "body": [
      "wx.hideTabBar()"
    ],
    "description": "/** [wx.hideTabBar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBar.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏 tabBar */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideTabBarRedDot": {
    "prefix": "wx.hideTabBarRedDot",
    "body": [
      "wx.hideTabBarRedDot({",
      "  index: ${1:0},",
      "})"
    ],
    "description": "/** [wx.hideTabBarRedDot(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBarRedDot.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 隐藏 tabBar 某一项的右上角的红点 */",
    "detail": "function",
    "kind": 9
  },
  "wx.hideToast": {
    "prefix": "wx.hideToast",
    "body": [
      "wx.hideToast()"
    ],
    "description": "/** [wx.hideToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html)\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 隐藏消息提示框 */",
    "detail": "function",
    "kind": 9
  },
  "wx.initFaceDetect": {
    "prefix": "wx.initFaceDetect",
    "body": [
      "wx.initFaceDetect()"
    ],
    "description": "/** [wx.initFaceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.initFaceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 初始化人脸检测。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html)\n         *\n         * ****\n         *\n         * ### 特别说明\n         * 若小程序人脸识别功能涉及采集、存储用户生物特征（如人脸照片或视频、身份证和手持身份证、身份证照和免冠照等），此类型服务需使用[微信原生人脸识别接口](https://developers.weixin.qq.com/community/develop/doc/000442d352c1202bd498ecb105c00d?highline=%E4%BA%BA%E8%84%B8%E6%A0%B8%E8%BA%AB)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.isBluetoothDevicePaired": {
    "prefix": "wx.isBluetoothDevicePaired",
    "body": [
      "wx.isBluetoothDevicePaired({",
      "  deviceId: '${1:deviceId}',",
      "})"
    ],
    "description": "/** [wx.isBluetoothDevicePaired(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.isBluetoothDevicePaired.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.19.1`\n         *\n         * 查询蓝牙设备是否配对，仅安卓支持。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.join1v1Chat": {
    "prefix": "wx.join1v1Chat",
    "body": [
      "wx.join1v1Chat({",
      "  caller: {",
      "    nickname: '${1:nickname}',",
      "    openid: '${2:openid}',",
      "  },",
      "  listener: {",
      "    nickname: '${4:nickname}',",
      "    openid: '${5:openid}',",
      "  },",
      "})"
    ],
    "description": "/** [wx.join1v1Chat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.join1v1Chat.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 加入（创建）双人通话。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.joinVoIPChat": {
    "prefix": "wx.joinVoIPChat",
    "body": [
      "wx.joinVoIPChat({",
      "  groupId: '${1:groupId}',",
      "  nonceStr: '${2:nonceStr}',",
      "  signature: '${3:signature}',",
      "  timeStamp: ${4:0},",
      "})"
    ],
    "description": "/** [wx.joinVoIPChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.joinVoIPChat.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 加入 (创建) 实时语音通话，更多信息可见 [实时语音指南](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/voip-chat.html)。调用前需要用户授权 `scope.record`，若房间类型为视频房间需要用户授权 `scope.camera`。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.loadFontFace": {
    "prefix": "wx.loadFontFace",
    "body": [
      "wx.loadFontFace({",
      "  family: '${1:family}',",
      "  source: '${2:source}',",
      "})"
    ],
    "description": "/** [wx.loadFontFace(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 动态加载网络字体，文件地址需为下载类型。[2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html)起支持全局生效，需在 `app.js` 中调用。\n*\n* 注意：\n* 1. 字体文件返回的 contet-type 参考 [font](https://www.iana.org/assignments/media-types/media-types.xhtml#font)，格式不正确时会解析失败。\n* 2. 字体链接必须是https（ios不支持http)\n* 3. 字体链接必须是同源下的，或开启了cors支持，小程序的域名是`servicewechat.com`\n* 4. 工具里提示 Faild to load font可以忽略\n* 5. [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 以前仅在调用页面生效。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/b6Zrajm67R2x)\n* ```js\nwx.loadFontFace({\n  family: 'Bitstream Vera Serif Bold',\n  source: 'url(\"https://sungd.github.io/Pacifico.ttf\")',\n  success: console.log\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.login": {
    "prefix": "wx.login",
    "body": [
      "wx.login({",
      "  success: (res) => {",
      "    $1",
      "  },",
      "})"
    ],
    "description": "/** [wx.login(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，需要在用户信息功能页中获得用户授权或满足一定条件后调用。否则将返回 fail。详见 [用户信息功能页](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html)\n*\n* 调用接口获取登录凭证（code）。通过凭证进而换取用户登录态信息，包括用户在当前小程序的唯一标识（openid）、微信开放平台帐号下的唯一标识（unionid，若当前小程序已绑定到微信开放平台帐号）及本次登录的会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。\n*\n* **示例代码**\n*\n* ```js\nwx.login({\n  success (res) {\n    if (res.code) {\n      //发起网络请求\n      wx.request({\n        url: 'https://example.com/onLogin',\n        data: {\n          code: res.code\n        }\n      })\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.makeBluetoothPair": {
    "prefix": "wx.makeBluetoothPair",
    "body": [
      "wx.makeBluetoothPair({",
      "  deviceId: '${1:deviceId}',",
      "  pin: '${2:pin}',",
      "})"
    ],
    "description": "/** [wx.makeBluetoothPair(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.makeBluetoothPair.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.12.0`\n         *\n         * 蓝牙配对接口，仅安卓支持。\n         *\n         * 通常情况下（需要指定 `pin` 码或者密码时）系统会接管配对流程，直接调用 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 即可。该接口只应当在开发者不想让用户手动输入 `pin` 码且真机验证确认可以正常生效情况下用。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.makePhoneCall": {
    "prefix": "wx.makePhoneCall",
    "body": [
      "wx.makePhoneCall({",
      "  phoneNumber: '${1:phoneNumber}',",
      "})"
    ],
    "description": "/** [wx.makePhoneCall(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/phone/wx.makePhoneCall.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 拨打电话\n*\n* **示例代码**\n*\n* ```js\nwx.makePhoneCall({\n  phoneNumber: '1340000' //仅为示例，并非真实的电话号码\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.navigateBack": {
    "prefix": "wx.navigateBack",
    "body": [
      "wx.navigateBack()"
    ],
    "description": "/** [wx.navigateBack(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 关闭当前页面，返回上一页面或多级页面。可通过 [getCurrentPages](https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html) 获取当前的页面栈，决定需要返回几层。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.navigateBackMiniProgram": {
    "prefix": "wx.navigateBackMiniProgram",
    "body": [
      "wx.navigateBackMiniProgram()"
    ],
    "description": "/** [wx.navigateBackMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateBackMiniProgram.html)\n*\n* 需要基础库： `1.3.0`\n*\n* 在插件中使用：不支持\n*\n* 返回到上一个小程序。只有在当前小程序是被其他小程序打开时可以调用成功\n*\n* 注意：**微信客户端 iOS 6.5.9，Android 6.5.10 及以上版本支持**\n*\n* **示例代码**\n*\n* ```js\nwx.navigateBackMiniProgram({\n  extraData: {\n    foo: 'bar'\n  },\n  success(res) {\n    // 返回成功\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.navigateTo": {
    "prefix": "wx.navigateTo",
    "body": [
      "wx.navigateTo({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [wx.navigateTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html)\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 [wx.navigateBack](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html) 可以返回到原页面。小程序中页面栈最多十层。\n*\n* **示例代码**\n*\n* ```js\nwx.navigateTo({\n  url: 'test?id=1',\n  events: {\n    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n    acceptDataFromOpenedPage: function(data) {\n      console.log(data)\n    },\n    someEvent: function(data) {\n      console.log(data)\n    }\n    ...\n  },\n  success: function(res) {\n    // 通过eventChannel向被打开页面传送数据\n    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })\n  }\n})\n```\n*\n* ```javascript\n//test.js\nPage({\n  onLoad: function(option){\n    console.log(option.query)\n    const eventChannel = this.getOpenerEventChannel()\n    eventChannel.emit('acceptDataFromOpenedPage', {data: 'test'});\n    eventChannel.emit('someEvent', {data: 'test'});\n    // 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据\n    eventChannel.on('acceptDataFromOpenerPage', function(data) {\n      console.log(data)\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.navigateToMiniProgram": {
    "prefix": "wx.navigateToMiniProgram",
    "body": [
      "wx.navigateToMiniProgram()"
    ],
    "description": "/** [wx.navigateToMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html)\n*\n* 需要基础库： `1.3.0`\n*\n* 在插件中使用：需要基础库 `2.18.1`\n*\n* 打开另一个小程序\n*\n* **使用限制**\n*\n*  ##### 需要用户触发跳转\n*  从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。\n*  ##### 需要用户确认跳转\n*  从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 `fail cancel`。\n*  ##### 无需声明跳转名单，不限跳转数量（众测中）\n* 1. 从2020年4月24日起，使用跳转其他小程序功能将无需在全局配置中声明跳转名单，调用此接口时将不再校验所跳转的 AppID 是否在 navigateToMiniProgramAppIdList 中。\n* 2. 从2020年4月24日起，跳转其他小程序将不再受数量限制，使用此功能时请注意遵守运营规范。\n*\n* **运营规范**\n*\n* 平台将坚决打击小程序盒子等互推行为，使用此功能时请严格遵守[《微信小程序平台运营规范》](https://developers.weixin.qq.com/miniprogram/product/#_5-10-%E4%BA%92%E6%8E%A8%E8%A1%8C%E4%B8%BA)，若发现小程序违反运营规范将被下架处理。\n*\n* **关于调试**\n*\n* - 在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。[详情](https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#跳转小程序调试支持)\n* - 开发者工具上支持被跳转的小程序处理接收参数的调试。[详情](https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#跳转小程序调试支持)\n*\n* **示例代码**\n*\n* ```js\nwx.navigateToMiniProgram({\n  appId: '',\n  path: 'page/index/index?id=123',\n  extraData: {\n    foo: 'bar'\n  },\n  envVersion: 'develop',\n  success(res) {\n    // 打开成功\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.nextTick": {
    "prefix": "wx.nextTick",
    "body": [
      "wx.nextTick(${1:callback})"
    ],
    "description": "/** [wx.nextTick(function callback)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/custom-component/wx.nextTick.html)\n*\n* 需要基础库： `2.2.3`\n*\n* 在插件中使用：需要基础库 `2.7.1`\n*\n* 延迟一部分操作到下一个时间片再执行。（类似于 setTimeout）\n*\n* **说明**\n*\n* 因为自定义组件中的 setData 和 triggerEvent 等接口本身是同步的操作，当这几个接口被连续调用时，都是在一个同步流程中执行完的，因此若逻辑不当可能会导致出错。\n*\n* 一个极端的案例：当父组件的 setData 引发了子组件的 triggerEvent，进而使得父组件又进行了一次 setData，期间有通过 wx:if 语句对子组件进行卸载，就有可能引发奇怪的错误，所以对于不需要在一个同步流程内完成的逻辑，可以使用此接口延迟到下一个时间片再执行。\n*\n* **示例代码**\n*\n* ```js\nComponent({\n  doSth() {\n    this.setData({ number: 1 }) // 直接在当前同步流程中执行\n\n    wx.nextTick(() => {\n      this.setData({ number: 3 }) // 在当前同步流程结束后，下一个时间片执行\n    })\n\n    this.setData({ number: 2 }) // 直接在当前同步流程中执行\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.notifyBLECharacteristicValueChange": {
    "prefix": "wx.notifyBLECharacteristicValueChange",
    "body": [
      "wx.notifyBLECharacteristicValueChange({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "  state: ${4:true},",
      "})"
    ],
    "description": "/** [wx.notifyBLECharacteristicValueChange(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 启用蓝牙低功耗设备特征值变化时的 notify 功能，订阅特征。注意：必须设备的特征支持 notify 或者 indicate 才可以成功调用。\n*\n* 另外，必须先启用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 才能监听到设备 `characteristicValueChange` 事件\n*\n* **注意**\n*\n* - 订阅操作成功后需要设备主动更新特征的 value，才会触发 [wx.onBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html) 回调。\n* - 安卓平台上，在本接口调用成功后立即调用 [wx.writeBLECharacteristicValue](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html) 接口，在部分机型上会发生 10008 系统错误\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.notifyBLECharacteristicValueChange({\n  state: true, // 启用 notify 功能\n  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  success (res) {\n    console.log('notifyBLECharacteristicValueChange success', res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offAccelerometerChange": {
    "prefix": "wx.offAccelerometerChange",
    "body": [
      "wx.offAccelerometerChange((res) => {$1})"
    ],
    "description": "/** [wx.offAccelerometerChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.offAccelerometerChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除加速度数据事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAccelerometerChange(listener)\nwx.offAccelerometerChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offAppHide": {
    "prefix": "wx.offAppHide",
    "body": [
      "wx.offAppHide((res) => {$1})"
    ],
    "description": "/** [wx.offAppHide(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppHide.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序切后台事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAppHide(listener)\nwx.offAppHide(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offAppShow": {
    "prefix": "wx.offAppShow",
    "body": [
      "wx.offAppShow((res) => {$1})"
    ],
    "description": "/** [wx.offAppShow(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppShow.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序切前台事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAppShow(listener)\nwx.offAppShow(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offAudioInterruptionBegin": {
    "prefix": "wx.offAudioInterruptionBegin",
    "body": [
      "wx.offAudioInterruptionBegin((res) => {$1})"
    ],
    "description": "/** [wx.offAudioInterruptionBegin(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionBegin.html)\n*\n* 需要基础库： `2.6.2`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除音频因为受到系统占用而被中断开始事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAudioInterruptionBegin(listener)\nwx.offAudioInterruptionBegin(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offAudioInterruptionEnd": {
    "prefix": "wx.offAudioInterruptionEnd",
    "body": [
      "wx.offAudioInterruptionEnd((res) => {$1})"
    ],
    "description": "/** [wx.offAudioInterruptionEnd(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionEnd.html)\n*\n* 需要基础库： `2.6.2`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除音频中断结束事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onAudioInterruptionEnd(listener)\nwx.offAudioInterruptionEnd(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBLECharacteristicValueChange": {
    "prefix": "wx.offBLECharacteristicValueChange",
    "body": [
      "wx.offBLECharacteristicValueChange()"
    ],
    "description": "/** [wx.offBLECharacteristicValueChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLECharacteristicValueChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙低功耗设备的特征值变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBLECharacteristicValueChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBLEConnectionStateChange": {
    "prefix": "wx.offBLEConnectionStateChange",
    "body": [
      "wx.offBLEConnectionStateChange((result) => {$1})"
    ],
    "description": "/** [wx.offBLEConnectionStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLEConnectionStateChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙低功耗连接状态改变事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEConnectionStateChange(listener)\nwx.offBLEConnectionStateChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBLEMTUChange": {
    "prefix": "wx.offBLEMTUChange",
    "body": [
      "wx.offBLEMTUChange((result) => {$1})"
    ],
    "description": "/** [wx.offBLEMTUChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.offBLEMTUChange.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 移除蓝牙低功耗的最大传输单元变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEMTUChange(listener)\nwx.offBLEMTUChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBLEPeripheralConnectionStateChanged": {
    "prefix": "wx.offBLEPeripheralConnectionStateChanged",
    "body": [
      "wx.offBLEPeripheralConnectionStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offBLEPeripheralConnectionStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.offBLEPeripheralConnectionStateChanged.html)\n*\n* 需要基础库： `2.10.3`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 移除当前外围设备被连接或断开连接事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onBLEPeripheralConnectionStateChanged(listener)\nwx.offBLEPeripheralConnectionStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBeaconServiceChange": {
    "prefix": "wx.offBeaconServiceChange",
    "body": [
      "wx.offBeaconServiceChange()"
    ],
    "description": "/** [wx.offBeaconServiceChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconServiceChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除 Beacon 服务状态变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBeaconServiceChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBeaconUpdate": {
    "prefix": "wx.offBeaconUpdate",
    "body": [
      "wx.offBeaconUpdate()"
    ],
    "description": "/** [wx.offBeaconUpdate()](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconUpdate.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除 Beacon 设备更新事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBeaconUpdate()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBluetoothAdapterStateChange": {
    "prefix": "wx.offBluetoothAdapterStateChange",
    "body": [
      "wx.offBluetoothAdapterStateChange()"
    ],
    "description": "/** [wx.offBluetoothAdapterStateChange()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.offBluetoothAdapterStateChange.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除蓝牙适配器状态变化事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBluetoothAdapterStateChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offBluetoothDeviceFound": {
    "prefix": "wx.offBluetoothDeviceFound",
    "body": [
      "wx.offBluetoothDeviceFound()"
    ],
    "description": "/** [wx.offBluetoothDeviceFound()](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.offBluetoothDeviceFound.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除搜索到新设备的事件的全部监听函数\n*\n* **示例代码**\n*\n* ```js\nwx.offBluetoothDeviceFound()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offCompassChange": {
    "prefix": "wx.offCompassChange",
    "body": [
      "wx.offCompassChange((res) => {$1})"
    ],
    "description": "/** [wx.offCompassChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.offCompassChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除罗盘数据变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onCompassChange(listener)\nwx.offCompassChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offCopyUrl": {
    "prefix": "wx.offCopyUrl",
    "body": [
      "wx.offCopyUrl()"
    ],
    "description": "/** [wx.offCopyUrl()](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.offCopyUrl.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 移除用户点击右上角菜单的「复制链接」按钮时触发的事件的全部监听函数 */",
    "detail": "function",
    "kind": 9
  },
  "wx.offDeviceMotionChange": {
    "prefix": "wx.offDeviceMotionChange",
    "body": [
      "wx.offDeviceMotionChange((res) => {$1})"
    ],
    "description": "/** [wx.offDeviceMotionChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.offDeviceMotionChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除设备方向变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onDeviceMotionChange(listener)\nwx.offDeviceMotionChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offError": {
    "prefix": "wx.offError",
    "body": [
      "wx.offError((res) => {$1})"
    ],
    "description": "/** [wx.offError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offError.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序错误事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onError(listener)\nwx.offError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offGetWifiList": {
    "prefix": "wx.offGetWifiList",
    "body": [
      "wx.offGetWifiList((result) => {$1})"
    ],
    "description": "/** [wx.offGetWifiList(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offGetWifiList.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除获取到 Wi-Fi 列表数据事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onGetWifiList(listener)\nwx.offGetWifiList(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offGyroscopeChange": {
    "prefix": "wx.offGyroscopeChange",
    "body": [
      "wx.offGyroscopeChange((res) => {$1})"
    ],
    "description": "/** [wx.offGyroscopeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.offGyroscopeChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除陀螺仪数据变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onGyroscopeChange(listener)\nwx.offGyroscopeChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offHCEMessage": {
    "prefix": "wx.offHCEMessage",
    "body": [
      "wx.offHCEMessage((result) => {$1})"
    ],
    "description": "/** [wx.offHCEMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.offHCEMessage.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除接收 NFC 设备消息事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onHCEMessage(listener)\nwx.offHCEMessage(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offKeyboardHeightChange": {
    "prefix": "wx.offKeyboardHeightChange",
    "body": [
      "wx.offKeyboardHeightChange((result) => {$1})"
    ],
    "description": "/** [wx.offKeyboardHeightChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.offKeyboardHeightChange.html)\n*\n* 需要基础库： `2.9.2`\n*\n* 在插件中使用：不支持\n*\n* 移除键盘高度变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onKeyboardHeightChange(listener)\nwx.offKeyboardHeightChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLazyLoadError": {
    "prefix": "wx.offLazyLoadError",
    "body": [
      "wx.offLazyLoadError((result) => {$1})"
    ],
    "description": "/** [wx.offLazyLoadError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offLazyLoadError.html)\n*\n* 需要基础库： `2.24.3`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序异步组件加载失败事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLazyLoadError(listener)\nwx.offLazyLoadError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocalServiceDiscoveryStop": {
    "prefix": "wx.offLocalServiceDiscoveryStop",
    "body": [
      "wx.offLocalServiceDiscoveryStop((res) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceDiscoveryStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceDiscoveryStop.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务停止搜索的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceDiscoveryStop(listener)\nwx.offLocalServiceDiscoveryStop(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocalServiceFound": {
    "prefix": "wx.offLocalServiceFound",
    "body": [
      "wx.offLocalServiceFound((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceFound.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务发现的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceFound(listener)\nwx.offLocalServiceFound(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocalServiceLost": {
    "prefix": "wx.offLocalServiceLost",
    "body": [
      "wx.offLocalServiceLost((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceLost(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceLost.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务离开的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceLost(listener)\nwx.offLocalServiceLost(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocalServiceResolveFail": {
    "prefix": "wx.offLocalServiceResolveFail",
    "body": [
      "wx.offLocalServiceResolveFail((result) => {$1})"
    ],
    "description": "/** [wx.offLocalServiceResolveFail(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceResolveFail.html)\n*\n* 需要基础库： `2.4.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 移除 mDNS 服务解析失败的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocalServiceResolveFail(listener)\nwx.offLocalServiceResolveFail(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocationChange": {
    "prefix": "wx.offLocationChange",
    "body": [
      "wx.offLocationChange((result) => {$1})"
    ],
    "description": "/** [wx.offLocationChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：不支持\n*\n* 移除实时地理位置变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocationChange(listener)\nwx.offLocationChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offLocationChangeError": {
    "prefix": "wx.offLocationChangeError",
    "body": [
      "wx.offLocationChangeError((result) => {$1})"
    ],
    "description": "/** [wx.offLocationChangeError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChangeError.html)\n*\n* 需要基础库： `2.19.5`\n*\n* 在插件中使用：不支持\n*\n* 移除持续定位接口返回失败时触发。的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onLocationChangeError(listener)\nwx.offLocationChangeError(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offMemoryWarning": {
    "prefix": "wx.offMemoryWarning",
    "body": [
      "wx.offMemoryWarning((result) => {$1})"
    ],
    "description": "/** [wx.offMemoryWarning(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/memory/wx.offMemoryWarning.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：不支持\n*\n* 移除内存不足告警事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onMemoryWarning(listener)\nwx.offMemoryWarning(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offNetworkStatusChange": {
    "prefix": "wx.offNetworkStatusChange",
    "body": [
      "wx.offNetworkStatusChange((res) => {$1})"
    ],
    "description": "/** [wx.offNetworkStatusChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkStatusChange.html)\n*\n* 需要基础库： `2.9.3`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除网络状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onNetworkStatusChange(listener)\nwx.offNetworkStatusChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offNetworkWeakChange": {
    "prefix": "wx.offNetworkWeakChange",
    "body": [
      "wx.offNetworkWeakChange((result) => {$1})"
    ],
    "description": "/** [wx.offNetworkWeakChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkWeakChange.html)\n*\n* 需要基础库： `2.21.0`\n*\n* 在插件中使用：不支持\n*\n* 移除弱网状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onNetworkWeakChange(listener)\nwx.offNetworkWeakChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offPageNotFound": {
    "prefix": "wx.offPageNotFound",
    "body": [
      "wx.offPageNotFound((result) => {$1})"
    ],
    "description": "/** [wx.offPageNotFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offPageNotFound.html)\n*\n* 需要基础库： `2.1.2`\n*\n* 在插件中使用：不支持\n*\n* 移除小程序要打开的页面不存在事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onPageNotFound(listener)\nwx.offPageNotFound(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offScreenRecordingStateChanged": {
    "prefix": "wx.offScreenRecordingStateChanged",
    "body": [
      "wx.offScreenRecordingStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offScreenRecordingStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offScreenRecordingStateChanged.html)\n*\n* 需要基础库： `2.24.0`\n*\n* 在插件中使用：不支持\n*\n* 移除用户录屏事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onScreenRecordingStateChanged(listener)\nwx.offScreenRecordingStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offThemeChange": {
    "prefix": "wx.offThemeChange",
    "body": [
      "wx.offThemeChange((result) => {$1})"
    ],
    "description": "/** [wx.offThemeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offThemeChange.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：不支持\n*\n* 移除系统主题改变事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onThemeChange(listener)\nwx.offThemeChange(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offUnhandledRejection": {
    "prefix": "wx.offUnhandledRejection",
    "body": [
      "wx.offUnhandledRejection((result) => {$1})"
    ],
    "description": "/** [wx.offUnhandledRejection(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offUnhandledRejection.html)\n*\n* 需要基础库： `2.10.0`\n*\n* 在插件中使用：不支持\n*\n* 移除未处理的 Promise 拒绝事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onUnhandledRejection(listener)\nwx.offUnhandledRejection(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offUserCaptureScreen": {
    "prefix": "wx.offUserCaptureScreen",
    "body": [
      "wx.offUserCaptureScreen(${1:callback})"
    ],
    "description": "/** [wx.offUserCaptureScreen(function callback)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offUserCaptureScreen.html)\n         *\n         * 需要基础库： `2.9.3`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 用户主动截屏事件。取消事件监听。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.offVoIPChatInterrupted": {
    "prefix": "wx.offVoIPChatInterrupted",
    "body": [
      "wx.offVoIPChatInterrupted((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatInterrupted(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatInterrupted.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除被动断开实时语音通话事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatInterrupted(listener)\nwx.offVoIPChatInterrupted(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offVoIPChatMembersChanged": {
    "prefix": "wx.offVoIPChatMembersChanged",
    "body": [
      "wx.offVoIPChatMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatMembersChanged.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除实时语音通话成员在线状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatMembersChanged(listener)\nwx.offVoIPChatMembersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offVoIPChatSpeakersChanged": {
    "prefix": "wx.offVoIPChatSpeakersChanged",
    "body": [
      "wx.offVoIPChatSpeakersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatSpeakersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatSpeakersChanged.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除实时语音通话成员通话状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatSpeakersChanged(listener)\nwx.offVoIPChatSpeakersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offVoIPChatStateChanged": {
    "prefix": "wx.offVoIPChatStateChanged",
    "body": [
      "wx.offVoIPChatStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPChatStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPChatStateChanged.html)\n*\n* 需要基础库： `2.16.0`\n*\n* 在插件中使用：不支持\n*\n* 移除房间状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPChatStateChanged(listener)\nwx.offVoIPChatStateChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offVoIPVideoMembersChanged": {
    "prefix": "wx.offVoIPVideoMembersChanged",
    "body": [
      "wx.offVoIPVideoMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.offVoIPVideoMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.offVoIPVideoMembersChanged.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：不支持\n*\n* 移除实时语音通话成员视频状态变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onVoIPVideoMembersChanged(listener)\nwx.offVoIPVideoMembersChanged(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offWifiConnected": {
    "prefix": "wx.offWifiConnected",
    "body": [
      "wx.offWifiConnected((result) => {$1})"
    ],
    "description": "/** [wx.offWifiConnected(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offWifiConnected.html)\n*\n* 需要基础库： `2.9.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 移除连接上 Wi-Fi 的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWifiConnected(listener)\nwx.offWifiConnected(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offWifiConnectedWithPartialInfo": {
    "prefix": "wx.offWifiConnectedWithPartialInfo",
    "body": [
      "wx.offWifiConnectedWithPartialInfo((result) => {$1})"
    ],
    "description": "/** [wx.offWifiConnectedWithPartialInfo(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.offWifiConnectedWithPartialInfo.html)\n*\n* 需要基础库： `2.22.0`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 移除连接上 Wi-Fi 的事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWifiConnectedWithPartialInfo(listener)\nwx.offWifiConnectedWithPartialInfo(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.offWindowResize": {
    "prefix": "wx.offWindowResize",
    "body": [
      "wx.offWindowResize((result) => {$1})"
    ],
    "description": "/** [wx.offWindowResize(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.offWindowResize.html)\n*\n* 需要基础库： `2.3.0`\n*\n* 在插件中使用：不支持\n*\n* 移除窗口尺寸变化事件的监听函数\n*\n* **示例代码**\n*\n* ```js\nconst listener = function (res) { console.log(res) }\n\nwx.onWindowResize(listener)\nwx.offWindowResize(listener) // 需传入与监听时同一个的函数对象\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onAccelerometerChange": {
    "prefix": "wx.onAccelerometerChange",
    "body": [
      "wx.onAccelerometerChange((result) => {$1})"
    ],
    "description": "/** [wx.onAccelerometerChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.onAccelerometerChange.html)\n*\n* 在插件中使用：不支持\n*\n* 监听加速度数据事件。频率根据 [wx.startAccelerometer()](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html) 的 interval 参数, 接口调用后会自动开始监听。\n*\n* **示例代码**\n*\n* ```js\nwx.onAccelerometerChange(callback)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onAppHide": {
    "prefix": "wx.onAppHide",
    "body": [
      "wx.onAppHide((res) => {$1})"
    ],
    "description": "/** [wx.onAppHide(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序切后台事件。该事件与 [`App.onHide`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onhide) 的回调时机一致。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onAppShow": {
    "prefix": "wx.onAppShow",
    "body": [
      "wx.onAppShow((options) => {$1})"
    ],
    "description": "/** [wx.onAppShow(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序切前台事件。该事件与 [`App.onShow`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onshowobject-object) 的回调参数一致。\n         *\n         * **返回有效 referrerInfo 的场景**\n         *\n         * | 场景值 | 场景                            | appId含义  |\n         * | ------ | ------------------------------- | ---------- |\n         * | 1020   | 公众号 profile 页相关小程序列表 | 来源公众号 |\n         * | 1035   | 公众号自定义菜单                | 来源公众号 |\n         * | 1036   | App 分享消息卡片                | 来源App    |\n         * | 1037   | 小程序打开小程序                | 来源小程序 |\n         * | 1038   | 从另一个小程序返回              | 来源小程序 |\n         * | 1043   | 公众号模板消息                  | 来源公众号 |\n         *\n         * **不同 apiCategory 场景下的 API 限制**\n         *\n         * `X` 表示 API 被限制无法使用；不在表格中的 API 不限制。\n         *\n         * |                                       | default | nativeFunctionalized | browseOnly | embedded |\n         * |-|-|-|-|-|\n         * |navigateToMiniProgram                  |         | `X`                  | `X`        |          |\n         * |openSetting                            |         |                      | `X`        |          |\n         * |&lt;button open-type=\"share\"&gt;       |         | `X`                  | `X`        | `X`      |\n         * |&lt;button open-type=\"feedback\"&gt;    |         |                      | `X`        |          |\n         * |&lt;button open-type=\"open-setting\"&gt;|         |                      | `X`        |          |\n         * |openEmbeddedMiniProgram                |         | `X`                  | `X`        | `X`      |\n         *\n         * **注意**\n         *\n         * 部分版本在无`referrerInfo`的时候会返回 `undefined`，建议使用 `options.referrerInfo && options.referrerInfo.appId` 进行判断。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onAudioInterruptionBegin": {
    "prefix": "wx.onAudioInterruptionBegin",
    "body": [
      "wx.onAudioInterruptionBegin((res) => {$1})"
    ],
    "description": "/** [wx.onAudioInterruptionBegin(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionBegin.html)\n         *\n         * 需要基础库： `2.6.2`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听音频因为受到系统占用而被中断开始事件。以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天、有声广告开始播放、实名认证页面弹出等。此事件触发后，小程序内所有音频会暂停。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onAudioInterruptionEnd": {
    "prefix": "wx.onAudioInterruptionEnd",
    "body": [
      "wx.onAudioInterruptionEnd((res) => {$1})"
    ],
    "description": "/** [wx.onAudioInterruptionEnd(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionEnd.html)\n         *\n         * 需要基础库： `2.6.2`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听音频中断结束事件。在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBLECharacteristicValueChange": {
    "prefix": "wx.onBLECharacteristicValueChange",
    "body": [
      "wx.onBLECharacteristicValueChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLECharacteristicValueChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙低功耗设备的特征值变化事件。必须先调用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 接口才能接收到设备推送的 notification。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进制字符串示例\nfunction ab2hex(buffer) {\n  let hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.onBLECharacteristicValueChange(function(res) {\n  console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)\n  console.log(ab2hex(res.value))\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBLEConnectionStateChange": {
    "prefix": "wx.onBLEConnectionStateChange",
    "body": [
      "wx.onBLEConnectionStateChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLEConnectionStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙低功耗连接状态改变事件。包括开发者主动连接或断开连接，设备丢失，连接异常断开等等\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBLEConnectionStateChange(function(res) {\n  // 该方法回调中可以用于处理连接意外断开等异常情况\n  console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBLEMTUChange": {
    "prefix": "wx.onBLEMTUChange",
    "body": [
      "wx.onBLEMTUChange((result) => {$1})"
    ],
    "description": "/** [wx.onBLEMTUChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEMTUChange.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.20.1`\n*\n* 监听蓝牙低功耗的最大传输单元变化事件（仅安卓触发）。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBLEMTUChange(function (res) {\n  console.log('bluetooth mtu is', res.mtu)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBLEPeripheralConnectionStateChanged": {
    "prefix": "wx.onBLEPeripheralConnectionStateChanged",
    "body": [
      "wx.onBLEPeripheralConnectionStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onBLEPeripheralConnectionStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-peripheral/wx.onBLEPeripheralConnectionStateChanged.html)\n         *\n         * 需要基础库： `2.10.3`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 监听当前外围设备被连接或断开连接事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBackgroundAudioPause": {
    "prefix": "wx.onBackgroundAudioPause",
    "body": [
      "wx.onBackgroundAudioPause((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioPause(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPause.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐暂停事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBackgroundAudioPlay": {
    "prefix": "wx.onBackgroundAudioPlay",
    "body": [
      "wx.onBackgroundAudioPlay((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioPlay(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPlay.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐播放事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBackgroundAudioStop": {
    "prefix": "wx.onBackgroundAudioStop",
    "body": [
      "wx.onBackgroundAudioStop((res) => {$1})"
    ],
    "description": "/** [wx.onBackgroundAudioStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioStop.html)\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n         *\n         * 监听音乐停止事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBackgroundFetchData": {
    "prefix": "wx.onBackgroundFetchData",
    "body": [
      "wx.onBackgroundFetchData((result) => {$1})"
    ],
    "description": "/** [wx.onBackgroundFetchData(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.onBackgroundFetchData.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听收到 backgroundFetch 数据事件。如果监听时请求已经完成，则事件不会触发。建议和 [wx.getBackgroundFetchData](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.getBackgroundFetchData.html) 配合使用 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBeaconServiceChange": {
    "prefix": "wx.onBeaconServiceChange",
    "body": [
      "wx.onBeaconServiceChange((result) => {$1})"
    ],
    "description": "/** [wx.onBeaconServiceChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconServiceChange.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 监听 Beacon 服务状态变化事件，仅能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onBeaconServiceChange(res => {\n   console.log(res.available, res.discovering)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBeaconUpdate": {
    "prefix": "wx.onBeaconUpdate",
    "body": [
      "wx.onBeaconUpdate((result) => {$1})"
    ],
    "description": "/** [wx.onBeaconUpdate(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconUpdate.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 监听 Beacon 设备更新事件，仅能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onBeaconUpdate(res => {\n   console.log(res.beacons)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBluetoothAdapterStateChange": {
    "prefix": "wx.onBluetoothAdapterStateChange",
    "body": [
      "wx.onBluetoothAdapterStateChange((result) => {$1})"
    ],
    "description": "/** [wx.onBluetoothAdapterStateChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听蓝牙适配器状态变化事件\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.onBluetoothAdapterStateChange(function (res) {\n  console.log('adapterState changed, now is', res)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onBluetoothDeviceFound": {
    "prefix": "wx.onBluetoothDeviceFound",
    "body": [
      "wx.onBluetoothDeviceFound((result) => {$1})"
    ],
    "description": "/** [wx.onBluetoothDeviceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 监听搜索到新设备的事件\n*\n* **注意**\n*\n* - 若在 [wx.onBluetoothDeviceFound](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html) 回调了某个设备，则此设备会添加到 [wx.getBluetoothDevices](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html) 接口获取到的数组中。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n*\n* ```js\n// ArrayBuffer转16进度字符串示例\nfunction ab2hex(buffer) {\n  var hexArr = Array.prototype.map.call(\n    new Uint8Array(buffer),\n    function(bit) {\n      return ('00' + bit.toString(16)).slice(-2)\n    }\n  )\n  return hexArr.join('');\n}\nwx.onBluetoothDeviceFound(function(res) {\n  var devices = res.devices;\n  console.log('new device list has founded')\n  console.dir(devices)\n  console.log(ab2hex(devices[0].advertisData))\n})\n```\n*\n* **注意**\n*\n* - 蓝牙设备在被搜索到时，系统返回的 `name` 字段一般为广播包中的 `LocalName` 字段中的设备名称，而如果与蓝牙设备建立连接，系统返回的 `name` 字段会改为从蓝牙设备上获取到的 `GattName`。若需要动态改变设备名称并展示，建议使用 `localName` 字段。\n* - 安卓下部分机型需要有位置权限才能搜索到设备，需留意是否开启了位置权限 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onCompassChange": {
    "prefix": "wx.onCompassChange",
    "body": [
      "wx.onCompassChange((result) => {$1})"
    ],
    "description": "/** [wx.onCompassChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.onCompassChange.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听罗盘数据变化事件。频率：5 次/秒，接口调用后会自动开始监听，可使用 wx.stopCompass 停止监听。\n         *\n         * **accuracy 在 iOS/Android 的差异**\n         *\n         * 由于平台差异，accuracy 在 iOS/Android 的值不同。\n         *\n         * - iOS：accuracy 是一个 number 类型的值，表示相对于磁北极的偏差。0 表示设备指向磁北，90 表示指向东，180 表示指向南，依此类推。\n         * - Android：accuracy 是一个 string 类型的枚举值。\n         *\n         * | 值              | 说明                                                                                   |\n         * | --------------- | -------------------------------------------------------------------------------------- |\n         * | high            | 高精度                                                                                 |\n         * | medium          | 中等精度                                                                               |\n         * | low             | 低精度                                                                                 |\n         * | no-contact      | 不可信，传感器失去连接                                                                 |\n         * | unreliable      | 不可信，原因未知                                                                       |\n         * | unknow ${value} | 未知的精度枚举值，即该 Android 系统此时返回的表示精度的 value 不是一个标准的精度枚举值 | */",
    "detail": "function",
    "kind": 9
  },
  "wx.onCopyUrl": {
    "prefix": "wx.onCopyUrl",
    "body": [
      "wx.onCopyUrl((result) => {$1})"
    ],
    "description": "/** [wx.onCopyUrl(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.onCopyUrl.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听用户点击右上角菜单的「复制链接」按钮时触发的事件。本接口为 Beta 版本，暂只在 Android 平台支持。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onDeviceMotionChange": {
    "prefix": "wx.onDeviceMotionChange",
    "body": [
      "wx.onDeviceMotionChange((result) => {$1})"
    ],
    "description": "/** [wx.onDeviceMotionChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.onDeviceMotionChange.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听设备方向变化事件。频率根据 [wx.startDeviceMotionListening()](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html) 的 interval 参数。可以使用 [wx.stopDeviceMotionListening()](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html) 停止监听。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onError": {
    "prefix": "wx.onError",
    "body": [
      "wx.onError((message, stack) => {$1})"
    ],
    "description": "/** [wx.onError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序错误事件。如脚本错误或 API 调用报错等。该事件与 [`App.onError`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onerrorstring-error) 的回调时机与参数一致。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onGetWifiList": {
    "prefix": "wx.onGetWifiList",
    "body": [
      "wx.onGetWifiList((result) => {$1})"
    ],
    "description": "/** [wx.onGetWifiList(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听获取到 Wi-Fi 列表数据事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onGyroscopeChange": {
    "prefix": "wx.onGyroscopeChange",
    "body": [
      "wx.onGyroscopeChange((result) => {$1})"
    ],
    "description": "/** [wx.onGyroscopeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.onGyroscopeChange.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听陀螺仪数据变化事件。频率根据 [wx.startGyroscope()](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html) 的 interval 参数。可以使用 [wx.stopGyroscope()](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html) 停止监听。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onHCEMessage": {
    "prefix": "wx.onHCEMessage",
    "body": [
      "wx.onHCEMessage((result) => {$1})"
    ],
    "description": "/** [wx.onHCEMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.onHCEMessage.html)\n         *\n         * 需要基础库： `1.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听接收 NFC 设备消息事件。仅能注册一个监听 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onKeyboardHeightChange": {
    "prefix": "wx.onKeyboardHeightChange",
    "body": [
      "wx.onKeyboardHeightChange((result) => {$1})"
    ],
    "description": "/** [wx.onKeyboardHeightChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/keyboard/wx.onKeyboardHeightChange.html)\n*\n* 需要基础库： `2.7.0`\n*\n* 在插件中使用：不支持\n*\n* 监听键盘高度变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onKeyboardHeightChange(res => {\n  console.log(res.height)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLazyLoadError": {
    "prefix": "wx.onLazyLoadError",
    "body": [
      "wx.onLazyLoadError((result) => {$1})"
    ],
    "description": "/** [wx.onLazyLoadError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onLazyLoadError.html)\n         *\n         * 需要基础库： `2.24.3`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序异步组件加载失败事件。\n         *\n         * **注意**\n         *\n         * - 加载异步组件通常需要下载分包，若分包下载超时，则会触发 errMsg 为 \"loadSubpackage: timeout\" 的回调，默认超时等待时间为 5 秒。\n         * - 可以通过第二个参数指定超时时间（单位：ms），该设置全局有效，多次指定超时时间则覆盖前面。\n         * - 分包确认下载失败时，会再次触发 errMsg 为 \"loadSubpackage: fail\" 的回调。\n         * - 若在页面中使用该接口进行监听，请确保在必要时手动调用 offLazyLoadError 取消监听，以避免非预期的内存泄漏。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocalServiceDiscoveryStop": {
    "prefix": "wx.onLocalServiceDiscoveryStop",
    "body": [
      "wx.onLocalServiceDiscoveryStop((res) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceDiscoveryStop(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceDiscoveryStop.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务停止搜索的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocalServiceFound": {
    "prefix": "wx.onLocalServiceFound",
    "body": [
      "wx.onLocalServiceFound((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceFound.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务发现的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocalServiceLost": {
    "prefix": "wx.onLocalServiceLost",
    "body": [
      "wx.onLocalServiceLost((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceLost(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceLost.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务离开的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocalServiceResolveFail": {
    "prefix": "wx.onLocalServiceResolveFail",
    "body": [
      "wx.onLocalServiceResolveFail((result) => {$1})"
    ],
    "description": "/** [wx.onLocalServiceResolveFail(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceResolveFail.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 监听 mDNS 服务解析失败的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocationChange": {
    "prefix": "wx.onLocationChange",
    "body": [
      "wx.onLocationChange((result) => {$1})"
    ],
    "description": "/** [wx.onLocationChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChange.html)\n*\n* 需要基础库： `2.8.1`\n*\n* 在插件中使用：不支持\n*\n* 监听实时地理位置变化事件，需结合 [wx.startLocationUpdateBackground](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html)、[wx.startLocationUpdate](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html)使用。\n*\n*  ## 使用方法\n*  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n*\n*   ## 申请开通\n*   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。\n*   接口权限申请入口将于2022年3月11日开始内测，于3月31日全量上线。并从4月18日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n*\n*   ### 国内主体开放类目\n*\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 电商平台 |\t/\t| 售卖商品线下发货、收货、送货服务 |\n*   | 商家自营 |\t/\t| 提供售卖商品线下发货、收货、送货服务、线下商超导览、导航服务 |\n*   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n*   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n*   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n*   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n*   | 餐饮服务 | \t点餐平台、外卖平台\t| 线下送餐服务 |\n*   | 工具\t| 天气、信息查询 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询等 |\n*   | 金融 | 保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n*   | 旅游 | 景区服务 | 提供景区导航、导览服务 |\n*   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n*   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n*\n*   ### 海外主体开放类目\n*   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n*   | -------------- | -------| -------- |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n*   | 餐饮\t | /\t | 线下送餐服务 |\n*   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n*   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n*   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n*   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n*   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n*\n* **示例代码**\n*\n* ```js\n const _locationChangeFn = function(res) {\n  console.log('location change', res)\n }\n wx.onLocationChange(_locationChangeFn)\n wx.offLocationChange(_locationChangeFn)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onLocationChangeError": {
    "prefix": "wx.onLocationChangeError",
    "body": [
      "wx.onLocationChangeError((result) => {$1})"
    ],
    "description": "/** [wx.onLocationChangeError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChangeError.html)\n         *\n         * 需要基础库： `2.19.5`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听持续定位接口返回失败时触发。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onMemoryWarning": {
    "prefix": "wx.onMemoryWarning",
    "body": [
      "wx.onMemoryWarning((result) => {$1})"
    ],
    "description": "/** [wx.onMemoryWarning(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/memory/wx.onMemoryWarning.html)\n         *\n         * 需要基础库： `2.0.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听内存不足告警事件。\n         *\n         * 当 iOS/Android 向小程序进程发出内存警告时，触发该事件。触发该事件不意味小程序被杀，大部分情况下仅仅是告警，开发者可在收到通知后回收一些不必要资源避免进一步加剧内存紧张。\n         *\n         * **示例代码**\n         *\n         * ```js\n         * wx.onMemoryWarning(function () {\n         *   console.log('onMemoryWarningReceive')\n         * })\n         * `` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onNetworkStatusChange": {
    "prefix": "wx.onNetworkStatusChange",
    "body": [
      "wx.onNetworkStatusChange((result) => {$1})"
    ],
    "description": "/** [wx.onNetworkStatusChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkStatusChange.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：支持\n*\n* 监听网络状态变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onNetworkStatusChange(function (res) {\n  console.log(res.isConnected)\n  console.log(res.networkType)\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onNetworkWeakChange": {
    "prefix": "wx.onNetworkWeakChange",
    "body": [
      "wx.onNetworkWeakChange((result) => {$1})"
    ],
    "description": "/** [wx.onNetworkWeakChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkWeakChange.html)\n*\n* 需要基础库： `2.21.0`\n*\n* 在插件中使用：不支持\n*\n* 监听弱网状态变化事件\n*\n* **示例代码**\n*\n* ```js\nwx.onNetworkWeakChange(function (res) {\n  console.log(res.weakNet)\n  console.log(res.networkType)\n})\n// 取消监听\nwx.offNetworkWeakChange()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onPageNotFound": {
    "prefix": "wx.onPageNotFound",
    "body": [
      "wx.onPageNotFound((result) => {$1})"
    ],
    "description": "/** [wx.onPageNotFound(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html)\n         *\n         * 需要基础库： `2.1.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听小程序要打开的页面不存在事件。该事件与 [`App.onPageNotFound`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onpagenotfoundobject-object) 的回调时机一致。\n         *\n         * **注意**\n         *\n         * - 开发者可以在回调中进行页面重定向，但必须在回调中**同步**处理，异步处理（例如 `setTimeout` 异步执行）无效。\n         * - 若开发者没有调用 [wx.onPageNotFound](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html) 绑定监听，也没有声明 `App.onPageNotFound`，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。\n         * - 如果回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再第二次回调。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onScreenRecordingStateChanged": {
    "prefix": "wx.onScreenRecordingStateChanged",
    "body": [
      "wx.onScreenRecordingStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onScreenRecordingStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onScreenRecordingStateChanged.html)\n         *\n         * 需要基础库： `2.24.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听用户录屏事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onSocketClose": {
    "prefix": "wx.onSocketClose",
    "body": [
      "wx.onSocketClose((result) => {$1})"
    ],
    "description": "/** [wx.onSocketClose(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketClose.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 连接关闭事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onSocketError": {
    "prefix": "wx.onSocketError",
    "body": [
      "wx.onSocketError((result) => {$1})"
    ],
    "description": "/** [wx.onSocketError(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketError.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 错误事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onSocketMessage": {
    "prefix": "wx.onSocketMessage",
    "body": [
      "wx.onSocketMessage((result) => {$1})"
    ],
    "description": "/** [wx.onSocketMessage(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketMessage.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 接收到服务器的消息事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onSocketOpen": {
    "prefix": "wx.onSocketOpen",
    "body": [
      "wx.onSocketOpen((result) => {$1})"
    ],
    "description": "/** [wx.onSocketOpen(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketOpen.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n         *\n         * 监听 WebSocket 连接打开事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onThemeChange": {
    "prefix": "wx.onThemeChange",
    "body": [
      "wx.onThemeChange((result) => {$1})"
    ],
    "description": "/** [wx.onThemeChange(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onThemeChange.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听系统主题改变事件。该事件与 [`App.onThemeChange`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onThemeChange-Object-object) 的回调时机一致。\n         *\n         * **注意**\n         *\n         * - 只有在全局配置\"darkmode\": true时才会触发此事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onUnhandledRejection": {
    "prefix": "wx.onUnhandledRejection",
    "body": [
      "wx.onUnhandledRejection((result) => {$1})"
    ],
    "description": "/** [wx.onUnhandledRejection(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html)\n         *\n         * 需要基础库： `2.10.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听未处理的 Promise 拒绝事件。该事件与 [`App.onUnhandledRejection`](https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onUnhandledRejection-Object-object) 的回调时机与参数一致。\n         *\n         * **注意**\n         *\n         * - 所有的 unhandledRejection 都可以被这一监听捕获，但只有 Error 类型的才会在小程序后台触发报警。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onUserCaptureScreen": {
    "prefix": "wx.onUserCaptureScreen",
    "body": [
      "wx.onUserCaptureScreen((res) => {$1})"
    ],
    "description": "/** [wx.onUserCaptureScreen(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onUserCaptureScreen.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：不支持\n*\n* 监听用户主动截屏事件。用户使用系统截屏按键截屏时触发，只能注册一个监听\n*\n* **示例代码**\n*\n* ```js\nwx.onUserCaptureScreen(function (res) {\n  console.log('用户截屏了')\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.onVoIPChatInterrupted": {
    "prefix": "wx.onVoIPChatInterrupted",
    "body": [
      "wx.onVoIPChatInterrupted((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatInterrupted(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatInterrupted.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听被动断开实时语音通话事件。包括小游戏切入后端时断开 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onVoIPChatMembersChanged": {
    "prefix": "wx.onVoIPChatMembersChanged",
    "body": [
      "wx.onVoIPChatMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatMembersChanged.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听实时语音通话成员在线状态变化事件。有成员加入/退出通话时触发回调 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onVoIPChatSpeakersChanged": {
    "prefix": "wx.onVoIPChatSpeakersChanged",
    "body": [
      "wx.onVoIPChatSpeakersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatSpeakersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatSpeakersChanged.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听实时语音通话成员通话状态变化事件。有成员开始/停止说话时触发回调 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onVoIPChatStateChanged": {
    "prefix": "wx.onVoIPChatStateChanged",
    "body": [
      "wx.onVoIPChatStateChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPChatStateChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPChatStateChanged.html)\n         *\n         * 需要基础库： `2.16.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听房间状态变化事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onVoIPVideoMembersChanged": {
    "prefix": "wx.onVoIPVideoMembersChanged",
    "body": [
      "wx.onVoIPVideoMembersChanged((result) => {$1})"
    ],
    "description": "/** [wx.onVoIPVideoMembersChanged(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.onVoIPVideoMembersChanged.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听实时语音通话成员视频状态变化事件。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onWifiConnected": {
    "prefix": "wx.onWifiConnected",
    "body": [
      "wx.onWifiConnected((result) => {$1})"
    ],
    "description": "/** [wx.onWifiConnected(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnected.html)\n         *\n         * 需要基础库： `1.6.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 监听连接上 Wi-Fi 的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onWifiConnectedWithPartialInfo": {
    "prefix": "wx.onWifiConnectedWithPartialInfo",
    "body": [
      "wx.onWifiConnectedWithPartialInfo((result) => {$1})"
    ],
    "description": "/** [wx.onWifiConnectedWithPartialInfo(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnectedWithPartialInfo.html)\n         *\n         * 需要基础库： `2.22.0`\n         *\n         * 在插件中使用：需要基础库 `2.22.1`\n         *\n         * 监听连接上 Wi-Fi 的事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.onWindowResize": {
    "prefix": "wx.onWindowResize",
    "body": [
      "wx.onWindowResize((result) => {$1})"
    ],
    "description": "/** [wx.onWindowResize(function listener)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.onWindowResize.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 监听窗口尺寸变化事件 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openAppAuthorizeSetting": {
    "prefix": "wx.openAppAuthorizeSetting",
    "body": [
      "wx.openAppAuthorizeSetting()"
    ],
    "description": "/** [wx.openAppAuthorizeSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openAppAuthorizeSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 跳转系统微信授权管理页\n*\n* **示例代码**\n*\n* ```js\nwx.openAppAuthorizeSetting({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openBluetoothAdapter": {
    "prefix": "wx.openBluetoothAdapter",
    "body": [
      "wx.openBluetoothAdapter()"
    ],
    "description": "/** [wx.openBluetoothAdapter(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 初始化蓝牙模块。iOS 上开启主机/从机（外围设备）模式时需分别调用一次，并指定对应的 `mode`。\n*\n* **object.fail 回调函数返回的 state 参数（仅 iOS）**\n*\n* | 状态码 | 说明   |\n* | ------ | ------ |\n* | 0      | 未知   |\n* | 1      | 重置中 |\n* | 2      | 不支持 |\n* | 3      | 未授权 |\n* | 4      | 未开启 |\n*\n* **注意**\n*\n* - 其他蓝牙相关 API 必须在 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 调用之后使用。否则 API 会返回错误（errCode=10000）。\n* - 在用户蓝牙开关未开启或者手机不支持蓝牙功能的情况下，调用 [wx.openBluetoothAdapter](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html) 会返回错误（errCode=10001），表示手机蓝牙功能不可用。此时小程序蓝牙模块已经初始化完成，可通过 [wx.onBluetoothAdapterStateChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html) 监听手机蓝牙状态的改变，也可以调用蓝牙模块的所有API。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.openBluetoothAdapter({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openCard": {
    "prefix": "wx.openCard",
    "body": [
      "wx.openCard({",
      "  cardList: [$1],",
      "})"
    ],
    "description": "/** [wx.openCard(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.openCard.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：不支持\n*\n* 查看微信卡包中的卡券。只有通过 [认证](https://developers.weixin.qq.com/miniprogram/product/renzheng.html) 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 [微信卡券接口文档](https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=1490190158&version=1&lang=zh_CN&platform=2)。\n*\n* **示例代码**\n*\n* ```js\nwx.openCard({\n  cardList: [{\n    cardId: '',\n    code: ''\n  }, {\n    cardId: '',\n    code: ''\n  }],\n  success (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openChannelsActivity": {
    "prefix": "wx.openChannelsActivity",
    "body": [
      "wx.openChannelsActivity({",
      "  feedId: '${1:feedId}',",
      "  finderUserName: '${2:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.openChannelsActivity(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsActivity.html)\n         *\n         * 需要基础库： `2.19.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号视频 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openChannelsEvent": {
    "prefix": "wx.openChannelsEvent",
    "body": [
      "wx.openChannelsEvent({",
      "  eventId: '${1:eventId}',",
      "  finderUserName: '${2:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.openChannelsEvent(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsEvent.html)\n         *\n         * 需要基础库： `2.21.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号活动页 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openChannelsLive": {
    "prefix": "wx.openChannelsLive",
    "body": [
      "wx.openChannelsLive({",
      "  finderUserName: '${1:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.openChannelsLive(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsLive.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号直播 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openChannelsUserProfile": {
    "prefix": "wx.openChannelsUserProfile",
    "body": [
      "wx.openChannelsUserProfile({",
      "  finderUserName: '${1:finderUserName}',",
      "})"
    ],
    "description": "/** [wx.openChannelsUserProfile(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.openChannelsUserProfile.html)\n         *\n         * 需要基础库： `2.21.2`\n         *\n         * 在插件中使用：不支持\n         *\n         * 打开视频号主页 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openCustomerServiceChat": {
    "prefix": "wx.openCustomerServiceChat",
    "body": [
      "wx.openCustomerServiceChat({",
      "  corpId: '${1:corpId}',",
      "  extInfo: {",
      "    url: '${2:url}',",
      "  },",
      "})"
    ],
    "description": "/** [wx.openCustomerServiceChat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/service-chat/wx.openCustomerServiceChat.html)\n*\n* 需要基础库： `2.19.0`\n*\n* 在插件中使用：不支持\n*\n* 打开微信客服，页面产生点击事件（例如 button 上 bindtap 的回调中）后才可调用。了解更多信息，可以参考[微信客服介绍](https://work.weixin.qq.com/kf/)。\n*\n* **示例代码**\n*\n* ```js\nwx.openCustomerServiceChat({\n  extInfo: {url: ''},\n  corpId: '',\n  success(res) {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openDocument": {
    "prefix": "wx.openDocument",
    "body": [
      "wx.openDocument({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.openDocument(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html)\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 新开页面打开文档。微信客户端 `7.0.12` 版本前默认显示右上角菜单按钮，之后的版本默认不显示，需主动传入 `showMenu`。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openEmbeddedMiniProgram": {
    "prefix": "wx.openEmbeddedMiniProgram",
    "body": [
      "wx.openEmbeddedMiniProgram({",
      "  appId: '${1:appId}',",
      "})"
    ],
    "description": "/** [wx.openEmbeddedMiniProgram(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.openEmbeddedMiniProgram.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.26.2`\n         *\n         * 打开半屏小程序。接入指引请参考 [半屏小程序能力](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.openLocation": {
    "prefix": "wx.openLocation",
    "body": [
      "wx.openLocation({",
      "  latitude: ${1:0},",
      "  longitude: ${2:0},",
      "})"
    ],
    "description": "/** [wx.openLocation(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.openLocation.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 使用微信内置地图查看位置\n*\n* **示例代码**\n*\n*  ```js\n wx.getLocation({\n  type: 'gcj02', //返回可以用于wx.openLocation的经纬度\n  success (res) {\n    const latitude = res.latitude\n    const longitude = res.longitude\n    wx.openLocation({\n      latitude,\n      longitude,\n      scale: 18\n    })\n  }\n})\n ``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openSetting": {
    "prefix": "wx.openSetting",
    "body": [
      "wx.openSetting()"
    ],
    "description": "/** [wx.openSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.10.3`\n*\n* 调起客户端小程序设置界面，返回用户设置的操作结果。**设置界面只会出现小程序已经向用户请求过的[权限](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)**。\n*\n* ****\n*\n* - 注意：[2.3.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，用户发生点击行为后，才可以跳转打开设置页，管理授权信息。[详情](https://developers.weixin.qq.com/community/develop/doc/000cea2305cc5047af5733de751008)\n*\n* **示例代码**\n*\n* ```js\nwx.openSetting({\n  success (res) {\n    console.log(res.authSetting)\n    // res.authSetting = {\n    //   \"scope.userInfo\": true,\n    //   \"scope.userLocation\": true\n    // }\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openSystemBluetoothSetting": {
    "prefix": "wx.openSystemBluetoothSetting",
    "body": [
      "wx.openSystemBluetoothSetting()"
    ],
    "description": "/** [wx.openSystemBluetoothSetting(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/wx.openSystemBluetoothSetting.html)\n*\n* 需要基础库： `2.20.1`\n*\n* 在插件中使用：需要基础库 `2.21.3`\n*\n* 跳转系统蓝牙设置页。仅支持安卓。\n*\n* **示例代码**\n*\n* ```js\nwx.openSystemBluetoothSetting({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.openVideoEditor": {
    "prefix": "wx.openVideoEditor",
    "body": [
      "wx.openVideoEditor({",
      "  filePath: '${1:filePath}',",
      "  maxDuration: '${2:maxDuration}',",
      "  minDuration: '${3:minDuration}',",
      "})"
    ],
    "description": "/** [wx.openVideoEditor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.openVideoEditor.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 打开视频编辑器 */",
    "detail": "function",
    "kind": 9
  },
  "wx.pageScrollTo": {
    "prefix": "wx.pageScrollTo",
    "body": [
      "wx.pageScrollTo()"
    ],
    "description": "/** [wx.pageScrollTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 将页面滚动到目标位置，支持选择器和滚动距离两种方式定位\n*\n* **selector 语法**\n*\n* selector类似于 CSS 的选择器，但仅支持下列语法。\n*\n* + ID选择器：#the-id\n* + class选择器（可以连续指定多个）：.a-class.another-class\n* + 子元素选择器：.the-parent > .the-child\n* + 后代选择器：.the-ancestor .the-descendant\n* + 跨自定义组件的后代选择器：.the-ancestor >>> .the-descendant\n* + 多选择器的并集：#a-node, .some-other-nodes\n*\n* **示例代码**\n*\n* ```js\nwx.pageScrollTo({\n  scrollTop: 0,\n  duration: 300\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.pauseBackgroundAudio": {
    "prefix": "wx.pauseBackgroundAudio",
    "body": [
      "wx.pauseBackgroundAudio()"
    ],
    "description": "/** [wx.pauseBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.pauseBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 暂停播放音乐。\n*\n* **示例代码**\n*\n* ```js\nwx.pauseBackgroundAudio()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.pauseVoice": {
    "prefix": "wx.pauseVoice",
    "body": [
      "wx.pauseVoice()"
    ],
    "description": "/** [wx.pauseVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.pauseVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 暂停正在播放的语音。再次调用 [wx.playVoice](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html) 播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 [wx.stopVoice](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath\n    })\n\n    setTimeout(() => { wx.pauseVoice() }, 5000)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.playBackgroundAudio": {
    "prefix": "wx.playBackgroundAudio",
    "body": [
      "wx.playBackgroundAudio({",
      "  dataUrl: '${1:dataUrl}',",
      "})"
    ],
    "description": "/** [wx.playBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.playBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 使用后台播放器播放音乐。对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。\n*\n* **示例代码**\n*\n* ```js\nwx.playBackgroundAudio({\n  dataUrl: '',\n  title: '',\n  coverImgUrl: ''\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.playVoice": {
    "prefix": "wx.playVoice",
    "body": [
      "wx.playVoice({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.playVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 开始播放语音。同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath,\n      complete () { }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.pluginLogin": {
    "prefix": "wx.pluginLogin",
    "body": [
      "wx.pluginLogin()"
    ],
    "description": "/** [wx.pluginLogin(Object args)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.pluginLogin.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.20.1`\n         *\n         * __该接口仅在小程序插件中可调用__，调用接口获得插件用户标志凭证（code）。插件可以此凭证换取用于识别用户的标识 openpid。用户不同、宿主小程序不同或插件不同的情况下，该标识均不相同，即当且仅当同一个用户在同一个宿主小程序中使用同一个插件时，openpid 才会相同。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.preloadAssets": {
    "prefix": "wx.preloadAssets",
    "body": [
      "wx.preloadAssets({",
      "  data: [$1],",
      "})"
    ],
    "description": "/** [wx.preloadAssets(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadAssets.html)\n*\n* 需要基础库： `2.22.1`\n*\n* 在插件中使用：不支持\n*\n* 为视图层预加载媒体资源文件, 目前支持：font，image\n*\n* **示例代码**\n*\n* ```js\nwx.preloadAssets({\n  data: [\n    {\n      type: 'image',\n      src: imgUrl,\n    },\n  ],\n  success(resp) {\n    console.log('preloadAssets success', resp)\n  },\n  fail(err) {\n    console.log('preloadAssets fail', err)\n  },\n})\n```\n*\n* ****\n*\n* - 开发过程中，可在开发者工具network面板查看预加载情况。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.preloadSkylineView": {
    "prefix": "wx.preloadSkylineView",
    "body": [
      "wx.preloadSkylineView()"
    ],
    "description": "/** [wx.preloadSkylineView(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadSkylineView.html)\n         *\n         * 需要基础库： `2.24.7`\n         *\n         * 在插件中使用：需要基础库 `2.24.7`\n         *\n         * 预加载下个页面所需要的 [Skyline](https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/skyline/introduction.html) 运行环境。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.preloadWebview": {
    "prefix": "wx.preloadWebview",
    "body": [
      "wx.preloadWebview()"
    ],
    "description": "/** [wx.preloadWebview(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.preloadWebview.html)\n         *\n         * 需要基础库： `2.15.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 预加载下个页面的 WebView。参见[预加载下个页面的时机](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/runtime_nav.html#_2-4-控制预加载下个页面的时机) */",
    "detail": "function",
    "kind": 9
  },
  "wx.previewImage": {
    "prefix": "wx.previewImage",
    "body": [
      "wx.previewImage({",
      "  urls: [$1],",
      "})"
    ],
    "description": "/** [wx.previewImage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。\n*\n* **支持长按识别的码**\n*\n* | 类型 | 说明 | 最低版本 |\n* |------|------| -------|\n* | 小程序码 |    |\n* | 微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 企业微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 普通群码 | 指仅包含微信用户的群，不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 互通群码 |  指既有微信用户也有企业微信用户的群，不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n* | 公众号二维码 | 不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n*\n* **示例代码**\n*\n* ```js\nwx.previewImage({\n  current: '', // 当前显示图片的http链接\n  urls: [] // 需要预览的图片http链接列表\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.previewMedia": {
    "prefix": "wx.previewMedia",
    "body": [
      "wx.previewMedia({",
      "  sources: [$1],",
      "})"
    ],
    "description": "/** [wx.previewMedia(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewMedia.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 预览图片和视频。\n         *\n         * **支持长按识别的码**\n         *\n         * | 类型 | 说明 | 最低版本 |\n         * |------|------| -------|\n         * | 小程序码 |    |\n         * | 微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 企业微信个人码 | 不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 普通群码 | 指仅包含微信用户的群，不支持小游戏   | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 互通群码 |  指既有微信用户也有企业微信用户的群，不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) |\n         * | 公众号二维码 | 不支持小游戏  | [2.18.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) | */",
    "detail": "function",
    "kind": 9
  },
  "wx.reLaunch": {
    "prefix": "wx.reLaunch",
    "body": [
      "wx.reLaunch({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [wx.reLaunch(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 关闭所有页面，打开到应用内的某个页面\n*\n* **示例代码**\n*\n* ```js\nwx.reLaunch({\n  url: 'test?id=1'\n})\n```\n*\n* ```html\n* // test\n* Page({\n*   onLoad (option) {\n*     console.log(option.query)\n*   }\n* })\n* ``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.readBLECharacteristicValue": {
    "prefix": "wx.readBLECharacteristicValue",
    "body": [
      "wx.readBLECharacteristicValue({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "})"
    ],
    "description": "/** [wx.readBLECharacteristicValue(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.readBLECharacteristicValue.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 读取蓝牙低功耗设备特征值的二进制数据。注意：必须设备的特征支持 read 才可以成功调用。\n*\n* **注意**\n*\n* - 并行调用多次会存在读失败的可能性。\n* - 接口读取到的信息需要在 [wx.onBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html) 方法注册的回调中获取。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\n// 必须在这里的回调才能获取\nwx.onBLECharacteristicValueChange(function(characteristic) {\n  console.log('characteristic value comed:', characteristic)\n})\n\nwx.readBLECharacteristicValue({\n  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  success (res) {\n    console.log('readBLECharacteristicValue:', res.errCode)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.redirectTo": {
    "prefix": "wx.redirectTo",
    "body": [
      "wx.redirectTo({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [wx.redirectTo(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html)\n*\n* 在插件中使用：需要基础库 `2.2.2`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。\n*\n* **示例代码**\n*\n* ```js\nwx.redirectTo({\n  url: 'test?id=1'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.removeStorage": {
    "prefix": "wx.removeStorage",
    "body": [
      "wx.removeStorage({",
      "  key: '${1:key}',",
      "})"
    ],
    "description": "/** [wx.removeStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 从本地缓存中移除指定 key。\n*\n* **示例代码**\n*\n* ```js\nwx.removeStorage({\n  key: 'key',\n  success (res) {\n    console.log(res)\n  }\n})\n```\n*\n* ```js\ntry {\n  wx.removeStorageSync('key')\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.removeStorageSync": {
    "prefix": "wx.removeStorageSync",
    "body": [
      "wx.removeStorageSync('${1:key}')"
    ],
    "description": "/** [wx.removeStorageSync(string key)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* [wx.removeStorage](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html) 的同步版本\n*\n* **示例代码**\n*\n* ```js\nwx.removeStorage({\n  key: 'key',\n  success (res) {\n    console.log(res)\n  }\n})\n```\n*\n* ```js\ntry {\n  wx.removeStorageSync('key')\n} catch (e) {\n  // Do something when catch error\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.removeTabBarBadge": {
    "prefix": "wx.removeTabBarBadge",
    "body": [
      "wx.removeTabBarBadge({",
      "  index: ${1:0},",
      "})"
    ],
    "description": "/** [wx.removeTabBarBadge(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.removeTabBarBadge.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 移除 tabBar 某一项右上角的文本 */",
    "detail": "function",
    "kind": 9
  },
  "wx.reportAnalytics": {
    "prefix": "wx.reportAnalytics",
    "body": [
      "wx.reportAnalytics('${1:eventName}', ${2:data})"
    ],
    "description": "/** [wx.reportAnalytics(string eventName, Object data)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportAnalytics.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 在插件中使用时，可以被正常调用，但目前不会进行统计展示\n* @deprecated 基础库版本 [2.31.1](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n*\n* 自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。\n*\n* **示例代码**\n*\n* ```js\nwx.reportAnalytics('purchase', {\n  price: 120,\n  color: 'red'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.reportEvent": {
    "prefix": "wx.reportEvent",
    "body": [
      "wx.reportEvent('${1:eventId}', ${2:data})"
    ],
    "description": "/** [wx.reportEvent(string eventId, object data)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportEvent.html)\n         *\n         * 需要基础库： `2.14.4`\n         *\n         * 在插件中使用：不支持\n         *\n         * 事件上报 */",
    "detail": "function",
    "kind": 9
  },
  "wx.reportMonitor": {
    "prefix": "wx.reportMonitor",
    "body": [
      "wx.reportMonitor('${1:name}', ${2:0})"
    ],
    "description": "/** [wx.reportMonitor(string name, number value)](https://developers.weixin.qq.com/miniprogram/dev/api/data-analysis/wx.reportMonitor.html)\n*\n* 需要基础库： `2.0.1`\n*\n* 在插件中使用：不支持\n*\n* 自定义业务数据监控上报接口。\n*\n* **使用说明**\n*\n* 使用前，需要在「小程序管理后台-运维中心-性能监控-业务数据监控」中新建监控事件，配置监控描述与告警类型。每一个监控事件对应唯一的监控ID，开发者最多可以创建128个监控事件。\n*\n* **示例代码**\n*\n* ```js\nwx.reportMonitor('1', 1)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.reportPerformance": {
    "prefix": "wx.reportPerformance",
    "body": [
      "wx.reportPerformance(${1:0}, ${2:0}, ${3:dimensions})"
    ],
    "description": "/** [wx.reportPerformance(Number id, Number value, String|Array dimensions)](https://developers.weixin.qq.com/miniprogram/dev/api/base/performance/wx.reportPerformance.html)\n*\n* 需要基础库： `2.9.2`\n*\n* 在插件中使用：需要基础库 `2.9.3`\n*\n* 小程序测速上报。使用前，需要在小程序管理后台配置。\n*\n* **示例代码**\n*\n* ```js\nwx.reportPerformance(1101, 680)\nwx.reportPerformance(1101, 680, 'custom')\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestDeviceVoIP": {
    "prefix": "wx.requestDeviceVoIP",
    "body": [
      "wx.requestDeviceVoIP({",
      "  deviceName: '${1:deviceName}',",
      "  groupId: '${2:groupId}',",
      "  modelId: '${3:modelId}',",
      "  sn: '${4:sn}',",
      "  snTicket: '${5:snTicket}',",
      "})"
    ],
    "description": "/** [wx.requestDeviceVoIP(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/device-voip/wx.requestDeviceVoIP.html)\n*\n* 需要基础库： `2.27.3`\n*\n* 在插件中使用：不支持\n*\n* 请求用户授权与设备（组）间进行音视频通话。\n*\n* **示例代码**\n*\n* ```js\n// 授权单台设备\nwx.requestDeviceVoIP({\n  sn: 'xxxx',\n  snTicket: 'xxxxx',\n  modelId: 'xxx',\n  deviceName: 'xxx',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n\n// 批量授权（授权设备组）\nwx.requestDeviceVoIP({\n  isGroup: true,\n  groupId: '设备组 ID',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestOrderPayment": {
    "prefix": "wx.requestOrderPayment",
    "body": [
      "wx.requestOrderPayment({",
      "  nonceStr: '${1:nonceStr}',",
      "  package: '${2:package}',",
      "  paySign: '${3:paySign}',",
      "  timeStamp: '${4:timeStamp}',",
      "})"
    ],
    "description": "/** [wx.requestOrderPayment(Object args)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestOrderPayment.html)\n         *\n         * 需要基础库： `2.16.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 仅接入了[自定义版交易组件](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/Introduction2)的小程序需要使用，普通小程序可直接使用 [`wx.requestPayment`](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPayment.html)。\n         *\n         * **前置检查**\n         *\n         * 接入自定义版交易组件之后，若要发起微信支付，请先查询[需要校验的场景](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/API/order/check_scene)。\n         * 在需要校验的场景中，发起微信支付时，必须使用该接口，需要按照要求传入相关的[订单信息](https://developers.weixin.qq.com/miniprogram/dev/framework/ministore/minishopopencomponent2/API/order/add_order)进行校验，校验通过后用户才可以完成当前订单的支付，非需要校验的场景则可以按照商家要求自行选择传入订单信息或不传入。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestPayment": {
    "prefix": "wx.requestPayment",
    "body": [
      "wx.requestPayment({",
      "  nonceStr: '${1:nonceStr}',",
      "  package: '${2:package}',",
      "  paySign: '${3:paySign}',",
      "  timeStamp: '${4:timeStamp}',",
      "})"
    ],
    "description": "/** [wx.requestPayment(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPayment.html)\n*\n* 在插件中使用：不支持\n*\n* 发起微信支付。调用前需在[小程序微信公众平台](https://mp.weixin.qq.com/) -功能-微信支付入口申请接入微信支付。了解更多信息，可以参考 [微信支付开发文档](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pages/api.shtml)：\n* - [开发指引](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter2_3.shtml)\n* - [下单接口](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter3_2.shtml)\n* - [支付接口](https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pay/transactions/chapter3_12.shtml)\n* - 旧版本 (v2)\n*   - [开发指引](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&index=1)\n*   - [支付接口](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&index=3)\n*\n* 如果使用[云开发](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html)，则 `wx.requestPayment` 所需参数可以通过云开发微信支付统一下单接口免鉴权获取、并可免证书、免签名的安全调用微信支付服务端接口、及接收异步支付结果回调，详见[云开发微信支付](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/wechatpay/wechatpay.html)。\n*\n* **示例代码**\n*\n* ```js\nwx.requestPayment({\n  timeStamp: '',\n  nonceStr: '',\n  package: '',\n  signType: 'MD5',\n  paySign: '',\n  success (res) { },\n  fail (res) { }\n})\n```\n*\n* 注：如果服务端有使用云开发，可以通过云开发微信支付[统一下单](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/open/pay/CloudPay.unifiedOrder.html)接口免鉴权获取以上所需所有参数，示例：\n*\n* ```js\n// 云函数代码\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\n\nexports.main = async (event, context) => {\n  const res = await cloud.cloudPay.unifiedOrder({\n    \"body\" : \"小秋TIT店-超市\",\n    \"outTradeNo\" : \"1217752501201407033233368018\",\n    \"spbillCreateIp\" : \"127.0.0.1\",\n    \"subMchId\" : \"1900009231\",\n    \"totalFee\" : 1,\n    \"envId\": \"test-f0b102\",\n    \"functionName\": \"pay_cb\"\n  })\n  return res\n}\n\n// 小程序代码\nwx.cloud.callFunction({\n  name: '函数名',\n  data: {\n    // ...\n  },\n  success: res => {\n    const payment = res.result.payment\n    wx.requestPayment({\n      ...payment,\n      success (res) {\n        console.log('pay success', res)\n      },\n      fail (err) {\n        console.error('pay fail', err)\n      }\n    })\n  },\n  fail: console.error,\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestPluginPayment": {
    "prefix": "wx.requestPluginPayment",
    "body": [
      "wx.requestPluginPayment({",
      "  fee: ${1:0},",
      "  paymentArgs: ${2:paymentArgs},",
      "  version: ${3:version},",
      "})"
    ],
    "description": "/** [wx.requestPluginPayment(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/payment/wx.requestPluginPayment.html)\n*\n* 需要基础库： `2.22.1`\n*\n* 在插件中使用：需要基础库 `2.22.1`\n*\n* 插件中发起支付。\n*\n* **Tip**\n*\n* 1. `tip`: 小程序与插件绑定在同一个open平台账号上且小程序与插件均为open账号的同主体/关联主体时，调用此接口将直接拉起支付收银台。\n* 1. `tip`: 这个接口本身可以在开发者工具中使用，但功能页的跳转目前不支持在开发者工具中调试，请在真机上测试。\n* 1. `tip`: 跳转支付功能页需要在 `app.json` 中配置 `\"functionalPages\": true`\n*\n* **示例代码**\n*\n* 具体用法及参数说明可参考 [插件支付文档](https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/request-payment.html)\n* ```js\nwx.requestPluginPayment({\n  version: 'release',\n  fee: 1,\n  paymentArgs: {},\n  currencyType: 'CNY',\n  success (res) { },\n  fail (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestSubscribeDeviceMessage": {
    "prefix": "wx.requestSubscribeDeviceMessage",
    "body": [
      "wx.requestSubscribeDeviceMessage({",
      "  modelId: '${1:modelId}',",
      "  sn: '${2:sn}',",
      "  snTicket: '${3:snTicket}',",
      "  tmplIds: [$4],",
      "})"
    ],
    "description": "/** [wx.requestSubscribeDeviceMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeDeviceMessage.html)\n*\n* 需要基础库： `2.20.0`\n*\n* 在插件中使用：不支持\n*\n* 订阅设备消息接口，调用后弹出授权框，用户同意后会允许开发者给用户发送订阅模版消息。当用户点击“允许”按钮时，模板消息会被添加到用户的小程序设置页，通过 wx.getSetting 接口可获取用户对相关模板消息的订阅状态。\n*\n* **错误码**\n*\n* | errCode | errMsg                                                 | 说明                                                           |\n* | ------- | ------------------------------------------------------ | -------------------------------------------------------------- |\n* | 10001   | TmplIds can't be empty                                 | tmplIds 为空                                                  |\n* | 10004   | Invalid template id                                    | tmplId 参数类型错误                                            |\n* | 20001   | No template data return, verify the template id exist  | tmplId 为空                                                  |\n* | 20003   | Templates count out of max bounds                      | tmplId 数量超过上限                                           |\n* | 19720726   | check sn_ticket fail                                | snTicket 不合法                                              |\n* | 19720727   | sn_ticket expire                                    | snTicket 过期                                               |\n* | 19720728   | err_not_found_tid                                    | tmplId 不存在                                              |\n* | 19720736   | template_id do not match model_id                   | modelId 类型与 tmplId 类型不符                               |\n*\n* **示例代码**\n*\n* ```js\nwx.requestSubscribeDeviceMessage({\n  tmplIds: ['xxxxx'],\n  sn: 'xxxx',\n  snTicket: 'xxxxx',\n  modelId: 'xxx',\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.requestSubscribeMessage": {
    "prefix": "wx.requestSubscribeMessage",
    "body": [
      "wx.requestSubscribeMessage({",
      "  tmplIds: [$1],",
      "})"
    ],
    "description": "/** [wx.requestSubscribeMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html)\n*\n* 需要基础库： `2.4.4`\n*\n* 在插件中使用：不支持\n*\n* 调起客户端小程序订阅消息界面，返回用户订阅消息的操作结果。当用户勾选了订阅面板中的“总是保持以上选择，不再询问”时，模板消息会被添加到用户的小程序设置页，通过 [wx.getSetting](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html) 接口可获取用户对相关模板消息的订阅状态。\n*\n* ## 注意事项\n*  - 一次性模板 id 和永久模板 id 不可同时使用。\n*  - 低版本基础库2.4.4~2.8.3 已支持订阅消息接口调用，仅支持传入一个一次性 tmplId / 永久 tmplId。\n*  - [2.8.2](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，用户发生点击行为或者发起支付回调后，才可以调起订阅消息界面。\n*  - [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，开发版和体验版小程序将禁止使用模板消息 formId。\n*  - 一次授权调用里，每个tmplId对应的模板标题不能存在相同的，若出现相同的，只保留一个。\n*  - [2.10.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 版本开始，支持订阅语音消息提醒，[详情](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/subscribe-message.html)\n*\n* **错误码**\n*\n* | errCode | errMsg                                                 | 说明                                                           |\n* | ------- | ------------------------------------------------------ | -------------------------------------------------------------- |\n* | 10001   | TmplIds can't be empty                                 | 参数传空了                                                     |\n* | 10002   | Request list fail                                       | 网络问题，请求消息列表失败                                     |\n* | 10003   | Request subscribe fail                                 | 网络问题，订阅请求发送失败                                     |\n* | 10004   | Invalid template id                                    | 参数类型错误                                                   |\n* | 10005   | Cannot show subscribe message UI                       | 无法展示 UI，一般是小程序这个时候退后台了导致的                |\n* | 20001   | No template data return, verify the template id exist  | 没有模板数据，一般是模板 ID 不存在 或者和模板类型不对应 导致的 |\n* | 20002   | Templates type must be same                            | 模板消息类型 既有一次性的又有永久的                            |\n* | 20003   | Templates count out of max bounds                      | 模板消息数量超过上限                                           |\n* | 20004   | The main switch is switched off                        | 用户关闭了主开关，无法进行订阅                                 |\n* | 20005   | This mini program was banned from subscribing messages | 小程序被禁封                                                   |\n* | 20013   | Reject DeviceMsg Template                              | 不允许通过该接口订阅设备消息                                      |\n*\n* **示例代码**\n*\n* ```js\nwx.requestSubscribeMessage({\n  tmplIds: [''],\n  success (res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.reserveChannelsLive": {
    "prefix": "wx.reserveChannelsLive",
    "body": [
      "wx.reserveChannelsLive({",
      "  noticeId: '${1:noticeId}',",
      "})"
    ],
    "description": "/** [wx.reserveChannelsLive(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/channels/wx.reserveChannelsLive.html)\n         *\n         * 需要基础库： `2.19.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 预约视频号直播 */",
    "detail": "function",
    "kind": 9
  },
  "wx.revokeBufferURL": {
    "prefix": "wx.revokeBufferURL",
    "body": [
      "wx.revokeBufferURL('${1:url}')"
    ],
    "description": "/** [wx.revokeBufferURL(string url)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.revokeBufferURL.html)\n         *\n         * 需要基础库： `2.14.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 根据 URL 销毁存在内存中的数据 */",
    "detail": "function",
    "kind": 9
  },
  "wx.saveFileToDisk": {
    "prefix": "wx.saveFileToDisk",
    "body": [
      "wx.saveFileToDisk({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.saveFileToDisk(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFileToDisk.html)\n*\n* 需要基础库： `2.11.0`\n*\n* 在插件中使用：需要基础库 `2.15.0`\n*\n* 保存文件系统的文件到用户磁盘，仅在 PC 端支持\n*\n* **示例代码**\n*\n* ```js\nwx.saveFileToDisk({\n  filePath: `${wx.env.USER_DATA_PATH}/hello.txt`,\n  success(res) {\n    console.log(res)\n  },\n  fail(res) {\n    console.error(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.saveImageToPhotosAlbum": {
    "prefix": "wx.saveImageToPhotosAlbum",
    "body": [
      "wx.saveImageToPhotosAlbum({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.saveImageToPhotosAlbum(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 保存图片到系统相册。\n*\n* **示例代码**\n*\n* ```js\nwx.saveImageToPhotosAlbum({\n  success(res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.saveVideoToPhotosAlbum": {
    "prefix": "wx.saveVideoToPhotosAlbum",
    "body": [
      "wx.saveVideoToPhotosAlbum({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.saveVideoToPhotosAlbum(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 保存视频到系统相册。支持mp4视频格式。\n*\n* **示例代码**\n*\n* ```js\nwx.saveVideoToPhotosAlbum({\n  filePath: 'wxfile://xxx',\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.scanCode": {
    "prefix": "wx.scanCode",
    "body": [
      "wx.scanCode()"
    ],
    "description": "/** [wx.scanCode(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/scan/wx.scanCode.html)\n*\n* 需要基础库： `1.0.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 调起客户端扫码界面进行扫码\n*\n* **示例代码**\n*\n* ```js\n// 允许从相机和相册扫码\nwx.scanCode({\n  success (res) {\n    console.log(res)\n  }\n})\n\n// 只允许从相机扫码\nwx.scanCode({\n  onlyFromCamera: true,\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.seekBackgroundAudio": {
    "prefix": "wx.seekBackgroundAudio",
    "body": [
      "wx.seekBackgroundAudio({",
      "  position: ${1:0},",
      "})"
    ],
    "description": "/** [wx.seekBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.seekBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 控制音乐播放进度。\n*\n* **示例代码**\n*\n* ```js\nwx.seekBackgroundAudio({\n  position: 30\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.sendHCEMessage": {
    "prefix": "wx.sendHCEMessage",
    "body": [
      "wx.sendHCEMessage({",
      "  data: ${1:data},",
      "})"
    ],
    "description": "/** [wx.sendHCEMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.sendHCEMessage.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 发送 NFC 消息。仅在安卓系统下有效。\n*\n* **示例代码**\n*\n* ```js\nconst buffer = new ArrayBuffer(1)\nconst dataView = new DataView(buffer)\ndataView.setUint8(0, 0)\n\nwx.startHCE({\n  success (res) {\n    wx.onHCEMessage(function(res) {\n      if (res.messageType === 1) {\n        wx.sendHCEMessage({data: buffer})\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.sendSms": {
    "prefix": "wx.sendSms",
    "body": [
      "wx.sendSms()"
    ],
    "description": "/** [wx.sendSms(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/sms/wx.sendSms.html)\n         *\n         * 需要基础库： `2.25.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉起手机发送短信界面。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.sendSocketMessage": {
    "prefix": "wx.sendSocketMessage",
    "body": [
      "wx.sendSocketMessage({",
      "  data: ${1:data},",
      "})"
    ],
    "description": "/** [wx.sendSocketMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.sendSocketMessage.html)\n*\n* 在插件中使用：不支持\n*\n* @warning **推荐使用 [SocketTask](https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html) 的方式去管理 webSocket 链接，每一条链路的生命周期都更加可控，同时存在多个 webSocket 的链接的情况下使用 wx 前缀的方法可能会带来一些和预期不一致的情况。**\n*\n* 通过 WebSocket 连接发送数据。需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。\n*\n* **示例代码**\n*\n* ```js\nlet socketOpen = false\nlet socketMsgQueue = []\nwx.connectSocket({\n  url: 'test.php'\n})\n\nwx.onSocketOpen(function(res) {\n  socketOpen = true\n  for (let i = 0; i < socketMsgQueue.length; i++){\n    sendSocketMessage(socketMsgQueue[i])\n  }\n  socketMsgQueue = []\n})\n\nfunction sendSocketMessage(msg) {\n  if (socketOpen) {\n    wx.sendSocketMessage({\n      data:msg\n    })\n  } else {\n    socketMsgQueue.push(msg)\n  }\n}\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setBLEMTU": {
    "prefix": "wx.setBLEMTU",
    "body": [
      "wx.setBLEMTU({",
      "  deviceId: '${1:deviceId}',",
      "  mtu: ${2:0},",
      "})"
    ],
    "description": "/** [wx.setBLEMTU(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.setBLEMTU.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 协商设置蓝牙低功耗的最大传输单元 (Maximum Transmission Unit, MTU)。需在 [wx.createBLEConnection](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html) 调用成功后调用。仅安卓系统 5.1 以上版本有效，iOS 因系统限制不支持。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setBackgroundColor": {
    "prefix": "wx.setBackgroundColor",
    "body": [
      "wx.setBackgroundColor()"
    ],
    "description": "/** [wx.setBackgroundColor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundColor.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.4.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置窗口的背景色\n*\n* **示例代码**\n*\n* ```js\nwx.setBackgroundColor({\n  backgroundColor: '#ffffff', // 窗口的背景色为白色\n})\n\nwx.setBackgroundColor({\n  backgroundColorTop: '#ffffff', // 顶部窗口的背景色为白色\n  backgroundColorBottom: '#ffffff', // 底部窗口的背景色为白色\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setBackgroundFetchToken": {
    "prefix": "wx.setBackgroundFetchToken",
    "body": [
      "wx.setBackgroundFetchToken({",
      "  token: '${1:token}',",
      "})"
    ],
    "description": "/** [wx.setBackgroundFetchToken(object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/background-fetch/wx.setBackgroundFetchToken.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 设置自定义登录态，在周期性拉取数据时带上，便于第三方服务器验证请求合法性 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setBackgroundTextStyle": {
    "prefix": "wx.setBackgroundTextStyle",
    "body": [
      "wx.setBackgroundTextStyle({",
      "  textStyle: ${1:textStyle},",
      "})"
    ],
    "description": "/** [wx.setBackgroundTextStyle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundTextStyle.html)\n*\n* 需要基础库： `2.1.0`\n*\n* 在插件中使用：需要基础库 `2.4.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置下拉背景字体、loading 图的样式\n*\n* **示例代码**\n*\n* ```js\nwx.setBackgroundTextStyle({\n  textStyle: 'dark' // 下拉背景字体、loading 图的样式为dark\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setClipboardData": {
    "prefix": "wx.setClipboardData",
    "body": [
      "wx.setClipboardData({",
      "  data: '${1:data}',",
      "})"
    ],
    "description": "/** [wx.setClipboardData(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 设置系统剪贴板的内容。调用成功后，会弹出 toast 提示\"内容已复制\"，持续 1.5s\n*\n* **示例代码**\n*\n* ```js\nwx.setClipboardData({\n  data: 'data',\n  success (res) {\n    wx.getClipboardData({\n      success (res) {\n        console.log(res.data) // data\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setEnable1v1Chat": {
    "prefix": "wx.setEnable1v1Chat",
    "body": [
      "wx.setEnable1v1Chat({",
      "  enable: ${1:true},",
      "})"
    ],
    "description": "/** [wx.setEnable1v1Chat(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.setEnable1v1Chat.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启双人通话。设置 `enable` 为 `false` 时，无法接听呼叫。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setEnableDebug": {
    "prefix": "wx.setEnableDebug",
    "body": [
      "wx.setEnableDebug({",
      "  enableDebug: ${1:true},",
      "})"
    ],
    "description": "/** [wx.setEnableDebug(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.setEnableDebug.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：不支持\n*\n* 设置是否打开调试开关。此开关对正式版也能生效。\n*\n* **示例代码**\n*\n* ```javascript\n// 打开调试\nwx.setEnableDebug({\n  enableDebug: true\n})\n\n// 关闭调试\nwx.setEnableDebug({\n  enableDebug: false\n})\n```\n*\n* **Tips**\n*\n* - 在正式版打开调试还有一种方法，就是先在开发版或体验版打开调试，再切到正式版就能看到vConsole。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setInnerAudioOption": {
    "prefix": "wx.setInnerAudioOption",
    "body": [
      "wx.setInnerAudioOption()"
    ],
    "description": "/** [wx.setInnerAudioOption(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.setInnerAudioOption.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.10.0`\n         *\n         * 设置 [InnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html) 的播放选项。设置之后对当前小程序全局生效。\n         *\n         * ****\n         *\n         * ## 注意事项\n         * - 为保证微信整体体验，speakerOn 为 true 时，客户端会忽略 mixWithOthers 参数的内容，强制与其它音频互斥\n         * - 不支持在播放音频的过程中切换为扬声器播放，开发者如需切换可以先暂停当前播放的音频并记录下当前暂停的时间点，然后切换后重新从原来暂停的时间点开始播放音频\n         * - 目前 wx.setInnerAudioOption 接口不兼容 wx.createWebAudioContext 接口，也不兼容 wx.createInnerAudioContext 开启 useWebAudioImplement 的情况，将在后续版本中支持 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setKeepScreenOn": {
    "prefix": "wx.setKeepScreenOn",
    "body": [
      "wx.setKeepScreenOn({",
      "  keepScreenOn: ${1:true},",
      "})"
    ],
    "description": "/** [wx.setKeepScreenOn(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setKeepScreenOn.html)\n*\n* 需要基础库： `1.4.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。\n*\n* **示例代码**\n*\n* ```js\nwx.setKeepScreenOn({\n  keepScreenOn: true\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setNavigationBarColor": {
    "prefix": "wx.setNavigationBarColor",
    "body": [
      "wx.setNavigationBarColor({",
      "  backgroundColor: '${1:backgroundColor}',",
      "  frontColor: '${2:frontColor}',",
      "})"
    ],
    "description": "/** [wx.setNavigationBarColor(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarColor.html)\n         *\n         * 需要基础库： `1.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 设置页面导航条颜色 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setNavigationBarTitle": {
    "prefix": "wx.setNavigationBarTitle",
    "body": [
      "wx.setNavigationBarTitle({",
      "  title: '${1:title}',",
      "})"
    ],
    "description": "/** [wx.setNavigationBarTitle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html)\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 动态设置当前页面的标题\n*\n* **示例代码**\n*\n* ```js\nwx.setNavigationBarTitle({\n  title: '当前页面'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setScreenBrightness": {
    "prefix": "wx.setScreenBrightness",
    "body": [
      "wx.setScreenBrightness({",
      "  value: ${1:0},",
      "})"
    ],
    "description": "/** [wx.setScreenBrightness(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setScreenBrightness.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 设置屏幕亮度 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setStorage": {
    "prefix": "wx.setStorage",
    "body": [
      "wx.setStorage(${1:option})"
    ],
    "description": "/** [wx.setStorage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **示例代码**\n*\n* ```js\nwx.setStorage({\n  key:\"key\",\n  data:\"value\"\n})\n```\n*\n* ```js\n// 开启加密存储\nwx.setStorage({\n  key: \"key\",\n  data: \"value\",\n  encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n  success() {\n    wx.getStorage({\n      key: \"key\",\n      encrypt: true, // 若开启加密存储，setStorage 和 getStorage 需要同时声明 encrypt 的值为 true\n      success(res) {\n        console.log(res.data)\n      }\n    })\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setStorageSync": {
    "prefix": "wx.setStorageSync",
    "body": [
      "wx.setStorageSync('${1:key}', ${2:data})"
    ],
    "description": "/** [wx.setStorageSync(string key, any data)](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。\n*\n* **注意**\n*\n* storage 应只用来进行数据的持久化存储，不应用于运行时的数据传递或全局状态管理。启动过程中过多的同步读写存储，会显著影响启动耗时。\n*\n* **示例代码**\n*\n* ```js\ntry {\n  wx.setStorageSync('key', 'value')\n} catch (e) { }\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setTabBarBadge": {
    "prefix": "wx.setTabBarBadge",
    "body": [
      "wx.setTabBarBadge({",
      "  index: ${1:0},",
      "  text: '${2:text}',",
      "})"
    ],
    "description": "/** [wx.setTabBarBadge(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarBadge.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 为 tabBar 某一项的右上角添加文本\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarBadge({\n  index: 0,\n  text: '1'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setTabBarItem": {
    "prefix": "wx.setTabBarItem",
    "body": [
      "wx.setTabBarItem({",
      "  index: ${1:0},",
      "})"
    ],
    "description": "/** [wx.setTabBarItem(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarItem.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 动态设置 tabBar 某一项的内容，`2.7.0` 起图片支持临时文件和网络文件。\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarItem({\n  index: 0,\n  text: 'text',\n  iconPath: '/path/to/iconPath',\n  selectedIconPath: '/path/to/selectedIconPath'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setTabBarStyle": {
    "prefix": "wx.setTabBarStyle",
    "body": [
      "wx.setTabBarStyle()"
    ],
    "description": "/** [wx.setTabBarStyle(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarStyle.html)\n*\n* 需要基础库： `1.9.0`\n*\n* 在插件中使用：不支持\n*\n* 动态设置 tabBar 的整体样式\n*\n* **示例代码**\n*\n* ```js\nwx.setTabBarStyle({\n  color: '#FF0000',\n  selectedColor: '#00FF00',\n  backgroundColor: '#0000FF',\n  borderStyle: 'white'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setTopBarText": {
    "prefix": "wx.setTopBarText",
    "body": [
      "wx.setTopBarText({",
      "  text: '${1:text}',",
      "})"
    ],
    "description": "/** [wx.setTopBarText(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/sticky/wx.setTopBarText.html)\n*\n* 需要基础库： `1.4.3`\n*\n* 在插件中使用：不支持\n* @deprecated 基础库版本 [1.9.9](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n*\n* 动态设置置顶栏文字内容。只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容.\n*\n* **示例代码**\n*\n* ```js\nwx.setTopBarText({\n  text: 'hello, world!'\n})\n```\n*\n* **注意**\n*\n* - 调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg：\"setTopBarText: fail invoke too frequently\" */",
    "detail": "function",
    "kind": 9
  },
  "wx.setVisualEffectOnCapture": {
    "prefix": "wx.setVisualEffectOnCapture",
    "body": [
      "wx.setVisualEffectOnCapture()"
    ],
    "description": "/** [wx.setVisualEffectOnCapture(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setVisualEffectOnCapture.html)\n         *\n         * 需要基础库： `2.20.1`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * 设置截屏/录屏时屏幕表现，仅支持在 Android 端调用 */",
    "detail": "function",
    "kind": 9
  },
  "wx.setWifiList": {
    "prefix": "wx.setWifiList",
    "body": [
      "wx.setWifiList({",
      "  wifiList: [$1],",
      "})"
    ],
    "description": "/** [wx.setWifiList(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.setWifiList.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 设置 `wifiList` 中 AP 的相关信息。在 `onGetWifiList` 回调后调用，**iOS特有接口**。\n*\n* **注意**\n*\n* - 该接口只能在 `onGetWifiList` 回调之后才能调用。\n* - 此时客户端会挂起，等待小程序设置 Wi-Fi 信息，请务必尽快调用该接口，若无数据请传入一个空数组。\n* - 有可能随着周边 Wi-Fi 列表的刷新，单个流程内收到多次带有存在重复的 Wi-Fi 列表的回调。\n*\n* **示例代码**\n*\n* ```js\nwx.onGetWifiList(function(res) {\n  if (res.wifiList.length) {\n    wx.setWifiList({\n      wifiList: [{\n        SSID: res.wifiList[0].SSID,\n        BSSID: res.wifiList[0].BSSID,\n        password: '123456'\n      }]\n    })\n  } else {\n    wx.setWifiList({\n      wifiList: []\n    })\n  }\n})\nwx.getWifiList()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.setWindowSize": {
    "prefix": "wx.setWindowSize",
    "body": [
      "wx.setWindowSize({",
      "  height: ${1:0},",
      "  width: ${2:0},",
      "})"
    ],
    "description": "/** [wx.setWindowSize(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.setWindowSize.html)\n         *\n         * 需要基础库： `2.10.1`\n         *\n         * 在插件中使用：不支持\n         * @deprecated 基础库版本 [2.11.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃\n         *\n         * 设置窗口大小，该接口仅适用于 PC 平台，使用细则请参见指南 */",
    "detail": "function",
    "kind": 9
  },
  "wx.shareFileMessage": {
    "prefix": "wx.shareFileMessage",
    "body": [
      "wx.shareFileMessage({",
      "  filePath: '${1:filePath}',",
      "})"
    ],
    "description": "/** [wx.shareFileMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.shareFileMessage.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 转发文件到聊天 */",
    "detail": "function",
    "kind": 9
  },
  "wx.shareToWeRun": {
    "prefix": "wx.shareToWeRun",
    "body": [
      "wx.shareToWeRun({",
      "  recordList: [$1],",
      "})"
    ],
    "description": "/** [wx.shareToWeRun(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.shareToWeRun.html)\n         *\n         * 在插件中使用：不支持\n         *\n         * 分享数据到微信运动。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.shareVideoMessage": {
    "prefix": "wx.shareVideoMessage",
    "body": [
      "wx.shareVideoMessage({",
      "  videoPath: '${1:videoPath}',",
      "})"
    ],
    "description": "/** [wx.shareVideoMessage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.shareVideoMessage.html)\n         *\n         * 需要基础库： `2.16.1`\n         *\n         * 在插件中使用：不支持\n         *\n         * 转发视频到聊天 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showActionSheet": {
    "prefix": "wx.showActionSheet",
    "body": [
      "wx.showActionSheet({",
      "  itemList: [$1],",
      "})"
    ],
    "description": "/** [wx.showActionSheet(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示操作菜单\n*\n* **示例代码**\n*\n* ```js\nwx.showActionSheet({\n  itemList: ['A', 'B', 'C'],\n  success (res) {\n    console.log(res.tapIndex)\n  },\n  fail (res) {\n    console.log(res.errMsg)\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 \"fail cancel\"；\n* - Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showLoading": {
    "prefix": "wx.showLoading",
    "body": [
      "wx.showLoading({",
      "  title: '${1:title}',",
      "})"
    ],
    "description": "/** [wx.showLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框\n*\n* **示例代码**\n*\n* ```js\nwx.showLoading({\n  title: '加载中',\n})\n\nsetTimeout(function () {\n  wx.hideLoading()\n}, 2000)\n```\n*\n* **注意**\n*\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 和 [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 同时只能显示一个\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 应与 [wx.hideLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html) 配对使用 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showModal": {
    "prefix": "wx.showModal",
    "body": [
      "wx.showModal({",
      "  title: '$1',",
      "  content: '$2',",
      "  complete: (res) => {",
      "    if (res.cancel) {",
      "      $3",
      "    }",
      "",
      "    if (res.confirm) {",
      "      $4",
      "    }",
      "  }",
      "})"
    ],
    "description": "/** [wx.showModal(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示模态对话框\n*\n* **示例代码**\n*\n* ```js\nwx.showModal({\n  title: '提示',\n  content: '这是一个模态弹窗',\n  success (res) {\n    if (res.confirm) {\n      console.log('用户点击确定')\n    } else if (res.cancel) {\n      console.log('用户点击取消')\n    }\n  }\n})\n```\n*\n* **注意**\n*\n* - Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 \"fail cancel\"；\n* - Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑\n* - 自基础库 2.17.1 版本起，支持传入 editable 参数，显示带输入框的弹窗 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showNavigationBarLoading": {
    "prefix": "wx.showNavigationBarLoading",
    "body": [
      "wx.showNavigationBarLoading()"
    ],
    "description": "/** [wx.showNavigationBarLoading(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.showNavigationBarLoading.html)\n         *\n         * 在插件中使用：需要基础库 `2.1.0`\n         *\n         * 在插件中使用时，只能在当前插件的页面中调用\n         *\n         * 在当前页面显示导航条加载动画 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showRedPackage": {
    "prefix": "wx.showRedPackage",
    "body": [
      "wx.showRedPackage({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [wx.showRedPackage(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/redpackage/wx.showRedPackage.html)\n         *\n         * 需要基础库： `2.10.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 拉取h5领取红包封面页。获取参考红包封面地址参考 [微信红包封面开发平台](https://cover.weixin.qq.com/cgi-bin/mmcover-bin/readtemplate?t=page/index#/doc?page=introduce)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showShareImageMenu": {
    "prefix": "wx.showShareImageMenu",
    "body": [
      "wx.showShareImageMenu({",
      "  path: '${1:path}',",
      "})"
    ],
    "description": "/** [wx.showShareImageMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareImageMenu.html)\n         *\n         * 需要基础库： `2.14.3`\n         *\n         * 在插件中使用：需要基础库 `2.16.0`\n         *\n         * 打开分享图片弹窗，可以将图片发送给朋友、收藏或下载 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showShareMenu": {
    "prefix": "wx.showShareMenu",
    "body": [
      "wx.showShareMenu()"
    ],
    "description": "/** [wx.showShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareMenu.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 显示当前页面的转发按钮\n*\n* ****\n*\n* ## 注意事项\n*  - \"shareAppMessage\"表示“发送给朋友”按钮，\"shareTimeline\"表示“分享到朋友圈”按钮\n*  - 显示“分享到朋友圈”按钮时必须同时显示“发送给朋友”按钮，显示“发送给朋友”按钮时则允许不显示“分享到朋友圈”按钮\n*\n* **示例代码**\n*\n* ```js\nwx.showShareMenu({\n  withShareTicket: true,\n  menus: ['shareAppMessage', 'shareTimeline']\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.showTabBar": {
    "prefix": "wx.showTabBar",
    "body": [
      "wx.showTabBar()"
    ],
    "description": "/** [wx.showTabBar(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBar.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 显示 tabBar */",
    "detail": "function",
    "kind": 9
  },
  "wx.showTabBarRedDot": {
    "prefix": "wx.showTabBarRedDot",
    "body": [
      "wx.showTabBarRedDot({",
      "  index: ${1:0},",
      "})"
    ],
    "description": "/** [wx.showTabBarRedDot(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBarRedDot.html)\n         *\n         * 需要基础库： `1.9.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 显示 tabBar 某一项的右上角的红点 */",
    "detail": "function",
    "kind": 9
  },
  "wx.showToast": {
    "prefix": "wx.showToast",
    "body": [
      "wx.showToast({",
      "  title: '${1:title}',",
      "})"
    ],
    "description": "/** [wx.showToast(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 显示消息提示框\n*\n* **示例代码**\n*\n* ```js\nwx.showToast({\n  title: '成功',\n  icon: 'success',\n  duration: 2000\n})\n```\n*\n* **注意**\n*\n* - [wx.showLoading](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html) 和 [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 同时只能显示一个\n* - [wx.showToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html) 应与 [wx.hideToast](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html) 配对使用 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startAccelerometer": {
    "prefix": "wx.startAccelerometer",
    "body": [
      "wx.startAccelerometer()"
    ],
    "description": "/** [wx.startAccelerometer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始监听加速度数据。\n*\n* **示例代码**\n*\n* ```js\nwx.startAccelerometer({\n  interval: 'game'\n})\n```\n*\n* **注意**\n*\n* - 根据机型性能、当前 CPU 与内存的占用情况，`interval` 的设置与实际 `wx.onAccelerometerChange()` 回调函数的执行频率会有一些出入。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startBeaconDiscovery": {
    "prefix": "wx.startBeaconDiscovery",
    "body": [
      "wx.startBeaconDiscovery({",
      "  uuids: [$1],",
      "})"
    ],
    "description": "/** [wx.startBeaconDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.startBeaconDiscovery.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始搜索附近的 Beacon 设备\n*\n* **示例代码**\n*\n* ```js\nwx.startBeaconDiscovery({\n  success(res) { }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startBluetoothDevicesDiscovery": {
    "prefix": "wx.startBluetoothDevicesDiscovery",
    "body": [
      "wx.startBluetoothDevicesDiscovery()"
    ],
    "description": "/** [wx.startBluetoothDevicesDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.startBluetoothDevicesDiscovery.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始搜寻附近的蓝牙外围设备。\n*\n* **此操作比较耗费系统资源，请在搜索到需要的设备后及时调用 [wx.stopBluetoothDevicesDiscovery](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html) 停止搜索。**\n*\n* **注意**\n*\n* - 考虑到蓝牙功能可以间接进行定位，安卓 6.0 及以上版本，无定位权限或定位开关未打开时，无法进行设备搜索。这种情况下，安卓 8.0.16 前，接口调用成功但无法扫描设备；8.0.16 及以上版本，会返回错误。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/m7klFDmZ72i1)\n*\n* ```js\n// 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备\nwx.startBluetoothDevicesDiscovery({\n  services: ['FEE7'],\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startCompass": {
    "prefix": "wx.startCompass",
    "body": [
      "wx.startCompass()"
    ],
    "description": "/** [wx.startCompass(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.startCompass.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 开始监听罗盘数据\n*\n* **示例代码**\n*\n* ```js\nwx.startCompass()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startDeviceMotionListening": {
    "prefix": "wx.startDeviceMotionListening",
    "body": [
      "wx.startDeviceMotionListening()"
    ],
    "description": "/** [wx.startDeviceMotionListening(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 开始监听设备方向的变化。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startGyroscope": {
    "prefix": "wx.startGyroscope",
    "body": [
      "wx.startGyroscope()"
    ],
    "description": "/** [wx.startGyroscope(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 开始监听陀螺仪数据。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startHCE": {
    "prefix": "wx.startHCE",
    "body": [
      "wx.startHCE({",
      "  aid_list: [$1],",
      "})"
    ],
    "description": "/** [wx.startHCE(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.startHCE.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 初始化 NFC 模块。（HCE 模式仅安卓支持）\n*\n* **示例代码**\n*\n* ```js\nwx.startHCE({\n  aid_list: ['F222222222'],\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startLocalServiceDiscovery": {
    "prefix": "wx.startLocalServiceDiscovery",
    "body": [
      "wx.startLocalServiceDiscovery({",
      "  serviceType: '${1:serviceType}',",
      "})"
    ],
    "description": "/** [wx.startLocalServiceDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.startLocalServiceDiscovery.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 开始搜索局域网下的 mDNS 服务。搜索的结果会通过 wx.onLocalService* 事件返回。\n         *\n         * **注意**\n         *\n         * 1. 由于操作系统相关能力变更，iOS 微信客户端 7.0.18 及以上版本无法使用 mDNS 相关接口，安卓版本不受影响\n         * 2. wx.startLocalServiceDiscovery 是一个消耗性能的行为，开始 30 秒后会自动 stop 并执行 wx.onLocalServiceDiscoveryStop 注册的回调函数。\n         * 3. 在调用 wx.startLocalServiceDiscovery 后，在这次搜索行为停止后才能发起下次 wx.startLocalServiceDiscovery。停止本次搜索行为的操作包括调用 wx.stopLocalServiceDiscovery 和 30 秒后系统自动 stop 本次搜索。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startLocationUpdate": {
    "prefix": "wx.startLocationUpdate",
    "body": [
      "wx.startLocationUpdate()"
    ],
    "description": "/** [wx.startLocationUpdate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.0`\n         *\n         * 开启小程序进入前台时接收位置消息。\n         *   ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *\n         *   ## 申请开通\n         *   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。从2022年7月14日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         *   ### 国内主体开放类目\n         *\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 电商平台 |\t/\t| 售卖商品线下发货、收货、送货服务 |\n         *   | 商家自营 |\t/\t| 提供售卖商品线下发货、收货、送货服务、线下商超导览、导航服务 |\n         *   | 医疗服务 | 公立医疗机构、三级私立医疗机构、其他私立医疗机构、就医服务、其他医学健康服务、药品（非处方药）销售、非处方药销售平台、医疗器械生产企业、医疗器械自营、医疗器械经营销售平台、互联网医院血液、干细胞服务、临床试验\t\t| 1、实际物品/药品接收服务 2、基于地理位置取号并现场报到、附近医院导航等服务 |\n         *   | 交通服务 |\t/\t| 代驾服务、租车网点导航等相关服务 |\n         *   | 生活服务 |\t/\t| 上门服务作业等线下场景  |\n         *   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t快递/货物收发服务 |\n         *   | 餐饮服务 | \t点餐平台、外卖平台\t| 线下送餐服务 |\n         *   | 工具\t| 天气、信息查询 |\t与地理位置相关的服务，比如潮汐查询、海拔查询、天气查询等 |\n         *   | 金融 | 保险 | 提供线下网点预约、基于地理位置取号并现场报到、附近网点导航等服务 |\n         *   | 旅游 | 景区服务 | 提供景区导航、导览服务 |\n         *   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n         *   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n         *\n         *   ### 海外主体开放类目\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n         *   | 快递业与邮政\t | /\t | 快递/货物收发服务 |\n         *   | 餐饮\t | /\t | 线下送餐服务 |\n         *   | 电商平台\t | /\t | 售卖商品线下发货、线下收货服务 |\n         *   | 出行与交通\t | /\t | 代驾服务、租车网点导航等相关服务 |\n         *   | 跨境电商\t | /\t | 提供售卖商品线下发货、收货服务、线下商超导览、导航服务 |\n         *   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 提供售卖商品线下发货、线下收货服务、线下商超导览、导航服务 |\n         *   | 生活服务\t | 家政、外送\t | 上门服务作业等线下场景 |\n         *\n         * **注意**\n         *\n         * - 获取位置信息需配置[地理位置用途说明](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startLocationUpdateBackground": {
    "prefix": "wx.startLocationUpdateBackground",
    "body": [
      "wx.startLocationUpdateBackground()"
    ],
    "description": "/** [wx.startLocationUpdateBackground(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：不支持\n         *\n         * 开启小程序在前后台时均可接收位置消息，后台包括离开小程序后继续使用微信（微信仍在前台）、离开微信（微信在后台）两个场景，需引导用户开启[授权](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html#后台定位)。授权以后，小程序在运行中或进入后台均可接受位置消息变化。\n         *   ## 使用方法\n         *  自 2022 年 7 月 14 日后发布的小程序，若使用该接口，需要在 app.json 中进行声明，否则将无法正常使用该接口，2022年7月14日前发布的小程序不受影响。[具体规则见公告](https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01)\n         *\n         *   ## 申请开通\n         *   暂只针对如下类目的小程序开放，需要先通过类目审核，再在小程序管理后台，「开发」-「开发管理」-「接口设置」中自助开通该接口权限。从2022年7月14日开始，在代码审核环节将检测该接口是否已完成开通，如未开通，将在代码提审环节进行拦截。\n         *\n         *   ### 国内主体开放类目\n         *\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 电商平台 |\t/\t| 在小程序内提供线下商超导览、导航服务 |\n         *   | 商家自营 |\t/\t| 在小程序内提供线下商超导览、导航服务 |\n         *   | 交通服务 |\t/\t| 代驾服务、打车出行、城市共享交通、实时导航服务等 |\n         *   | 生活服务 |\t跑腿、共享服务\t| 含有B端小程序配送服务，基于地理位置共享工具类服务  |\n         *   | 物流服务 |\t收件/派件、查件、邮政、装卸搬运、快递柜、货物运输\t |\t提供B端小程序快递/货物收发服务 |\n         *   | 餐饮服务 | \t点餐平台、外卖平台\t| 提供B端小程序餐饮配送服务、线下门店实时导航 |\n         *   | 工具\t| 健康管理 |\t基于实时地理位置提供身体管理记录等服务 |\n         *   | 旅游 | 景区服务、住宿服务 | 在小程序内提供景区导航、导览服务、酒店导航服务 |\n         *   | 政务民生 |\t/\t | 提供政务单位相关业务 |\n         *   | 政府主体帐号 |\t/\t| 提供政务单位相关业务 |\n         *\n         *   ### 海外主体开放类目\n         *   | 一级类目/主体类型\t| 二级类目\t| 应用场景 |\n         *   | -------------- | -------| -------- |\n         *   | 交通服务\t | /\t | 代驾服务、打车出行、城市共享交通、实时导航服务等 |\n         *   | 生活服务\t | 家政、外送\t | 含有B端小程序配送服务，基于地理位置导航上门服务 |\n         *   | 快递业与邮政\t | /\t | 提供B端小程序快递/货物收发服务 |\n         *   | 餐饮服务\t | 外卖点餐\t | 提供B端小程序餐饮配送服务、线下门店实时导航 |\n         *   | 电商平台\t | /\t | 在小程序内提供线下商超导览、导航服务 |\n         *   | 跨境电商\t | /\t | 在小程序内提供线下商超导览、导航服务 |\n         *   | 本地服务\t | 服装/鞋/箱包、玩具、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、办公/文具、机械/电子器件、酒、食品、百货/超市/便利店、宠物食品/用品\t | 在小程序内提供线下商超导览、导航服务 |\n         *\n         * **注意**\n         *\n         * - 安卓微信7.0.6版本，iOS 7.0.5版本起支持该接口\n         * - 需在app.json中配置requiredBackgroundModes: ['location']后使用\n         * - 获取位置信息需配置[地理位置用途说明](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission)。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.startPullDownRefresh": {
    "prefix": "wx.startPullDownRefresh",
    "body": [
      "wx.startPullDownRefresh()"
    ],
    "description": "/** [wx.startPullDownRefresh(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 开始下拉刷新。调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。\n*\n* **示例代码**\n*\n* ```js\nwx.startPullDownRefresh()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startRecord": {
    "prefix": "wx.startRecord",
    "body": [
      "wx.startRecord()"
    ],
    "description": "/** [wx.startRecord(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getRecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html) 替换\n*\n* 开始录音。当主动调用 [wx.stopRecord](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html)，或者录音超过1分钟时自动结束录音。当用户离开小程序时，此接口无法调用。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n  }\n})\nsetTimeout(function () {\n  wx.stopRecord() // 结束录音\n}, 10000)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startSoterAuthentication": {
    "prefix": "wx.startSoterAuthentication",
    "body": [
      "wx.startSoterAuthentication({",
      "  challenge: '${1:challenge}',",
      "  requestAuthModes: [$2],",
      "})"
    ],
    "description": "/** [wx.startSoterAuthentication(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.startSoterAuthentication.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：不支持\n*\n* 开始 SOTER 生物认证。验证流程请参考[说明](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/bio-auth.html)。\n*\n* **resultJSON 说明**\n*\n* 此数据为设备TEE中，将传入的challenge和TEE内其他安全信息组成的数据进行组装而来的JSON，对下述字段的解释如下表。例子如下：\n* | 字段名  | 说明                                                                                      |\n* |---------|-------------------------------------------------------------------------------------------|\n* | raw     | 调用者传入的challenge                                                                     |\n* | fid     | （仅Android支持）本次生物识别认证的生物信息编号（如指纹识别则是指纹信息在本设备内部编号） |\n* | counter | 防重放特征参数                                                                            |\n* | tee_n   | TEE名称（如高通或者trustonic等）                                                          |\n* | tee_v   | TEE版本号                                                                                 |\n* | fp_n    | 指纹以及相关逻辑模块提供商（如FPC等）                                                     |\n* | fp_v    | 指纹以及相关模块版本号                                                                    |\n* | cpu_id  | 机器唯一识别ID                                                                            |\n* | uid     | 概念同Android系统定义uid，即应用程序编号                                                  |\n*\n* ```json\n{\n  \"raw\":\"msg\",\n  \"fid\":\"2\",\n  \"counter\":123,\n  \"tee_n\":\"TEE Name\",\n  \"tee_v\":\"TEE Version\",\n  \"fp_n\":\"Fingerprint Sensor Name\",\n  \"fp_v\":\"Fingerprint Sensor Version\",\n  \"cpu_id\":\"CPU Id\",\n  \"uid\":\"21\"\n}\n```\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/q3tCKkmJ7g2e)\n* ```js\nwx.startSoterAuthentication({\n   requestAuthModes: ['fingerPrint'],\n   challenge: '123456',\n   authContent: '请用指纹解锁',\n   success(res) {\n   }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.startWifi": {
    "prefix": "wx.startWifi",
    "body": [
      "wx.startWifi()"
    ],
    "description": "/** [wx.startWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.startWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 初始化 Wi-Fi 模块。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/8P7zrkmd7r2n)\n* ```js\nwx.startWifi({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopAccelerometer": {
    "prefix": "wx.stopAccelerometer",
    "body": [
      "wx.stopAccelerometer()"
    ],
    "description": "/** [wx.stopAccelerometer(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.stopAccelerometer.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止监听加速度数据。\n*\n* **示例代码**\n*\n* ```js\nwx.stopAccelerometer()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopBackgroundAudio": {
    "prefix": "wx.stopBackgroundAudio",
    "body": [
      "wx.stopBackgroundAudio()"
    ],
    "description": "/** [wx.stopBackgroundAudio(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.stopBackgroundAudio.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.2.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getBackgroundAudioManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html) 替换\n*\n* 停止播放音乐。\n*\n* **示例代码**\n*\n* ```js\nwx.stopBackgroundAudio()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopBeaconDiscovery": {
    "prefix": "wx.stopBeaconDiscovery",
    "body": [
      "wx.stopBeaconDiscovery()"
    ],
    "description": "/** [wx.stopBeaconDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.stopBeaconDiscovery.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 停止搜索附近的 Beacon 设备 */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopBluetoothDevicesDiscovery": {
    "prefix": "wx.stopBluetoothDevicesDiscovery",
    "body": [
      "wx.stopBluetoothDevicesDiscovery()"
    ],
    "description": "/** [wx.stopBluetoothDevicesDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\nwx.stopBluetoothDevicesDiscovery({\n  success (res) {\n    console.log(res)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopCompass": {
    "prefix": "wx.stopCompass",
    "body": [
      "wx.stopCompass()"
    ],
    "description": "/** [wx.stopCompass(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.stopCompass.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 停止监听罗盘数据\n*\n* **示例代码**\n*\n* ```js\nwx.stopCompass()\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopDeviceMotionListening": {
    "prefix": "wx.stopDeviceMotionListening",
    "body": [
      "wx.stopDeviceMotionListening()"
    ],
    "description": "/** [wx.stopDeviceMotionListening(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 停止监听设备方向的变化。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopFaceDetect": {
    "prefix": "wx.stopFaceDetect",
    "body": [
      "wx.stopFaceDetect()"
    ],
    "description": "/** [wx.stopFaceDetect(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ai/face/wx.stopFaceDetect.html)\n         *\n         * 需要基础库： `2.18.0`\n         *\n         * 在插件中使用：需要基础库 `2.21.3`\n         *\n         * @warning **该接口已停止维护，推荐使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 代替**\n         *\n         * 停止人脸检测。本接口不再维护，请使用 [wx.createVKSession](https://developers.weixin.qq.com/miniprogram/dev/api/ai/visionkit/wx.createVKSession.html) 接口代替。详情参考[人脸检测指南文档](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/visionkit/face.html) */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopGyroscope": {
    "prefix": "wx.stopGyroscope",
    "body": [
      "wx.stopGyroscope()"
    ],
    "description": "/** [wx.stopGyroscope(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html)\n         *\n         * 需要基础库： `2.3.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.1`\n         *\n         * 停止监听陀螺仪数据。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopHCE": {
    "prefix": "wx.stopHCE",
    "body": [
      "wx.stopHCE()"
    ],
    "description": "/** [wx.stopHCE(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc-hce/wx.stopHCE.html)\n*\n* 需要基础库： `1.7.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 关闭 NFC 模块。仅在安卓系统下有效。\n*\n* **示例代码**\n*\n* ```js\nwx.stopHCE({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopLocalServiceDiscovery": {
    "prefix": "wx.stopLocalServiceDiscovery",
    "body": [
      "wx.stopLocalServiceDiscovery()"
    ],
    "description": "/** [wx.stopLocalServiceDiscovery(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.stopLocalServiceDiscovery.html)\n         *\n         * 需要基础库： `2.4.0`\n         *\n         * 在插件中使用：需要基础库 `2.15.0`\n         *\n         * 停止搜索 mDNS 服务 */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopLocationUpdate": {
    "prefix": "wx.stopLocationUpdate",
    "body": [
      "wx.stopLocationUpdate()"
    ],
    "description": "/** [wx.stopLocationUpdate(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.stopLocationUpdate.html)\n         *\n         * 需要基础库： `2.8.0`\n         *\n         * 在插件中使用：需要基础库 `2.8.0`\n         *\n         * 关闭监听实时位置变化，前后台都停止消息接收 */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopPullDownRefresh": {
    "prefix": "wx.stopPullDownRefresh",
    "body": [
      "wx.stopPullDownRefresh()"
    ],
    "description": "/** [wx.stopPullDownRefresh(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.stopPullDownRefresh.html)\n*\n* 需要基础库： `1.5.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 停止当前页面下拉刷新。\n*\n* **示例代码**\n*\n* ```js\nPage({\n  onPullDownRefresh () {\n    wx.stopPullDownRefresh()\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopRecord": {
    "prefix": "wx.stopRecord",
    "body": [
      "wx.stopRecord()"
    ],
    "description": "/** [wx.stopRecord(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.getRecorderManager](https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html) 替换\n*\n* 停止录音。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n  }\n})\nsetTimeout(function () {\n  wx.stopRecord() // 结束录音\n}, 10000)\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopVoice": {
    "prefix": "wx.stopVoice",
    "body": [
      "wx.stopVoice()"
    ],
    "description": "/** [wx.stopVoice(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html)\n*\n* 在插件中使用：需要基础库 `1.9.6`\n* @deprecated 基础库版本 [1.6.0](https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html) 起已废弃，请使用 [wx.createInnerAudioContext](https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html) 替换\n*\n* 结束播放语音。\n*\n* **示例代码**\n*\n* ```js\nwx.startRecord({\n  success (res) {\n    const tempFilePath = res.tempFilePath\n    wx.playVoice({\n      filePath: tempFilePath,\n    })\n\n    setTimeout(() => { wx.stopVoice() }, 5000)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.stopWifi": {
    "prefix": "wx.stopWifi",
    "body": [
      "wx.stopWifi()"
    ],
    "description": "/** [wx.stopWifi(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.stopWifi.html)\n*\n* 需要基础库： `1.6.0`\n*\n* 在插件中使用：需要基础库 `2.9.1`\n*\n* 关闭 Wi-Fi 模块。\n*\n* **示例代码**\n*\n* ```js\nwx.stopWifi({\n  success (res) {\n    console.log(res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.subscribeVoIPVideoMembers": {
    "prefix": "wx.subscribeVoIPVideoMembers",
    "body": [
      "wx.subscribeVoIPVideoMembers({",
      "  openIdList: [$1],",
      "})"
    ],
    "description": "/** [wx.subscribeVoIPVideoMembers(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.subscribeVoIPVideoMembers.html)\n         *\n         * 需要基础库： `2.11.0`\n         *\n         * 在插件中使用：需要基础库 `2.11.0`\n         *\n         * 订阅视频画面成员。对于视频房间，当成员超过两人时需进行订阅，否则只能看到最先加入房间的两人画面。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.switchTab": {
    "prefix": "wx.switchTab",
    "body": [
      "wx.switchTab({",
      "  url: '${1:url}',",
      "})"
    ],
    "description": "/** [wx.switchTab(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html)\n*\n* 在插件中使用：需要基础库 `2.3.1`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n*\n* **示例代码**\n*\n* ```json\n// app.json\n{\n  \"tabBar\": {\n    \"list\": [{\n      \"pagePath\": \"index\",\n      \"text\": \"首页\"\n    },{\n      \"pagePath\": \"other\",\n      \"text\": \"其他\"\n    }]\n  }\n}\n```\n*\n* ```js\nwx.switchTab({\n  url: '/index'\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.updateShareMenu": {
    "prefix": "wx.updateShareMenu",
    "body": [
      "wx.updateShareMenu()"
    ],
    "description": "/** [wx.updateShareMenu(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.updateShareMenu.html)\n*\n* 需要基础库： `1.2.0`\n*\n* 在插件中使用：需要基础库 `2.1.0`\n*\n* 在插件中使用时，只能在当前插件的页面中调用\n*\n* 更新转发属性\n*\n* **示例代码**\n*\n* ```js\nwx.updateShareMenu({\n  withShareTicket: true,\n  success () { }\n})\n```\n* ```js\n// 转发私密消息\nwx.updateShareMenu({\n  isPrivateMessage: true,\n  activityId: 'xxx',\n  templateInfo: {},\n  success () { },\n  fail () {}\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.updateVoIPChatMuteConfig": {
    "prefix": "wx.updateVoIPChatMuteConfig",
    "body": [
      "wx.updateVoIPChatMuteConfig({",
      "  muteConfig: {$1},",
      "})"
    ],
    "description": "/** [wx.updateVoIPChatMuteConfig(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/media/voip/wx.updateVoIPChatMuteConfig.html)\n         *\n         * 需要基础库： `2.7.0`\n         *\n         * 在插件中使用：需要基础库 `2.9.0`\n         *\n         * 更新实时语音静音设置 */",
    "detail": "function",
    "kind": 9
  },
  "wx.updateWeChatApp": {
    "prefix": "wx.updateWeChatApp",
    "body": [
      "wx.updateWeChatApp()"
    ],
    "description": "/** [wx.updateWeChatApp(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.updateWeChatApp.html)\n         *\n         * 需要基础库： `2.12.0`\n         *\n         * 在插件中使用：需要基础库 `2.12.0`\n         *\n         * 更新客户端版本。当判断用户小程序所在客户端版本过低时，可使用该接口跳转到更新微信页面。 */",
    "detail": "function",
    "kind": 9
  },
  "wx.vibrateLong": {
    "prefix": "wx.vibrateLong",
    "body": [
      "wx.vibrateLong()"
    ],
    "description": "/** [wx.vibrateLong(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 使手机发生较长时间的振动（400 ms) */",
    "detail": "function",
    "kind": 9
  },
  "wx.vibrateShort": {
    "prefix": "wx.vibrateShort",
    "body": [
      "wx.vibrateShort({",
      "  type: '${1:type}',",
      "})"
    ],
    "description": "/** [wx.vibrateShort(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateShort.html)\n         *\n         * 需要基础库： `1.2.0`\n         *\n         * 在插件中使用：需要基础库 `1.9.6`\n         *\n         * 使手机发生较短时间的振动（15 ms）。仅在 iPhone `7 / 7 Plus` 以上及 Android 机型生效 */",
    "detail": "function",
    "kind": 9
  },
  "wx.writeBLECharacteristicValue": {
    "prefix": "wx.writeBLECharacteristicValue",
    "body": [
      "wx.writeBLECharacteristicValue({",
      "  characteristicId: '${1:characteristicId}',",
      "  deviceId: '${2:deviceId}',",
      "  serviceId: '${3:serviceId}',",
      "  value: ${4:value},",
      "})"
    ],
    "description": "/** [wx.writeBLECharacteristicValue(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html)\n*\n* 需要基础库： `1.1.0`\n*\n* 在插件中使用：需要基础库 `1.9.6`\n*\n* 向蓝牙低功耗设备特征值中写入二进制数据。注意：必须设备的特征支持 write 才可以成功调用。\n*\n* **注意**\n*\n* - 并行调用多次会存在写失败的可能性。\n* - 小程序不会对写入数据包大小做限制，但系统与蓝牙设备会限制蓝牙 4.0 单次传输的数据大小，超过最大字节数后会发生写入错误，建议每次写入不超过 20 字节。\n* - 若单次写入数据过长，iOS 上存在系统不会有任何回调的情况（包括错误回调）。\n* - 安卓平台上，在调用 [wx.notifyBLECharacteristicValueChange](https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html) 成功后立即调用本接口，在部分机型上会发生 10008 系统错误\n*\n* **示例代码**\n*\n* [在微信开发者工具中查看示例](https://developers.weixin.qq.com/s/pQU51zmz7a3K)\n* ```js\n// 向蓝牙设备发送一个0x00的16进制数据\nlet buffer = new ArrayBuffer(1)\nlet dataView = new DataView(buffer)\ndataView.setUint8(0, 0)\n\nwx.writeBLECharacteristicValue({\n  // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取\n  deviceId,\n  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取\n  serviceId,\n  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取\n  characteristicId,\n  // 这里的value是ArrayBuffer类型\n  value: buffer,\n  success (res) {\n    console.log('writeBLECharacteristicValue success', res.errMsg)\n  }\n})\n``` */",
    "detail": "function",
    "kind": 9
  },
  "wx.getXrFrameSystem": {
    "prefix": "wx.getXrFrameSystem",
    "body": [
      "wx.getXrFrameSystem()"
    ],
    "description": "/** 获得 xr-frame 接口系统 */",
    "detail": "function",
    "kind": 9
  }
}